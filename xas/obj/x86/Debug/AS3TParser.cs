//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.1 AS3T.g 2014-07-20 20:22:59

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;
using System.IO;
using com.redwine.xas;
using Antlr.Runtime.Tree;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

using Antlr3.ST;
using Antlr3.ST.Language;
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.1")]
[System.CLSCompliant(false)]
public partial class AS3TParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACCESSOR_ROLE", "ADDITIVE_EXP", "ANNOTATION", "ANNOTATIONS", "ANNOTATION_PARAMS", "ARGUMENT", "ARGUMENTS", "ARRAY_ACC", "ARRAY_ACCESS", "ARRAY_LITERAL", "ARRAY_SUBSCRIPT", "AS", "ASSIGN", "ASSIGNMENT_EXPR", "BAND", "BAND_ASSIGN", "BLOCK", "BNOT", "BOM", "BOR", "BOR_ASSIGN", "BREAK", "BREAK_STATEMENT", "BSLASH", "BSR", "BSR_ASSIGN", "BXOR", "BXOR_ASSIGN", "CASE", "CASE_DEFAULT", "CLASS", "CLASS_DEF", "CLASS_MEMBER", "CLASS_NAME", "COLON", "COMMA", "COMPILATION_UNIT", "CONDITION", "CONST", "CONSTANT", "CONTINUE", "CONTINUE_STATEMENT", "CTRLCHAR_ESC", "DBL_COLON", "DEC", "DECIMAL_LITERAL", "DECLARATION", "DECL_STMT", "DEFAULT", "DEFAULT_XML_NAMESPACE", "DIV", "DIV_ASSIGN", "DO", "DOT", "DO_WHILE", "DO_WHILE_LOOP", "DYNAMIC", "E4X_ATTRI", "E4X_DESC", "E4X_EXPRESSION", "EACH", "ELEMENT", "ELIST", "ELSE", "ELSE_CLAUSE", "ENCPS_EXPR", "EQUAL", "ESC", "EXPONENT", "EXPR", "EXPRESSION", "EXPR_LIST", "EXPR_STMNT", "EXTENDS", "EXTENDS_CLAUSE", "FALSE", "FLOAT_LITERAL", "FOR", "FOR_CLAUSE", "FOR_CONDITION", "FOR_EACH_LOOP", "FOR_INIT", "FOR_IN_CLAUSE", "FOR_IN_LOOP", "FOR_ITERATOR", "FOR_LOOP", "FUNCTION", "FUNCTION_CALL", "FUNC_DEF", "GE", "GET", "GT", "HEX_DIGIT", "HEX_LITERAL", "IDENT", "IDENTIFIER", "IDENTIFIER_STAR", "IF", "IF_STMT", "IMPLEMENTS", "IMPLEMENTS_CLAUSE", "IMPORT", "IMPORT_DEF", "IN", "INC", "INCLUDE_DIRECTIVE", "INTERFACE", "INTERFACE_DEF", "INTERNAL", "IS", "LAND", "LAND_ASSIGN", "LBRACK", "LCURLY", "LE", "LITERAL_DOUBLE_STRING", "LITERAL_NUMBER", "LITERAL_REGEX", "LITERAL_SINGLE_STRING", "LITERAL_STRING", "LITERAL_XML", "LNOT", "LOR", "LOR_ASSIGN", "LPAREN", "LT", "METADATA", "METADATA_ITEM", "METHOD", "METHOD_BLOCK", "METHOD_DEF", "METHOD_NAME", "MINUS", "MINUS_ASSIGN", "ML_COMMENT", "MOD", "MODIFIERS", "MODIFIER_LIST", "MOD_ASSIGN", "NAME", "NAMESPACE", "NAMESPACE_DEF", "NAMESPACE_USAGE", "NEW", "NEW_EXPR", "NEW_EXPRESSION", "NL", "NOT_EQUAL", "NULL", "OBJECT_FIELD", "OBJECT_LITERAL", "OCTAL_ESC", "OCTAL_LITERAL", "OCT_DIGIT", "PACKAGE", "PACKAGE_DECL", "PARAM", "PARAMS", "PARAM_DECL", "PARAM_LIST", "PARAM_REST_DECL", "PLUS", "PLUS_ASSIGN", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "PRIMARY_EXPRESSION", "PRIVATE", "PROP_ACCESS", "PROP_OR_IDENT", "PROTECTED", "PUBLIC", "QUALIFIED_NAME", "QUESTION", "RBRACK", "RCURLY", "REGEX", "REGEX_BODY", "REGEX_LITERAL", "REGEX_POSTFIX", "REST", "RETURN", "RETURN_STATEMENT", "RPAREN", "SEMI", "SET", "SL", "SL_ASSIGN", "SL_COMMENT", "SR", "SR_ASSIGN", "STAR", "STAR_ASSIGN", "STATEMENT", "STATEMENT_BLOCK", "STATIC", "STRICT_EQUAL", "STRICT_NOT_EQUAL", "STRING_LITERAL_DOUBLE", "STRING_LITERAL_SINGLE", "SUPER", "SWITCH", "SWITCH_BLOCK", "SWITCH_STATEMENT", "SWITCH_STATEMENT_LIST", "THROW", "THROW_STATEMENT", "TRACE", "TRUE", "TRY_STATEMENT", "TYPE_BLOCK", "TYPE_SPEC", "UNARY_MINUS", "UNARY_PLUS", "UNICODE_ESC", "USE", "VAR", "VARIABLE_DECLARATOR", "VARIABLE_DEF", "VAR_DEC", "VAR_DECLARATION", "VAR_INIT", "VAR_INITIALIZER", "WHILE", "WHILE_LOOP", "WITH", "WS", "XML", "XML_AS3_EXPRESSION", "XML_ATTRIBUTE", "XML_BINDING", "XML_CDATA", "XML_COMMENT", "XML_LITERAL", "XML_SUBTREE", "XML_TEXTNODE", "XML_WS", "'and'", "'catch'", "'delete'", "'enumerable'", "'explicit'", "'final'", "'finally'", "'include'", "'instanceof'", "'intrinsic'", "'or'", "'override'", "'throw'", "'try'", "'typeof'", "'undefined'", "'void'"
	};
	public const int EOF=-1;
	public const int ACCESSOR_ROLE=4;
	public const int ADDITIVE_EXP=5;
	public const int ANNOTATION=6;
	public const int ANNOTATIONS=7;
	public const int ANNOTATION_PARAMS=8;
	public const int ARGUMENT=9;
	public const int ARGUMENTS=10;
	public const int ARRAY_ACC=11;
	public const int ARRAY_ACCESS=12;
	public const int ARRAY_LITERAL=13;
	public const int ARRAY_SUBSCRIPT=14;
	public const int AS=15;
	public const int ASSIGN=16;
	public const int ASSIGNMENT_EXPR=17;
	public const int BAND=18;
	public const int BAND_ASSIGN=19;
	public const int BLOCK=20;
	public const int BNOT=21;
	public const int BOM=22;
	public const int BOR=23;
	public const int BOR_ASSIGN=24;
	public const int BREAK=25;
	public const int BREAK_STATEMENT=26;
	public const int BSLASH=27;
	public const int BSR=28;
	public const int BSR_ASSIGN=29;
	public const int BXOR=30;
	public const int BXOR_ASSIGN=31;
	public const int CASE=32;
	public const int CASE_DEFAULT=33;
	public const int CLASS=34;
	public const int CLASS_DEF=35;
	public const int CLASS_MEMBER=36;
	public const int CLASS_NAME=37;
	public const int COLON=38;
	public const int COMMA=39;
	public const int COMPILATION_UNIT=40;
	public const int CONDITION=41;
	public const int CONST=42;
	public const int CONSTANT=43;
	public const int CONTINUE=44;
	public const int CONTINUE_STATEMENT=45;
	public const int CTRLCHAR_ESC=46;
	public const int DBL_COLON=47;
	public const int DEC=48;
	public const int DECIMAL_LITERAL=49;
	public const int DECLARATION=50;
	public const int DECL_STMT=51;
	public const int DEFAULT=52;
	public const int DEFAULT_XML_NAMESPACE=53;
	public const int DIV=54;
	public const int DIV_ASSIGN=55;
	public const int DO=56;
	public const int DOT=57;
	public const int DO_WHILE=58;
	public const int DO_WHILE_LOOP=59;
	public const int DYNAMIC=60;
	public const int E4X_ATTRI=61;
	public const int E4X_DESC=62;
	public const int E4X_EXPRESSION=63;
	public const int EACH=64;
	public const int ELEMENT=65;
	public const int ELIST=66;
	public const int ELSE=67;
	public const int ELSE_CLAUSE=68;
	public const int ENCPS_EXPR=69;
	public const int EQUAL=70;
	public const int ESC=71;
	public const int EXPONENT=72;
	public const int EXPR=73;
	public const int EXPRESSION=74;
	public const int EXPR_LIST=75;
	public const int EXPR_STMNT=76;
	public const int EXTENDS=77;
	public const int EXTENDS_CLAUSE=78;
	public const int FALSE=79;
	public const int FLOAT_LITERAL=80;
	public const int FOR=81;
	public const int FOR_CLAUSE=82;
	public const int FOR_CONDITION=83;
	public const int FOR_EACH_LOOP=84;
	public const int FOR_INIT=85;
	public const int FOR_IN_CLAUSE=86;
	public const int FOR_IN_LOOP=87;
	public const int FOR_ITERATOR=88;
	public const int FOR_LOOP=89;
	public const int FUNCTION=90;
	public const int FUNCTION_CALL=91;
	public const int FUNC_DEF=92;
	public const int GE=93;
	public const int GET=94;
	public const int GT=95;
	public const int HEX_DIGIT=96;
	public const int HEX_LITERAL=97;
	public const int IDENT=98;
	public const int IDENTIFIER=99;
	public const int IDENTIFIER_STAR=100;
	public const int IF=101;
	public const int IF_STMT=102;
	public const int IMPLEMENTS=103;
	public const int IMPLEMENTS_CLAUSE=104;
	public const int IMPORT=105;
	public const int IMPORT_DEF=106;
	public const int IN=107;
	public const int INC=108;
	public const int INCLUDE_DIRECTIVE=109;
	public const int INTERFACE=110;
	public const int INTERFACE_DEF=111;
	public const int INTERNAL=112;
	public const int IS=113;
	public const int LAND=114;
	public const int LAND_ASSIGN=115;
	public const int LBRACK=116;
	public const int LCURLY=117;
	public const int LE=118;
	public const int LITERAL_DOUBLE_STRING=119;
	public const int LITERAL_NUMBER=120;
	public const int LITERAL_REGEX=121;
	public const int LITERAL_SINGLE_STRING=122;
	public const int LITERAL_STRING=123;
	public const int LITERAL_XML=124;
	public const int LNOT=125;
	public const int LOR=126;
	public const int LOR_ASSIGN=127;
	public const int LPAREN=128;
	public const int LT=129;
	public const int METADATA=130;
	public const int METADATA_ITEM=131;
	public const int METHOD=132;
	public const int METHOD_BLOCK=133;
	public const int METHOD_DEF=134;
	public const int METHOD_NAME=135;
	public const int MINUS=136;
	public const int MINUS_ASSIGN=137;
	public const int ML_COMMENT=138;
	public const int MOD=139;
	public const int MODIFIERS=140;
	public const int MODIFIER_LIST=141;
	public const int MOD_ASSIGN=142;
	public const int NAME=143;
	public const int NAMESPACE=144;
	public const int NAMESPACE_DEF=145;
	public const int NAMESPACE_USAGE=146;
	public const int NEW=147;
	public const int NEW_EXPR=148;
	public const int NEW_EXPRESSION=149;
	public const int NL=150;
	public const int NOT_EQUAL=151;
	public const int NULL=152;
	public const int OBJECT_FIELD=153;
	public const int OBJECT_LITERAL=154;
	public const int OCTAL_ESC=155;
	public const int OCTAL_LITERAL=156;
	public const int OCT_DIGIT=157;
	public const int PACKAGE=158;
	public const int PACKAGE_DECL=159;
	public const int PARAM=160;
	public const int PARAMS=161;
	public const int PARAM_DECL=162;
	public const int PARAM_LIST=163;
	public const int PARAM_REST_DECL=164;
	public const int PLUS=165;
	public const int PLUS_ASSIGN=166;
	public const int POST_DEC=167;
	public const int POST_INC=168;
	public const int PRE_DEC=169;
	public const int PRE_INC=170;
	public const int PRIMARY_EXPRESSION=171;
	public const int PRIVATE=172;
	public const int PROP_ACCESS=173;
	public const int PROP_OR_IDENT=174;
	public const int PROTECTED=175;
	public const int PUBLIC=176;
	public const int QUALIFIED_NAME=177;
	public const int QUESTION=178;
	public const int RBRACK=179;
	public const int RCURLY=180;
	public const int REGEX=181;
	public const int REGEX_BODY=182;
	public const int REGEX_LITERAL=183;
	public const int REGEX_POSTFIX=184;
	public const int REST=185;
	public const int RETURN=186;
	public const int RETURN_STATEMENT=187;
	public const int RPAREN=188;
	public const int SEMI=189;
	public const int SET=190;
	public const int SL=191;
	public const int SL_ASSIGN=192;
	public const int SL_COMMENT=193;
	public const int SR=194;
	public const int SR_ASSIGN=195;
	public const int STAR=196;
	public const int STAR_ASSIGN=197;
	public const int STATEMENT=198;
	public const int STATEMENT_BLOCK=199;
	public const int STATIC=200;
	public const int STRICT_EQUAL=201;
	public const int STRICT_NOT_EQUAL=202;
	public const int STRING_LITERAL_DOUBLE=203;
	public const int STRING_LITERAL_SINGLE=204;
	public const int SUPER=205;
	public const int SWITCH=206;
	public const int SWITCH_BLOCK=207;
	public const int SWITCH_STATEMENT=208;
	public const int SWITCH_STATEMENT_LIST=209;
	public const int THROW=210;
	public const int THROW_STATEMENT=211;
	public const int TRACE=212;
	public const int TRUE=213;
	public const int TRY_STATEMENT=214;
	public const int TYPE_BLOCK=215;
	public const int TYPE_SPEC=216;
	public const int UNARY_MINUS=217;
	public const int UNARY_PLUS=218;
	public const int UNICODE_ESC=219;
	public const int USE=220;
	public const int VAR=221;
	public const int VARIABLE_DECLARATOR=222;
	public const int VARIABLE_DEF=223;
	public const int VAR_DEC=224;
	public const int VAR_DECLARATION=225;
	public const int VAR_INIT=226;
	public const int VAR_INITIALIZER=227;
	public const int WHILE=228;
	public const int WHILE_LOOP=229;
	public const int WITH=230;
	public const int WS=231;
	public const int XML=232;
	public const int XML_AS3_EXPRESSION=233;
	public const int XML_ATTRIBUTE=234;
	public const int XML_BINDING=235;
	public const int XML_CDATA=236;
	public const int XML_COMMENT=237;
	public const int XML_LITERAL=238;
	public const int XML_SUBTREE=239;
	public const int XML_TEXTNODE=240;
	public const int XML_WS=241;
	public const int T__242=242;
	public const int T__243=243;
	public const int T__244=244;
	public const int T__245=245;
	public const int T__246=246;
	public const int T__247=247;
	public const int T__248=248;
	public const int T__249=249;
	public const int T__250=250;
	public const int T__251=251;
	public const int T__252=252;
	public const int T__253=253;
	public const int T__254=254;
	public const int T__255=255;
	public const int T__256=256;
	public const int T__257=257;
	public const int T__258=258;

	public AS3TParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public AS3TParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private StringTemplateGroup _templateGroup = new StringTemplateGroup("AS3TParserTemplates", typeof(AngleBracketTemplateLexer) );

	public StringTemplateGroup TemplateGroup
	{
		get { return _templateGroup; }
		set { _templateGroup = value; }
	}

	public override string[] TokenNames { get { return AS3TParser.tokenNames; } }
	public override string GrammarFileName { get { return "AS3T.g"; } }


	            private AS3TLexer lexer;
	            private ICharStream cs;
				private string _classname;
				private string _basetype;
				private int _modifier;
				private int _scope;
				private int _storage;
				private int _accessor;
				private string _namespace;
				private bool _infunc = false;

				private SymbolTable _symtab = new SymbolTable();

	            public void setInput(AS3TLexer lexer, ICharStream cs) {
	                this.lexer = lexer;
	                this.cs = cs;
	            }

	            // Used in tree rewrite rules to insert semicolon tree IF it exists..
	            private CommonTree maybeSemi(AstParserRuleReturnScope<CommonTree, IToken> semi){
	                return (semi.Start.Type == SEMI ? (CommonTree)semi.Tree : null);
	            }

	        private string _outputpath;

	        public string OutputPath
	        {
	            set
	            {
	                _outputpath = value;
	            }
	            get
	            {
	                return _outputpath;
	            }
	        }

	        public string Classname
	        {
	            set
	            {
	                _classname = value;
	            }
	            get
	            {
	                return _classname;
	            }
	        }

	        public string Basetype
	        {
	            set
	            {
	                _basetype = value;
	            }
	            get
	            {
	                return _basetype;
	            }
	        }

	        public SymbolTable SymTable
	        {
	            set
	            {
	                _symtab = value;
	            }
	            get
	            {
	                return _symtab;
	            }
	        }

			public void gen(StreamWriter sw)
			{
				Console.WriteLine("parser gen()");

	            sw.WriteLine("\n// instance variables");

	            sw.WriteLine("public:\n");
	            foreach (Symbol s in _symtab)
	            {
	                switch (s.Kind)
	                {
	                    case Symbol.VARIABLE:
	                        if (s.Scope == Symbol.PUBLIC)
	                        {
								string storage = "";
								switch (s.Storage)
								{
									case Symbol.STATIC:
										storage = "static";
										break;
								}
	                            sw.WriteLine("\t{0} {1} {2};", storage, s.ReturnType, s.Name);
	                        }
	                        break;
	                    default:
	                        break;
	                }
	            }

	            sw.WriteLine("protected:\n");
	            foreach (Symbol s in _symtab)
	            {
	                switch (s.Kind)
	                {
	                    case Symbol.VARIABLE:
	                        if (s.Scope == Symbol.PROTECTED && s.Storage != Symbol.STATIC)
	                        {
	                            sw.WriteLine("\t{0} {1};", s.ReturnType, s.Name);
	                        }
	                        break;
	                    default:
	                        break;
	                }
	            }

	            sw.WriteLine("private:\n");
	            foreach (Symbol s in _symtab)
	            {
	                switch (s.Kind)
	                {
	                    case Symbol.VARIABLE:
	                        if (s.Scope == Symbol.PRIVATE && s.Storage != Symbol.STATIC)
	                        {
	                            sw.WriteLine("\t{0} {1};", s.ReturnType, s.Name);
	                        }
	                        break;
	                    default:
	                        break;
	                }
	            }

	            sw.WriteLine("\n// methods");
	            sw.WriteLine("public:\n");

	            foreach (Symbol s in _symtab)
	            {
	                switch (s.Kind)
	                {
	                    case Symbol.FUNCTION:
							if (s.Scope == Symbol.PUBLIC)
							{
								string prefix = "";
								switch (s.Accessor)
								{
									case Symbol.SETTER:
									prefix = "set_";
									break;
									case Symbol.GETTER:
									prefix = "get_";
									break;
								}
								if (s.Name == Classname)
								{
									sw.WriteLine("\t{0} {1}{2}{3};", s.ReturnType, prefix, s.Name, s.ArgList);
									sw.WriteLine("\tvirtual ~{0}();", Classname);
								}
								else
								{
									sw.WriteLine("\t{0} {1}{2}{3};", s.ReturnType, prefix, s.Name, s.ArgList);
								}
							}
							break;
	                    default:
	                        break;
	                }
	            }

	            sw.WriteLine("\n// methods");
	            sw.WriteLine("protected:\n");
	            foreach (Symbol s in _symtab)
	            {
	                switch (s.Kind)
	                {
	                    case Symbol.FUNCTION:
							if (s.Scope == Symbol.PROTECTED)
							{
								string prefix = "";
								switch (s.Accessor)
								{
									case Symbol.SETTER:
									prefix = "set_";
									break;
									case Symbol.GETTER:
									prefix = "get_";
									break;
								}
								sw.WriteLine("\t{0} {1}{2}{3};", s.ReturnType, prefix, s.Name, s.ArgList);
							}
							break;
	                    default:
	                        break;
	                }
	            }

	            sw.WriteLine("\n// methods");
	            sw.WriteLine("private:\n");
	            foreach (Symbol s in _symtab)
	            {
	                switch (s.Kind)
	                {
	                    case Symbol.FUNCTION:
							if (s.Scope == Symbol.PRIVATE)
							{
								string prefix = "";
								switch (s.Accessor)
								{
									case Symbol.SETTER:
									prefix = "set_";
									break;
									case Symbol.GETTER:
									prefix = "get_";
									break;
								}
								sw.WriteLine("\t{0} {1}{2}{3};", s.ReturnType, prefix, s.Name, s.ArgList);
							}
							break;
	                    default:
	                        break;
	                }
	            }

				Console.WriteLine("parser gen()--");
			}



	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// AS3T.g:332:8: public program : compilationUnit ;
	[GrammarRule("program")]
	public TemplateParserRuleReturnScope<StringTemplate, IToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(332, 1);
		try
		{
			// AS3T.g:332:16: ( compilationUnit )
			DebugEnterAlt(1);
			// AS3T.g:332:18: compilationUnit
			{
			DebugLocation(332, 18);
			PushFollow(Follow._compilationUnit_in_program475);
			compilationUnit();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_compilationUnit();
	partial void LeaveRule_compilationUnit();
	// $ANTLR start "compilationUnit"
	// AS3T.g:335:1: compilationUnit : ( as2CompilationUnit | as3CompilationUnit ) ;
	[GrammarRule("compilationUnit")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> compilationUnit()
	{
		EnterRule_compilationUnit();
		EnterRule("compilationUnit", 2);
		TraceIn("compilationUnit", 2);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "compilationUnit");
		DebugLocation(335, 1);
		try
		{
			// AS3T.g:336:2: ( ( as2CompilationUnit | as3CompilationUnit ) )
			DebugEnterAlt(1);
			// AS3T.g:336:4: ( as2CompilationUnit | as3CompilationUnit )
			{
			DebugLocation(336, 4);
			// AS3T.g:336:4: ( as2CompilationUnit | as3CompilationUnit )
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==CLASS||LA1_1==DYNAMIC||LA1_1==IDENT||LA1_1==IMPORT||(LA1_1>=INCLUDE_DIRECTIVE && LA1_1<=INTERFACE)||LA1_1==INTERNAL||LA1_1==PRIVATE||(LA1_1>=PROTECTED && LA1_1<=PUBLIC)||LA1_1==STATIC||(LA1_1>=245 && LA1_1<=247)||LA1_1==251||LA1_1==253))
			{
				alt1 = 1;
			}
			else if ((LA1_1==PACKAGE))
			{
				alt1 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:336:6: as2CompilationUnit
				{
				DebugLocation(336, 6);
				PushFollow(Follow._as2CompilationUnit_in_compilationUnit488);
				as2CompilationUnit();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:336:27: as3CompilationUnit
				{
				DebugLocation(336, 27);
				PushFollow(Follow._as3CompilationUnit_in_compilationUnit492);
				as3CompilationUnit();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("compilationUnit", 2);
			LeaveRule("compilationUnit", 2);
			LeaveRule_compilationUnit();
		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "compilationUnit"); }
		return retval;

	}
	// $ANTLR end "compilationUnit"

	partial void EnterRule_as2CompilationUnit();
	partial void LeaveRule_as2CompilationUnit();
	// $ANTLR start "as2CompilationUnit"
	// AS3T.g:339:1: as2CompilationUnit : ( importDefinition )* as2Type ;
	[GrammarRule("as2CompilationUnit")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> as2CompilationUnit()
	{
		EnterRule_as2CompilationUnit();
		EnterRule("as2CompilationUnit", 3);
		TraceIn("as2CompilationUnit", 3);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "as2CompilationUnit");
		DebugLocation(339, 1);
		try
		{
			// AS3T.g:341:2: ( ( importDefinition )* as2Type )
			DebugEnterAlt(1);
			// AS3T.g:341:4: ( importDefinition )* as2Type
			{
			DebugLocation(341, 4);
			// AS3T.g:341:4: ( importDefinition )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==IMPORT))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:341:4: importDefinition
					{
					DebugLocation(341, 4);
					PushFollow(Follow._importDefinition_in_as2CompilationUnit510);
					importDefinition();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(342, 3);
			PushFollow(Follow._as2Type_in_as2CompilationUnit515);
			as2Type();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("as2CompilationUnit", 3);
			LeaveRule("as2CompilationUnit", 3);
			LeaveRule_as2CompilationUnit();
		}
		DebugLocation(343, 1);
		} finally { DebugExitRule(GrammarFileName, "as2CompilationUnit"); }
		return retval;

	}
	// $ANTLR end "as2CompilationUnit"

	partial void EnterRule_as2Type();
	partial void LeaveRule_as2Type();
	// $ANTLR start "as2Type"
	// AS3T.g:345:1: as2Type : ( as2IncludeDirective | ( modifiers CLASS )=> as2ClassDefinition | ( modifiers INTERFACE )=> as2InterfaceDefinition ) ;
	[GrammarRule("as2Type")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> as2Type()
	{
		EnterRule_as2Type();
		EnterRule("as2Type", 4);
		TraceIn("as2Type", 4);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "as2Type");
		DebugLocation(345, 1);
		try
		{
			// AS3T.g:346:2: ( ( as2IncludeDirective | ( modifiers CLASS )=> as2ClassDefinition | ( modifiers INTERFACE )=> as2InterfaceDefinition ) )
			DebugEnterAlt(1);
			// AS3T.g:347:2: ( as2IncludeDirective | ( modifiers CLASS )=> as2ClassDefinition | ( modifiers INTERFACE )=> as2InterfaceDefinition )
			{
			DebugLocation(347, 2);
			// AS3T.g:347:2: ( as2IncludeDirective | ( modifiers CLASS )=> as2ClassDefinition | ( modifiers INTERFACE )=> as2InterfaceDefinition )
			int alt3=3;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			try
			{
				alt3 = dfa3.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:347:4: as2IncludeDirective
				{
				DebugLocation(347, 4);
				PushFollow(Follow._as2IncludeDirective_in_as2Type530);
				as2IncludeDirective();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:348:4: ( modifiers CLASS )=> as2ClassDefinition
				{
				DebugLocation(348, 25);
				PushFollow(Follow._as2ClassDefinition_in_as2Type543);
				as2ClassDefinition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:349:4: ( modifiers INTERFACE )=> as2InterfaceDefinition
				{
				DebugLocation(349, 29);
				PushFollow(Follow._as2InterfaceDefinition_in_as2Type556);
				as2InterfaceDefinition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("as2Type", 4);
			LeaveRule("as2Type", 4);
			LeaveRule_as2Type();
		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "as2Type"); }
		return retval;

	}
	// $ANTLR end "as2Type"

	partial void EnterRule_as3CompilationUnit();
	partial void LeaveRule_as3CompilationUnit();
	// $ANTLR start "as3CompilationUnit"
	// AS3T.g:353:1: as3CompilationUnit : packageDecl ( packageBlockEntry )* EOF ;
	[GrammarRule("as3CompilationUnit")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> as3CompilationUnit()
	{
		EnterRule_as3CompilationUnit();
		EnterRule("as3CompilationUnit", 5);
		TraceIn("as3CompilationUnit", 5);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "as3CompilationUnit");
		DebugLocation(353, 1);
		try
		{
			// AS3T.g:355:2: ( packageDecl ( packageBlockEntry )* EOF )
			DebugEnterAlt(1);
			// AS3T.g:355:4: packageDecl ( packageBlockEntry )* EOF
			{
			DebugLocation(355, 4);
			PushFollow(Follow._packageDecl_in_as3CompilationUnit575);
			packageDecl();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(356, 3);
			// AS3T.g:356:3: ( packageBlockEntry )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==AS||LA4_1==BNOT||LA4_1==BREAK||LA4_1==CLASS||LA4_1==CONST||LA4_1==CONTINUE||(LA4_1>=DEC && LA4_1<=DECIMAL_LITERAL)||LA4_1==DEFAULT||LA4_1==DO||(LA4_1>=DYNAMIC && LA4_1<=E4X_ATTRI)||(LA4_1>=FALSE && LA4_1<=FOR)||LA4_1==FUNCTION||LA4_1==GET||(LA4_1>=HEX_LITERAL && LA4_1<=IDENT)||LA4_1==IF||LA4_1==IMPORT||LA4_1==INC||LA4_1==INTERFACE||(LA4_1>=INTERNAL && LA4_1<=IS)||(LA4_1>=LBRACK && LA4_1<=LCURLY)||LA4_1==LNOT||LA4_1==LPAREN||LA4_1==MINUS||LA4_1==NAMESPACE||LA4_1==NEW||LA4_1==NULL||LA4_1==OCTAL_LITERAL||LA4_1==PLUS||LA4_1==PRIVATE||(LA4_1>=PROTECTED && LA4_1<=PUBLIC)||LA4_1==REGEX_LITERAL||LA4_1==RETURN||(LA4_1>=SEMI && LA4_1<=SET)||LA4_1==STATIC||(LA4_1>=STRING_LITERAL_DOUBLE && LA4_1<=SWITCH)||(LA4_1>=TRACE && LA4_1<=TRUE)||(LA4_1>=USE && LA4_1<=VAR)||LA4_1==WHILE||LA4_1==WITH||LA4_1==XML||LA4_1==XML_LITERAL||(LA4_1>=244 && LA4_1<=247)||LA4_1==249||LA4_1==251||(LA4_1>=253 && LA4_1<=258)))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:356:3: packageBlockEntry
					{
					DebugLocation(356, 3);
					PushFollow(Follow._packageBlockEntry_in_as3CompilationUnit579);
					packageBlockEntry();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(357, 3);
			Match(input,EOF,Follow._EOF_in_as3CompilationUnit584); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("as3CompilationUnit", 5);
			LeaveRule("as3CompilationUnit", 5);
			LeaveRule_as3CompilationUnit();
		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "as3CompilationUnit"); }
		return retval;

	}
	// $ANTLR end "as3CompilationUnit"

	partial void EnterRule_packageDecl();
	partial void LeaveRule_packageDecl();
	// $ANTLR start "packageDecl"
	// AS3T.g:360:1: packageDecl : PACKAGE (id= identifierStar )? LCURLY ( packageBlockEntry )* RCURLY -> file1(x=$textdefs=$packageBlockEntry.text);
	[GrammarRule("packageDecl")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> packageDecl()
	{
		EnterRule_packageDecl();
		EnterRule("packageDecl", 6);
		TraceIn("packageDecl", 6);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> id = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> packageBlockEntry1 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "packageDecl");
		DebugLocation(360, 1);
		try
		{
			// AS3T.g:362:2: ( PACKAGE (id= identifierStar )? LCURLY ( packageBlockEntry )* RCURLY -> file1(x=$textdefs=$packageBlockEntry.text))
			DebugEnterAlt(1);
			// AS3T.g:362:4: PACKAGE (id= identifierStar )? LCURLY ( packageBlockEntry )* RCURLY
			{
			DebugLocation(362, 4);
			Match(input,PACKAGE,Follow._PACKAGE_in_packageDecl600); if (state.failed) return retval;
			DebugLocation(362, 14);
			// AS3T.g:362:14: (id= identifierStar )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==AS||LA5_1==DYNAMIC||LA5_1==GET||LA5_1==IDENT||LA5_1==IS||LA5_1==NAMESPACE||LA5_1==SET||LA5_1==SUPER||LA5_1==TRACE||LA5_1==USE||LA5_1==XML))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:362:14: id= identifierStar
				{
				DebugLocation(362, 14);
				PushFollow(Follow._identifierStar_in_packageDecl604);
				id=identifierStar();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(362, 31);
			if (state.backtracking == 0)
			{
				_namespace = (id!=null?input.ToString(id.Start,id.Stop):default(string));
			}
			DebugLocation(363, 3);
			Match(input,LCURLY,Follow._LCURLY_in_packageDecl611); if (state.failed) return retval;
			DebugLocation(364, 9);
			// AS3T.g:364:9: ( packageBlockEntry )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==AS||LA6_1==BNOT||LA6_1==BREAK||LA6_1==CLASS||LA6_1==CONST||LA6_1==CONTINUE||(LA6_1>=DEC && LA6_1<=DECIMAL_LITERAL)||LA6_1==DEFAULT||LA6_1==DO||(LA6_1>=DYNAMIC && LA6_1<=E4X_ATTRI)||(LA6_1>=FALSE && LA6_1<=FOR)||LA6_1==FUNCTION||LA6_1==GET||(LA6_1>=HEX_LITERAL && LA6_1<=IDENT)||LA6_1==IF||LA6_1==IMPORT||LA6_1==INC||LA6_1==INTERFACE||(LA6_1>=INTERNAL && LA6_1<=IS)||(LA6_1>=LBRACK && LA6_1<=LCURLY)||LA6_1==LNOT||LA6_1==LPAREN||LA6_1==MINUS||LA6_1==NAMESPACE||LA6_1==NEW||LA6_1==NULL||LA6_1==OCTAL_LITERAL||LA6_1==PLUS||LA6_1==PRIVATE||(LA6_1>=PROTECTED && LA6_1<=PUBLIC)||LA6_1==REGEX_LITERAL||LA6_1==RETURN||(LA6_1>=SEMI && LA6_1<=SET)||LA6_1==STATIC||(LA6_1>=STRING_LITERAL_DOUBLE && LA6_1<=SWITCH)||(LA6_1>=TRACE && LA6_1<=TRUE)||(LA6_1>=USE && LA6_1<=VAR)||LA6_1==WHILE||LA6_1==WITH||LA6_1==XML||LA6_1==XML_LITERAL||(LA6_1>=244 && LA6_1<=247)||LA6_1==249||LA6_1==251||(LA6_1>=253 && LA6_1<=258)))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:364:9: packageBlockEntry
					{
					DebugLocation(364, 9);
					PushFollow(Follow._packageBlockEntry_in_packageDecl622);
					packageBlockEntry1=packageBlockEntry();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(365, 3);
			Match(input,RCURLY,Follow._RCURLY_in_packageDecl627); if (state.failed) return retval;

			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 365:10: -> file1(x=$textdefs=$packageBlockEntry.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("file1",
					new Dictionary<string, object>() { {"x", input.ToString(retval.Start,input.LT(-1))}, {"defs", (packageBlockEntry1!=null?input.ToString(packageBlockEntry1.Start,packageBlockEntry1.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("packageDecl", 6);
			LeaveRule("packageDecl", 6);
			LeaveRule_packageDecl();
		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "packageDecl"); }
		return retval;

	}
	// $ANTLR end "packageDecl"

	partial void EnterRule_packageBlockEntry();
	partial void LeaveRule_packageBlockEntry();
	// $ANTLR start "packageBlockEntry"
	// AS3T.g:369:2: packageBlockEntry options {k=2; } : ( importDefinition | includeDirective | useNamespaceDirective | ( LBRACK IDENT )=> annotation | ( modifiers NAMESPACE )=> namespaceDefinition | ( modifiers CLASS )=> classDefinition | ( modifiers INTERFACE )=> interfaceDefinition | ( modifiers FUNCTION )=> methodDefinition | ( modifiers varOrConst )=> variableDefinition | statement );
	[GrammarRule("packageBlockEntry")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> packageBlockEntry()
	{
		EnterRule_packageBlockEntry();
		EnterRule("packageBlockEntry", 7);
		TraceIn("packageBlockEntry", 7);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "packageBlockEntry");
		DebugLocation(369, 1);
		try
		{
			// AS3T.g:371:2: ( importDefinition | includeDirective | useNamespaceDirective | ( LBRACK IDENT )=> annotation | ( modifiers NAMESPACE )=> namespaceDefinition | ( modifiers CLASS )=> classDefinition | ( modifiers INTERFACE )=> interfaceDefinition | ( modifiers FUNCTION )=> methodDefinition | ( modifiers varOrConst )=> variableDefinition | statement )
			int alt7=10;
			try { DebugEnterDecision(7, false);
			try
			{
				alt7 = dfa7.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:371:8: importDefinition
				{
				DebugLocation(371, 8);
				PushFollow(Follow._importDefinition_in_packageBlockEntry672);
				importDefinition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:372:7: includeDirective
				{
				DebugLocation(372, 7);
				PushFollow(Follow._includeDirective_in_packageBlockEntry680);
				includeDirective();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:373:7: useNamespaceDirective
				{
				DebugLocation(373, 7);
				PushFollow(Follow._useNamespaceDirective_in_packageBlockEntry688);
				useNamespaceDirective();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// AS3T.g:374:7: ( LBRACK IDENT )=> annotation
				{
				DebugLocation(374, 25);
				PushFollow(Follow._annotation_in_packageBlockEntry704);
				annotation();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// AS3T.g:375:7: ( modifiers NAMESPACE )=> namespaceDefinition
				{
				DebugLocation(375, 32);
				PushFollow(Follow._namespaceDefinition_in_packageBlockEntry720);
				namespaceDefinition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// AS3T.g:376:13: ( modifiers CLASS )=> classDefinition
				{
				DebugLocation(376, 34);
				PushFollow(Follow._classDefinition_in_packageBlockEntry742);
				classDefinition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// AS3T.g:377:7: ( modifiers INTERFACE )=> interfaceDefinition
				{
				DebugLocation(377, 32);
				PushFollow(Follow._interfaceDefinition_in_packageBlockEntry758);
				interfaceDefinition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// AS3T.g:378:7: ( modifiers FUNCTION )=> methodDefinition
				{
				DebugLocation(378, 31);
				PushFollow(Follow._methodDefinition_in_packageBlockEntry774);
				methodDefinition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// AS3T.g:379:7: ( modifiers varOrConst )=> variableDefinition
				{
				DebugLocation(379, 33);
				PushFollow(Follow._variableDefinition_in_packageBlockEntry790);
				variableDefinition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// AS3T.g:380:13: statement
				{
				DebugLocation(380, 13);
				PushFollow(Follow._statement_in_packageBlockEntry804);
				statement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("packageBlockEntry", 7);
			LeaveRule("packageBlockEntry", 7);
			LeaveRule_packageBlockEntry();
		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "packageBlockEntry"); }
		return retval;

	}
	// $ANTLR end "packageBlockEntry"

	partial void EnterRule_endOfFile();
	partial void LeaveRule_endOfFile();
	// $ANTLR start "endOfFile"
	// AS3T.g:383:1: endOfFile : EOF ;
	[GrammarRule("endOfFile")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> endOfFile()
	{
		EnterRule_endOfFile();
		EnterRule("endOfFile", 8);
		TraceIn("endOfFile", 8);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "endOfFile");
		DebugLocation(383, 1);
		try
		{
			// AS3T.g:385:2: ( EOF )
			DebugEnterAlt(1);
			// AS3T.g:385:4: EOF
			{
			DebugLocation(385, 4);
			Match(input,EOF,Follow._EOF_in_endOfFile820); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("endOfFile", 8);
			LeaveRule("endOfFile", 8);
			LeaveRule_endOfFile();
		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "endOfFile"); }
		return retval;

	}
	// $ANTLR end "endOfFile"

	partial void EnterRule_importDefinition();
	partial void LeaveRule_importDefinition();
	// $ANTLR start "importDefinition"
	// AS3T.g:388:1: importDefinition : IMPORT identifierStar s= semi -> include(name=$identifierStar.text);
	[GrammarRule("importDefinition")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> importDefinition()
	{
		EnterRule_importDefinition();
		EnterRule("importDefinition", 9);
		TraceIn("importDefinition", 9);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> s = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> identifierStar2 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "importDefinition");
		DebugLocation(388, 1);
		try
		{
			// AS3T.g:390:2: ( IMPORT identifierStar s= semi -> include(name=$identifierStar.text))
			DebugEnterAlt(1);
			// AS3T.g:390:4: IMPORT identifierStar s= semi
			{
			DebugLocation(390, 4);
			Match(input,IMPORT,Follow._IMPORT_in_importDefinition836); if (state.failed) return retval;
			DebugLocation(390, 11);
			PushFollow(Follow._identifierStar_in_importDefinition838);
			identifierStar2=identifierStar();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(390, 27);
			PushFollow(Follow._semi_in_importDefinition842);
			s=semi();
			PopFollow();
			if (state.failed) return retval;

			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 390:33: -> include(name=$identifierStar.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("include",
					new Dictionary<string, object>() { {"name", (identifierStar2!=null?input.ToString(identifierStar2.Start,identifierStar2.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("importDefinition", 9);
			LeaveRule("importDefinition", 9);
			LeaveRule_importDefinition();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "importDefinition"); }
		return retval;

	}
	// $ANTLR end "importDefinition"

	partial void EnterRule_semi();
	partial void LeaveRule_semi();
	// $ANTLR start "semi"
	// AS3T.g:394:1: semi : SEMI ;
	[GrammarRule("semi")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> semi()
	{
		EnterRule_semi();
		EnterRule("semi", 10);
		TraceIn("semi", 10);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "semi");
		DebugLocation(394, 1);
		try
		{
			// AS3T.g:395:2: ( SEMI )
			DebugEnterAlt(1);
			// AS3T.g:395:4: SEMI
			{
			DebugLocation(395, 4);
			Match(input,SEMI,Follow._SEMI_in_semi873); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("semi", 10);
			LeaveRule("semi", 10);
			LeaveRule_semi();
		}
		DebugLocation(396, 1);
		} finally { DebugExitRule(GrammarFileName, "semi"); }
		return retval;

	}
	// $ANTLR end "semi"

	partial void EnterRule_classDefinition();
	partial void LeaveRule_classDefinition();
	// $ANTLR start "classDefinition"
	// AS3T.g:398:1: classDefinition : modifiers CLASS ident ( classExtendsClause )? ( implementsClause )? typeBlock -> comment(s=$text);
	[GrammarRule("classDefinition")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> classDefinition()
	{
		EnterRule_classDefinition();
		EnterRule("classDefinition", 11);
		TraceIn("classDefinition", 11);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> ident3 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "classDefinition");
		DebugLocation(398, 1);
		try
		{
			// AS3T.g:400:2: ( modifiers CLASS ident ( classExtendsClause )? ( implementsClause )? typeBlock -> comment(s=$text))
			DebugEnterAlt(1);
			// AS3T.g:400:4: modifiers CLASS ident ( classExtendsClause )? ( implementsClause )? typeBlock
			{
			DebugLocation(400, 4);
			PushFollow(Follow._modifiers_in_classDefinition890);
			modifiers();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(401, 3);
			Match(input,CLASS,Follow._CLASS_in_classDefinition894); if (state.failed) return retval;
			DebugLocation(402, 9);
			PushFollow(Follow._ident_in_classDefinition905);
			ident3=ident();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(402, 15);
			if (state.backtracking == 0)
			{
				_classname = (ident3!=null?input.ToString(ident3.Start,ident3.Stop):default(string)); 
			}
			DebugLocation(403, 3);
			// AS3T.g:403:3: ( classExtendsClause )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==EXTENDS))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:403:3: classExtendsClause
				{
				DebugLocation(403, 3);
				PushFollow(Follow._classExtendsClause_in_classDefinition911);
				classExtendsClause();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(404, 3);
			// AS3T.g:404:3: ( implementsClause )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==IMPLEMENTS))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:404:3: implementsClause
				{
				DebugLocation(404, 3);
				PushFollow(Follow._implementsClause_in_classDefinition916);
				implementsClause();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(405, 3);
			PushFollow(Follow._typeBlock_in_classDefinition921);
			typeBlock();
			PopFollow();
			if (state.failed) return retval;

			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 405:13: -> comment(s=$text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("comment",
					new Dictionary<string, object>() { {"s", input.ToString(retval.Start,input.LT(-1))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classDefinition", 11);
			LeaveRule("classDefinition", 11);
			LeaveRule_classDefinition();
		}
		DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "classDefinition"); }
		return retval;

	}
	// $ANTLR end "classDefinition"

	partial void EnterRule_as2ClassDefinition();
	partial void LeaveRule_as2ClassDefinition();
	// $ANTLR start "as2ClassDefinition"
	// AS3T.g:409:1: as2ClassDefinition : modifiers CLASS identifier ( classExtendsClause )? ( implementsClause )? typeBlock ;
	[GrammarRule("as2ClassDefinition")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> as2ClassDefinition()
	{
		EnterRule_as2ClassDefinition();
		EnterRule("as2ClassDefinition", 12);
		TraceIn("as2ClassDefinition", 12);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "as2ClassDefinition");
		DebugLocation(409, 1);
		try
		{
			// AS3T.g:411:2: ( modifiers CLASS identifier ( classExtendsClause )? ( implementsClause )? typeBlock )
			DebugEnterAlt(1);
			// AS3T.g:411:4: modifiers CLASS identifier ( classExtendsClause )? ( implementsClause )? typeBlock
			{
			DebugLocation(411, 4);
			PushFollow(Follow._modifiers_in_as2ClassDefinition949);
			modifiers();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(412, 3);
			Match(input,CLASS,Follow._CLASS_in_as2ClassDefinition953); if (state.failed) return retval;
			DebugLocation(412, 9);
			PushFollow(Follow._identifier_in_as2ClassDefinition955);
			identifier();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(413, 3);
			// AS3T.g:413:3: ( classExtendsClause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==EXTENDS))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:413:3: classExtendsClause
				{
				DebugLocation(413, 3);
				PushFollow(Follow._classExtendsClause_in_as2ClassDefinition959);
				classExtendsClause();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(414, 3);
			// AS3T.g:414:3: ( implementsClause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==IMPLEMENTS))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:414:3: implementsClause
				{
				DebugLocation(414, 3);
				PushFollow(Follow._implementsClause_in_as2ClassDefinition964);
				implementsClause();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(415, 3);
			PushFollow(Follow._typeBlock_in_as2ClassDefinition969);
			typeBlock();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("as2ClassDefinition", 12);
			LeaveRule("as2ClassDefinition", 12);
			LeaveRule_as2ClassDefinition();
		}
		DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "as2ClassDefinition"); }
		return retval;

	}
	// $ANTLR end "as2ClassDefinition"

	partial void EnterRule_interfaceDefinition();
	partial void LeaveRule_interfaceDefinition();
	// $ANTLR start "interfaceDefinition"
	// AS3T.g:419:1: interfaceDefinition : modifiers INTERFACE ident ( interfaceExtendsClause )? typeBlock ;
	[GrammarRule("interfaceDefinition")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> interfaceDefinition()
	{
		EnterRule_interfaceDefinition();
		EnterRule("interfaceDefinition", 13);
		TraceIn("interfaceDefinition", 13);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "interfaceDefinition");
		DebugLocation(419, 1);
		try
		{
			// AS3T.g:421:2: ( modifiers INTERFACE ident ( interfaceExtendsClause )? typeBlock )
			DebugEnterAlt(1);
			// AS3T.g:421:4: modifiers INTERFACE ident ( interfaceExtendsClause )? typeBlock
			{
			DebugLocation(421, 4);
			PushFollow(Follow._modifiers_in_interfaceDefinition988);
			modifiers();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(422, 3);
			Match(input,INTERFACE,Follow._INTERFACE_in_interfaceDefinition992); if (state.failed) return retval;
			DebugLocation(422, 13);
			PushFollow(Follow._ident_in_interfaceDefinition994);
			ident();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(423, 3);
			// AS3T.g:423:3: ( interfaceExtendsClause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==EXTENDS))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:423:3: interfaceExtendsClause
				{
				DebugLocation(423, 3);
				PushFollow(Follow._interfaceExtendsClause_in_interfaceDefinition998);
				interfaceExtendsClause();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(424, 3);
			PushFollow(Follow._typeBlock_in_interfaceDefinition1003);
			typeBlock();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceDefinition", 13);
			LeaveRule("interfaceDefinition", 13);
			LeaveRule_interfaceDefinition();
		}
		DebugLocation(426, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceDefinition"); }
		return retval;

	}
	// $ANTLR end "interfaceDefinition"

	partial void EnterRule_as2InterfaceDefinition();
	partial void LeaveRule_as2InterfaceDefinition();
	// $ANTLR start "as2InterfaceDefinition"
	// AS3T.g:428:1: as2InterfaceDefinition : modifiers INTERFACE identifier ( interfaceExtendsClause )? typeBlock ;
	[GrammarRule("as2InterfaceDefinition")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> as2InterfaceDefinition()
	{
		EnterRule_as2InterfaceDefinition();
		EnterRule("as2InterfaceDefinition", 14);
		TraceIn("as2InterfaceDefinition", 14);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "as2InterfaceDefinition");
		DebugLocation(428, 1);
		try
		{
			// AS3T.g:430:2: ( modifiers INTERFACE identifier ( interfaceExtendsClause )? typeBlock )
			DebugEnterAlt(1);
			// AS3T.g:430:4: modifiers INTERFACE identifier ( interfaceExtendsClause )? typeBlock
			{
			DebugLocation(430, 4);
			PushFollow(Follow._modifiers_in_as2InterfaceDefinition1022);
			modifiers();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(431, 3);
			Match(input,INTERFACE,Follow._INTERFACE_in_as2InterfaceDefinition1026); if (state.failed) return retval;
			DebugLocation(431, 13);
			PushFollow(Follow._identifier_in_as2InterfaceDefinition1028);
			identifier();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(432, 3);
			// AS3T.g:432:3: ( interfaceExtendsClause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==EXTENDS))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:432:3: interfaceExtendsClause
				{
				DebugLocation(432, 3);
				PushFollow(Follow._interfaceExtendsClause_in_as2InterfaceDefinition1032);
				interfaceExtendsClause();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(433, 3);
			PushFollow(Follow._typeBlock_in_as2InterfaceDefinition1037);
			typeBlock();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("as2InterfaceDefinition", 14);
			LeaveRule("as2InterfaceDefinition", 14);
			LeaveRule_as2InterfaceDefinition();
		}
		DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "as2InterfaceDefinition"); }
		return retval;

	}
	// $ANTLR end "as2InterfaceDefinition"

	partial void EnterRule_classExtendsClause();
	partial void LeaveRule_classExtendsClause();
	// $ANTLR start "classExtendsClause"
	// AS3T.g:437:1: classExtendsClause : EXTENDS identifier ;
	[GrammarRule("classExtendsClause")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> classExtendsClause()
	{
		EnterRule_classExtendsClause();
		EnterRule("classExtendsClause", 15);
		TraceIn("classExtendsClause", 15);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> identifier4 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "classExtendsClause");
		DebugLocation(437, 1);
		try
		{
			// AS3T.g:439:2: ( EXTENDS identifier )
			DebugEnterAlt(1);
			// AS3T.g:439:4: EXTENDS identifier
			{
			DebugLocation(439, 4);
			Match(input,EXTENDS,Follow._EXTENDS_in_classExtendsClause1056); if (state.failed) return retval;
			DebugLocation(439, 12);
			PushFollow(Follow._identifier_in_classExtendsClause1058);
			identifier4=identifier();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(439, 23);
			if (state.backtracking == 0)
			{
				_basetype = (identifier4!=null?input.ToString(identifier4.Start,identifier4.Stop):default(string)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classExtendsClause", 15);
			LeaveRule("classExtendsClause", 15);
			LeaveRule_classExtendsClause();
		}
		DebugLocation(441, 1);
		} finally { DebugExitRule(GrammarFileName, "classExtendsClause"); }
		return retval;

	}
	// $ANTLR end "classExtendsClause"

	partial void EnterRule_interfaceExtendsClause();
	partial void LeaveRule_interfaceExtendsClause();
	// $ANTLR start "interfaceExtendsClause"
	// AS3T.g:443:1: interfaceExtendsClause : EXTENDS identifier ( COMMA identifier )* ;
	[GrammarRule("interfaceExtendsClause")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> interfaceExtendsClause()
	{
		EnterRule_interfaceExtendsClause();
		EnterRule("interfaceExtendsClause", 16);
		TraceIn("interfaceExtendsClause", 16);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "interfaceExtendsClause");
		DebugLocation(443, 1);
		try
		{
			// AS3T.g:445:2: ( EXTENDS identifier ( COMMA identifier )* )
			DebugEnterAlt(1);
			// AS3T.g:445:4: EXTENDS identifier ( COMMA identifier )*
			{
			DebugLocation(445, 4);
			Match(input,EXTENDS,Follow._EXTENDS_in_interfaceExtendsClause1085); if (state.failed) return retval;
			DebugLocation(445, 12);
			PushFollow(Follow._identifier_in_interfaceExtendsClause1087);
			identifier();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(445, 23);
			// AS3T.g:445:23: ( COMMA identifier )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==COMMA))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:445:25: COMMA identifier
					{
					DebugLocation(445, 25);
					Match(input,COMMA,Follow._COMMA_in_interfaceExtendsClause1091); if (state.failed) return retval;
					DebugLocation(445, 31);
					PushFollow(Follow._identifier_in_interfaceExtendsClause1093);
					identifier();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceExtendsClause", 16);
			LeaveRule("interfaceExtendsClause", 16);
			LeaveRule_interfaceExtendsClause();
		}
		DebugLocation(447, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceExtendsClause"); }
		return retval;

	}
	// $ANTLR end "interfaceExtendsClause"

	partial void EnterRule_implementsClause();
	partial void LeaveRule_implementsClause();
	// $ANTLR start "implementsClause"
	// AS3T.g:449:1: implementsClause : IMPLEMENTS i1= identifier ( COMMA i2= identifier )* -> interfaces(i=$i1.text);
	[GrammarRule("implementsClause")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> implementsClause()
	{
		EnterRule_implementsClause();
		EnterRule("implementsClause", 17);
		TraceIn("implementsClause", 17);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> i1 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> i2 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "implementsClause");
		DebugLocation(449, 1);
		try
		{
			// AS3T.g:451:2: ( IMPLEMENTS i1= identifier ( COMMA i2= identifier )* -> interfaces(i=$i1.text))
			DebugEnterAlt(1);
			// AS3T.g:451:4: IMPLEMENTS i1= identifier ( COMMA i2= identifier )*
			{
			DebugLocation(451, 4);
			Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_implementsClause1120); if (state.failed) return retval;
			DebugLocation(451, 17);
			PushFollow(Follow._identifier_in_implementsClause1124);
			i1=identifier();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(451, 29);
			// AS3T.g:451:29: ( COMMA i2= identifier )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==COMMA))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:451:31: COMMA i2= identifier
					{
					DebugLocation(451, 31);
					Match(input,COMMA,Follow._COMMA_in_implementsClause1128); if (state.failed) return retval;
					DebugLocation(451, 39);
					PushFollow(Follow._identifier_in_implementsClause1132);
					i2=identifier();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 451:53: -> interfaces(i=$i1.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("interfaces",
					new Dictionary<string, object>() { {"i", (i1!=null?input.ToString(i1.Start,i1.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("implementsClause", 17);
			LeaveRule("implementsClause", 17);
			LeaveRule_implementsClause();
		}
		DebugLocation(453, 1);
		} finally { DebugExitRule(GrammarFileName, "implementsClause"); }
		return retval;

	}
	// $ANTLR end "implementsClause"

	partial void EnterRule_typeBlock();
	partial void LeaveRule_typeBlock();
	// $ANTLR start "typeBlock"
	// AS3T.g:455:1: typeBlock : LCURLY ( typeBlockEntry )* RCURLY ;
	[GrammarRule("typeBlock")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> typeBlock()
	{
		EnterRule_typeBlock();
		EnterRule("typeBlock", 18);
		TraceIn("typeBlock", 18);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "typeBlock");
		DebugLocation(455, 1);
		try
		{
			// AS3T.g:457:2: ( LCURLY ( typeBlockEntry )* RCURLY )
			DebugEnterAlt(1);
			// AS3T.g:457:4: LCURLY ( typeBlockEntry )* RCURLY
			{
			DebugLocation(457, 4);
			Match(input,LCURLY,Follow._LCURLY_in_typeBlock1168); if (state.failed) return retval;
			DebugLocation(458, 9);
			// AS3T.g:458:9: ( typeBlockEntry )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==AS||LA16_1==BNOT||LA16_1==BREAK||LA16_1==CONST||LA16_1==CONTINUE||(LA16_1>=DEC && LA16_1<=DECIMAL_LITERAL)||LA16_1==DEFAULT||LA16_1==DO||(LA16_1>=DYNAMIC && LA16_1<=E4X_ATTRI)||(LA16_1>=FALSE && LA16_1<=FOR)||LA16_1==FUNCTION||LA16_1==GET||(LA16_1>=HEX_LITERAL && LA16_1<=IDENT)||LA16_1==IF||LA16_1==IMPORT||LA16_1==INC||(LA16_1>=INTERNAL && LA16_1<=IS)||(LA16_1>=LBRACK && LA16_1<=LCURLY)||LA16_1==LNOT||LA16_1==LPAREN||LA16_1==MINUS||LA16_1==NAMESPACE||LA16_1==NEW||LA16_1==NULL||LA16_1==OCTAL_LITERAL||LA16_1==PLUS||LA16_1==PRIVATE||(LA16_1>=PROTECTED && LA16_1<=PUBLIC)||LA16_1==REGEX_LITERAL||LA16_1==RETURN||(LA16_1>=SEMI && LA16_1<=SET)||LA16_1==STATIC||(LA16_1>=STRING_LITERAL_DOUBLE && LA16_1<=SWITCH)||(LA16_1>=TRACE && LA16_1<=TRUE)||(LA16_1>=USE && LA16_1<=VAR)||LA16_1==WHILE||LA16_1==WITH||LA16_1==XML||LA16_1==XML_LITERAL||(LA16_1>=244 && LA16_1<=247)||LA16_1==249||LA16_1==251||(LA16_1>=253 && LA16_1<=258)))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:458:9: typeBlockEntry
					{
					DebugLocation(458, 9);
					PushFollow(Follow._typeBlockEntry_in_typeBlock1178);
					typeBlockEntry();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(459, 3);
			Match(input,RCURLY,Follow._RCURLY_in_typeBlock1183); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeBlock", 18);
			LeaveRule("typeBlock", 18);
			LeaveRule_typeBlock();
		}
		DebugLocation(461, 1);
		} finally { DebugExitRule(GrammarFileName, "typeBlock"); }
		return retval;

	}
	// $ANTLR end "typeBlock"

	partial void EnterRule_typeBlockEntry();
	partial void LeaveRule_typeBlockEntry();
	// $ANTLR start "typeBlockEntry"
	// AS3T.g:463:1: typeBlockEntry options {k=2; } : ( includeDirective | importDefinition | ( LBRACK IDENT )=> annotation | ( modifiers varOrConst )=> variableDefinition | ( modifiers FUNCTION )=> methodDefinition | statement );
	[GrammarRule("typeBlockEntry")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> typeBlockEntry()
	{
		EnterRule_typeBlockEntry();
		EnterRule("typeBlockEntry", 19);
		TraceIn("typeBlockEntry", 19);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "typeBlockEntry");
		DebugLocation(463, 1);
		try
		{
			// AS3T.g:465:2: ( includeDirective | importDefinition | ( LBRACK IDENT )=> annotation | ( modifiers varOrConst )=> variableDefinition | ( modifiers FUNCTION )=> methodDefinition | statement )
			int alt17=6;
			try { DebugEnterDecision(17, false);
			try
			{
				alt17 = dfa17.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:466:7: includeDirective
				{
				DebugLocation(466, 7);
				PushFollow(Follow._includeDirective_in_typeBlockEntry1218);
				includeDirective();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:467:4: importDefinition
				{
				DebugLocation(467, 4);
				PushFollow(Follow._importDefinition_in_typeBlockEntry1223);
				importDefinition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:468:4: ( LBRACK IDENT )=> annotation
				{
				DebugLocation(468, 22);
				PushFollow(Follow._annotation_in_typeBlockEntry1236);
				annotation();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// AS3T.g:469:4: ( modifiers varOrConst )=> variableDefinition
				{
				DebugLocation(469, 31);
				PushFollow(Follow._variableDefinition_in_typeBlockEntry1250);
				variableDefinition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// AS3T.g:470:4: ( modifiers FUNCTION )=> methodDefinition
				{
				DebugLocation(470, 28);
				PushFollow(Follow._methodDefinition_in_typeBlockEntry1264);
				methodDefinition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// AS3T.g:471:4: statement
				{
				DebugLocation(471, 4);
				PushFollow(Follow._statement_in_typeBlockEntry1270);
				statement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeBlockEntry", 19);
			LeaveRule("typeBlockEntry", 19);
			LeaveRule_typeBlockEntry();
		}
		DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "typeBlockEntry"); }
		return retval;

	}
	// $ANTLR end "typeBlockEntry"

	partial void EnterRule_as2IncludeDirective();
	partial void LeaveRule_as2IncludeDirective();
	// $ANTLR start "as2IncludeDirective"
	// AS3T.g:474:1: as2IncludeDirective : INCLUDE_DIRECTIVE stringLiteral ;
	[GrammarRule("as2IncludeDirective")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> as2IncludeDirective()
	{
		EnterRule_as2IncludeDirective();
		EnterRule("as2IncludeDirective", 20);
		TraceIn("as2IncludeDirective", 20);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "as2IncludeDirective");
		DebugLocation(474, 1);
		try
		{
			// AS3T.g:475:2: ( INCLUDE_DIRECTIVE stringLiteral )
			DebugEnterAlt(1);
			// AS3T.g:475:4: INCLUDE_DIRECTIVE stringLiteral
			{
			DebugLocation(475, 4);
			Match(input,INCLUDE_DIRECTIVE,Follow._INCLUDE_DIRECTIVE_in_as2IncludeDirective1281); if (state.failed) return retval;
			DebugLocation(476, 3);
			PushFollow(Follow._stringLiteral_in_as2IncludeDirective1285);
			stringLiteral();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("as2IncludeDirective", 20);
			LeaveRule("as2IncludeDirective", 20);
			LeaveRule_as2IncludeDirective();
		}
		DebugLocation(477, 1);
		} finally { DebugExitRule(GrammarFileName, "as2IncludeDirective"); }
		return retval;

	}
	// $ANTLR end "as2IncludeDirective"

	partial void EnterRule_includeDirective();
	partial void LeaveRule_includeDirective();
	// $ANTLR start "includeDirective"
	// AS3T.g:479:1: includeDirective : 'include' stringLiteral s= semi ;
	[GrammarRule("includeDirective")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> includeDirective()
	{
		EnterRule_includeDirective();
		EnterRule("includeDirective", 21);
		TraceIn("includeDirective", 21);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> s = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "includeDirective");
		DebugLocation(479, 1);
		try
		{
			// AS3T.g:480:2: ( 'include' stringLiteral s= semi )
			DebugEnterAlt(1);
			// AS3T.g:480:4: 'include' stringLiteral s= semi
			{
			DebugLocation(480, 4);
			Match(input,249,Follow._249_in_includeDirective1296); if (state.failed) return retval;
			DebugLocation(480, 14);
			PushFollow(Follow._stringLiteral_in_includeDirective1298);
			stringLiteral();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(480, 29);
			PushFollow(Follow._semi_in_includeDirective1302);
			s=semi();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("includeDirective", 21);
			LeaveRule("includeDirective", 21);
			LeaveRule_includeDirective();
		}
		DebugLocation(482, 1);
		} finally { DebugExitRule(GrammarFileName, "includeDirective"); }
		return retval;

	}
	// $ANTLR end "includeDirective"

	partial void EnterRule_methodDefinition();
	partial void LeaveRule_methodDefinition();
	// $ANTLR start "methodDefinition"
	// AS3T.g:485:1: methodDefinition : modifiers FUNCTION ( accessorRole )? methodName parameterDeclarationList ( typeExpression )? maybeBlock -> method(class=_classnamename=$methodName.textret=$typeExpression.textargs=$parameterDeclarationList.textblock=$maybeBlock.textaccessor=$accessorRole.text);
	[GrammarRule("methodDefinition")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> methodDefinition()
	{
		EnterRule_methodDefinition();
		EnterRule("methodDefinition", 22);
		TraceIn("methodDefinition", 22);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> methodName5 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> parameterDeclarationList6 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> typeExpression7 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> maybeBlock8 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> accessorRole9 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		 _infunc = true; 
		try { DebugEnterRule(GrammarFileName, "methodDefinition");
		DebugLocation(485, 1);
		try
		{
			// AS3T.g:488:2: ( modifiers FUNCTION ( accessorRole )? methodName parameterDeclarationList ( typeExpression )? maybeBlock -> method(class=_classnamename=$methodName.textret=$typeExpression.textargs=$parameterDeclarationList.textblock=$maybeBlock.textaccessor=$accessorRole.text))
			DebugEnterAlt(1);
			// AS3T.g:489:3: modifiers FUNCTION ( accessorRole )? methodName parameterDeclarationList ( typeExpression )? maybeBlock
			{
			DebugLocation(489, 3);
			PushFollow(Follow._modifiers_in_methodDefinition1335);
			modifiers();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(490, 3);
			Match(input,FUNCTION,Follow._FUNCTION_in_methodDefinition1339); if (state.failed) return retval;
			DebugLocation(491, 9);
			// AS3T.g:491:9: ( accessorRole )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==GET))
			{
				int LA18_2 = input.LA(2);

				if ((LA18_2==AS||LA18_2==DYNAMIC||LA18_2==GET||LA18_2==IDENT||LA18_2==IS||LA18_2==NAMESPACE||LA18_2==SET||LA18_2==SUPER||LA18_2==TRACE||LA18_2==USE||LA18_2==XML))
				{
					alt18 = 1;
				}
			}
			else if ((LA18_1==SET))
			{
				int LA18_2 = input.LA(2);

				if ((LA18_2==AS||LA18_2==DYNAMIC||LA18_2==GET||LA18_2==IDENT||LA18_2==IS||LA18_2==NAMESPACE||LA18_2==SET||LA18_2==SUPER||LA18_2==TRACE||LA18_2==USE||LA18_2==XML))
				{
					alt18 = 1;
				}
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:491:9: accessorRole
				{
				DebugLocation(491, 9);
				PushFollow(Follow._accessorRole_in_methodDefinition1349);
				accessorRole9=accessorRole();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(492, 3);
			PushFollow(Follow._methodName_in_methodDefinition1354);
			methodName5=methodName();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(493, 3);
			PushFollow(Follow._parameterDeclarationList_in_methodDefinition1358);
			parameterDeclarationList6=parameterDeclarationList();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(494, 3);
			// AS3T.g:494:3: ( typeExpression )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			try
			{
				alt19 = dfa19.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:494:3: typeExpression
				{
				DebugLocation(494, 3);
				PushFollow(Follow._typeExpression_in_methodDefinition1362);
				typeExpression7=typeExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(495, 9);
			PushFollow(Follow._maybeBlock_in_methodDefinition1373);
			maybeBlock8=maybeBlock();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(495, 20);
			if (state.backtracking == 0)
			{

							Symbol s = new Symbol();
							s.Name = (methodName5!=null?input.ToString(methodName5.Start,methodName5.Stop):default(string));
							s.EnclosingType = _classname;
							s.Kind = Symbol.FUNCTION;
							s.ArgList = (parameterDeclarationList6!=null?input.ToString(parameterDeclarationList6.Start,parameterDeclarationList6.Stop):default(string));
							s.Scope = _scope;
							s.Accessor = _accessor;
							s.ReturnType = (typeExpression7!=null?input.ToString(typeExpression7.Start,typeExpression7.Stop):default(string));

							_symtab.Add(s);
							_accessor = -1;
							_scope = -1;
						
			}

			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 509:3: -> method(class=_classnamename=$methodName.textret=$typeExpression.textargs=$parameterDeclarationList.textblock=$maybeBlock.textaccessor=$accessorRole.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("method",
					new Dictionary<string, object>() { {"class", _classname}, {"name", (methodName5!=null?input.ToString(methodName5.Start,methodName5.Stop):default(string))}, {"ret", (typeExpression7!=null?input.ToString(typeExpression7.Start,typeExpression7.Stop):default(string))}, {"args", (parameterDeclarationList6!=null?input.ToString(parameterDeclarationList6.Start,parameterDeclarationList6.Stop):default(string))}, {"block", (maybeBlock8!=null?input.ToString(maybeBlock8.Start,maybeBlock8.Stop):default(string))}, {"accessor", (accessorRole9!=null?input.ToString(accessorRole9.Start,accessorRole9.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				_infunc = false;
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("methodDefinition", 22);
			LeaveRule("methodDefinition", 22);
			LeaveRule_methodDefinition();
		}
		DebugLocation(511, 1);
		} finally { DebugExitRule(GrammarFileName, "methodDefinition"); }
		return retval;

	}
	// $ANTLR end "methodDefinition"

	partial void EnterRule_maybeBlock();
	partial void LeaveRule_maybeBlock();
	// $ANTLR start "maybeBlock"
	// AS3T.g:513:1: maybeBlock options {k=1; } : ( ( LCURLY )=> block |);
	[GrammarRule("maybeBlock")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> maybeBlock()
	{
		EnterRule_maybeBlock();
		EnterRule("maybeBlock", 23);
		TraceIn("maybeBlock", 23);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "maybeBlock");
		DebugLocation(513, 4);
		try
		{
			// AS3T.g:514:5: ( ( LCURLY )=> block |)
			int alt20=2;
			try { DebugEnterDecision(20, false);
			try
			{
				alt20 = dfa20.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:515:5: ( LCURLY )=> block
				{
				DebugLocation(515, 17);
				PushFollow(Follow._block_in_maybeBlock1446);
				block();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:517:5: 
				{
				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("maybeBlock", 23);
			LeaveRule("maybeBlock", 23);
			LeaveRule_maybeBlock();
		}
		DebugLocation(517, 4);
		} finally { DebugExitRule(GrammarFileName, "maybeBlock"); }
		return retval;

	}
	// $ANTLR end "maybeBlock"

	partial void EnterRule_methodName();
	partial void LeaveRule_methodName();
	// $ANTLR start "methodName"
	// AS3T.g:519:1: methodName : ident ;
	[GrammarRule("methodName")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> methodName()
	{
		EnterRule_methodName();
		EnterRule("methodName", 24);
		TraceIn("methodName", 24);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "methodName");
		DebugLocation(519, 4);
		try
		{
			// AS3T.g:521:5: ( ident )
			DebugEnterAlt(1);
			// AS3T.g:521:7: ident
			{
			DebugLocation(521, 7);
			PushFollow(Follow._ident_in_methodName1477);
			ident();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("methodName", 24);
			LeaveRule("methodName", 24);
			LeaveRule_methodName();
		}
		DebugLocation(522, 4);
		} finally { DebugExitRule(GrammarFileName, "methodName"); }
		return retval;

	}
	// $ANTLR end "methodName"

	partial void EnterRule_accessorRole();
	partial void LeaveRule_accessorRole();
	// $ANTLR start "accessorRole"
	// AS3T.g:525:1: accessorRole : ( GET | SET );
	[GrammarRule("accessorRole")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> accessorRole()
	{
		EnterRule_accessorRole();
		EnterRule("accessorRole", 25);
		TraceIn("accessorRole", 25);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "accessorRole");
		DebugLocation(525, 1);
		try
		{
			// AS3T.g:527:2: ( GET | SET )
			int alt21=2;
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==GET))
			{
				alt21 = 1;
			}
			else if ((LA21_1==SET))
			{
				alt21 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:527:4: GET
				{
				DebugLocation(527, 4);
				Match(input,GET,Follow._GET_in_accessorRole1497); if (state.failed) return retval;
				DebugLocation(527, 8);
				if (state.backtracking == 0)
				{
					_accessor = Symbol.GETTER; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:528:4: SET
				{
				DebugLocation(528, 4);
				Match(input,SET,Follow._SET_in_accessorRole1504); if (state.failed) return retval;
				DebugLocation(528, 8);
				if (state.backtracking == 0)
				{
					_accessor = Symbol.SETTER; 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("accessorRole", 25);
			LeaveRule("accessorRole", 25);
			LeaveRule_accessorRole();
		}
		DebugLocation(529, 1);
		} finally { DebugExitRule(GrammarFileName, "accessorRole"); }
		return retval;

	}
	// $ANTLR end "accessorRole"

	partial void EnterRule_namespaceDefinition();
	partial void LeaveRule_namespaceDefinition();
	// $ANTLR start "namespaceDefinition"
	// AS3T.g:531:1: namespaceDefinition : modifiers NAMESPACE namespaceName ;
	[GrammarRule("namespaceDefinition")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> namespaceDefinition()
	{
		EnterRule_namespaceDefinition();
		EnterRule("namespaceDefinition", 26);
		TraceIn("namespaceDefinition", 26);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "namespaceDefinition");
		DebugLocation(531, 1);
		try
		{
			// AS3T.g:532:2: ( modifiers NAMESPACE namespaceName )
			DebugEnterAlt(1);
			// AS3T.g:532:4: modifiers NAMESPACE namespaceName
			{
			DebugLocation(532, 4);
			PushFollow(Follow._modifiers_in_namespaceDefinition1517);
			modifiers();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(532, 14);
			Match(input,NAMESPACE,Follow._NAMESPACE_in_namespaceDefinition1519); if (state.failed) return retval;
			DebugLocation(532, 24);
			PushFollow(Follow._namespaceName_in_namespaceDefinition1521);
			namespaceName();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespaceDefinition", 26);
			LeaveRule("namespaceDefinition", 26);
			LeaveRule_namespaceDefinition();
		}
		DebugLocation(534, 1);
		} finally { DebugExitRule(GrammarFileName, "namespaceDefinition"); }
		return retval;

	}
	// $ANTLR end "namespaceDefinition"

	partial void EnterRule_useNamespaceDirective();
	partial void LeaveRule_useNamespaceDirective();
	// $ANTLR start "useNamespaceDirective"
	// AS3T.g:536:1: useNamespaceDirective : USE NAMESPACE namespaceName s= semi ;
	[GrammarRule("useNamespaceDirective")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> useNamespaceDirective()
	{
		EnterRule_useNamespaceDirective();
		EnterRule("useNamespaceDirective", 27);
		TraceIn("useNamespaceDirective", 27);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> s = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "useNamespaceDirective");
		DebugLocation(536, 1);
		try
		{
			// AS3T.g:537:2: ( USE NAMESPACE namespaceName s= semi )
			DebugEnterAlt(1);
			// AS3T.g:537:4: USE NAMESPACE namespaceName s= semi
			{
			DebugLocation(537, 4);
			Match(input,USE,Follow._USE_in_useNamespaceDirective1535); if (state.failed) return retval;
			DebugLocation(537, 8);
			Match(input,NAMESPACE,Follow._NAMESPACE_in_useNamespaceDirective1537); if (state.failed) return retval;
			DebugLocation(537, 18);
			PushFollow(Follow._namespaceName_in_useNamespaceDirective1539);
			namespaceName();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(537, 33);
			PushFollow(Follow._semi_in_useNamespaceDirective1543);
			s=semi();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("useNamespaceDirective", 27);
			LeaveRule("useNamespaceDirective", 27);
			LeaveRule_useNamespaceDirective();
		}
		DebugLocation(538, 1);
		} finally { DebugExitRule(GrammarFileName, "useNamespaceDirective"); }
		return retval;

	}
	// $ANTLR end "useNamespaceDirective"

	partial void EnterRule_variableDefinition();
	partial void LeaveRule_variableDefinition();
	// $ANTLR start "variableDefinition"
	// AS3T.g:540:1: variableDefinition : modifiers varOrConst v1= variableDeclarator ( COMMA v2= variableDeclarator )* s= semi -> comment(s=$text);
	[GrammarRule("variableDefinition")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> variableDefinition()
	{
		EnterRule_variableDefinition();
		EnterRule("variableDefinition", 28);
		TraceIn("variableDefinition", 28);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> v1 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> v2 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> s = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "variableDefinition");
		DebugLocation(540, 1);
		try
		{
			// AS3T.g:542:2: ( modifiers varOrConst v1= variableDeclarator ( COMMA v2= variableDeclarator )* s= semi -> comment(s=$text))
			DebugEnterAlt(1);
			// AS3T.g:542:4: modifiers varOrConst v1= variableDeclarator ( COMMA v2= variableDeclarator )* s= semi
			{
			DebugLocation(542, 4);
			PushFollow(Follow._modifiers_in_variableDefinition1559);
			modifiers();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(543, 3);
			PushFollow(Follow._varOrConst_in_variableDefinition1563);
			varOrConst();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(543, 16);
			PushFollow(Follow._variableDeclarator_in_variableDefinition1567);
			v1=variableDeclarator();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(544, 3);
			// AS3T.g:544:3: ( COMMA v2= variableDeclarator )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==COMMA))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:544:4: COMMA v2= variableDeclarator
					{
					DebugLocation(544, 4);
					Match(input,COMMA,Follow._COMMA_in_variableDefinition1572); if (state.failed) return retval;
					DebugLocation(544, 12);
					PushFollow(Follow._variableDeclarator_in_variableDefinition1576);
					v2=variableDeclarator();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }

			DebugLocation(545, 4);
			PushFollow(Follow._semi_in_variableDefinition1584);
			s=semi();
			PopFollow();
			if (state.failed) return retval;

			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 546:4: -> comment(s=$text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("comment",
					new Dictionary<string, object>() { {"s", input.ToString(retval.Start,input.LT(-1))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDefinition", 28);
			LeaveRule("variableDefinition", 28);
			LeaveRule_variableDefinition();
		}
		DebugLocation(547, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDefinition"); }
		return retval;

	}
	// $ANTLR end "variableDefinition"

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();
	// $ANTLR start "declaration"
	// AS3T.g:549:1: declaration : varOrConst variableDeclarator declarationTail -> decl2(name=$variableDeclarator.text);
	[GrammarRule("declaration")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 29);
		TraceIn("declaration", 29);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> variableDeclarator10 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(549, 1);
		try
		{
			// AS3T.g:551:2: ( varOrConst variableDeclarator declarationTail -> decl2(name=$variableDeclarator.text))
			DebugEnterAlt(1);
			// AS3T.g:551:4: varOrConst variableDeclarator declarationTail
			{
			DebugLocation(551, 4);
			PushFollow(Follow._varOrConst_in_declaration1612);
			varOrConst();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(551, 15);
			PushFollow(Follow._variableDeclarator_in_declaration1614);
			variableDeclarator10=variableDeclarator();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(551, 34);
			PushFollow(Follow._declarationTail_in_declaration1616);
			declarationTail();
			PopFollow();
			if (state.failed) return retval;

			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 551:50: -> decl2(name=$variableDeclarator.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("decl2",
					new Dictionary<string, object>() { {"name", (variableDeclarator10!=null?input.ToString(variableDeclarator10.Start,variableDeclarator10.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declaration", 29);
			LeaveRule("declaration", 29);
			LeaveRule_declaration();
		}
		DebugLocation(553, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_varOrConst();
	partial void LeaveRule_varOrConst();
	// $ANTLR start "varOrConst"
	// AS3T.g:555:1: varOrConst : ( VAR -> ignore(| CONST -> ignore();
	[GrammarRule("varOrConst")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> varOrConst()
	{
		EnterRule_varOrConst();
		EnterRule("varOrConst", 30);
		TraceIn("varOrConst", 30);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "varOrConst");
		DebugLocation(555, 1);
		try
		{
			// AS3T.g:557:2: ( VAR -> ignore(| CONST -> ignore()
			int alt23=2;
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==VAR))
			{
				alt23 = 1;
			}
			else if ((LA23_1==CONST))
			{
				alt23 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:557:4: VAR
				{
				DebugLocation(557, 4);
				Match(input,VAR,Follow._VAR_in_varOrConst1650); if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 557:8: -> ignore(
					{
						retval.Template = TemplateGroup.GetInstanceOf("ignore");
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:558:4: CONST
				{
				DebugLocation(558, 4);
				Match(input,CONST,Follow._CONST_in_varOrConst1661); if (state.failed) return retval;
				DebugLocation(558, 10);
				if (state.backtracking == 0)
				{
					 _modifier = Symbol.CONST; 
				}

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 558:40: -> ignore(
					{
						retval.Template = TemplateGroup.GetInstanceOf("ignore");
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("varOrConst", 30);
			LeaveRule("varOrConst", 30);
			LeaveRule_varOrConst();
		}
		DebugLocation(559, 1);
		} finally { DebugExitRule(GrammarFileName, "varOrConst"); }
		return retval;

	}
	// $ANTLR end "varOrConst"

	partial void EnterRule_declarationTail();
	partial void LeaveRule_declarationTail();
	// $ANTLR start "declarationTail"
	// AS3T.g:561:1: declarationTail : ( COMMA variableDeclarator )* ;
	[GrammarRule("declarationTail")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> declarationTail()
	{
		EnterRule_declarationTail();
		EnterRule("declarationTail", 31);
		TraceIn("declarationTail", 31);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "declarationTail");
		DebugLocation(561, 1);
		try
		{
			// AS3T.g:562:2: ( ( COMMA variableDeclarator )* )
			DebugEnterAlt(1);
			// AS3T.g:562:4: ( COMMA variableDeclarator )*
			{
			DebugLocation(562, 4);
			// AS3T.g:562:4: ( COMMA variableDeclarator )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1==COMMA))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:562:5: COMMA variableDeclarator
					{
					DebugLocation(562, 5);
					Match(input,COMMA,Follow._COMMA_in_declarationTail1681); if (state.failed) return retval;
					DebugLocation(562, 11);
					PushFollow(Follow._variableDeclarator_in_declarationTail1683);
					variableDeclarator();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declarationTail", 31);
			LeaveRule("declarationTail", 31);
			LeaveRule_declarationTail();
		}
		DebugLocation(563, 1);
		} finally { DebugExitRule(GrammarFileName, "declarationTail"); }
		return retval;

	}
	// $ANTLR end "declarationTail"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();
	// $ANTLR start "variableInitializer"
	// AS3T.g:565:1: variableInitializer : ASSIGN expression -> assign(rhs=$expression.text);
	[GrammarRule("variableInitializer")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 32);
		TraceIn("variableInitializer", 32);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> expression11 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(565, 1);
		try
		{
			// AS3T.g:567:2: ( ASSIGN expression -> assign(rhs=$expression.text))
			DebugEnterAlt(1);
			// AS3T.g:567:4: ASSIGN expression
			{
			DebugLocation(567, 4);
			Match(input,ASSIGN,Follow._ASSIGN_in_variableInitializer1701); if (state.failed) return retval;
			DebugLocation(567, 11);
			PushFollow(Follow._expression_in_variableInitializer1703);
			expression11=expression();
			PopFollow();
			if (state.failed) return retval;

			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 567:22: -> assign(rhs=$expression.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("assign",
					new Dictionary<string, object>() { {"rhs", (expression11!=null?input.ToString(expression11.Start,expression11.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableInitializer", 32);
			LeaveRule("variableInitializer", 32);
			LeaveRule_variableInitializer();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return retval;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_variableDeclarator();
	partial void LeaveRule_variableDeclarator();
	// $ANTLR start "variableDeclarator"
	// AS3T.g:571:1: variableDeclarator : id= ident ( typeExpression )? ( variableInitializer )? -> var(name=$ident.sttype=$typeExpression.stinit=$variableInitializer.stptr=\"\");
	[GrammarRule("variableDeclarator")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> variableDeclarator()
	{
		EnterRule_variableDeclarator();
		EnterRule("variableDeclarator", 33);
		TraceIn("variableDeclarator", 33);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> id = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> typeExpression12 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> variableInitializer13 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "variableDeclarator");
		DebugLocation(571, 1);
		try
		{
			// AS3T.g:573:2: (id= ident ( typeExpression )? ( variableInitializer )? -> var(name=$ident.sttype=$typeExpression.stinit=$variableInitializer.stptr=\"\"))
			DebugEnterAlt(1);
			// AS3T.g:573:4: id= ident ( typeExpression )? ( variableInitializer )?
			{
			DebugLocation(573, 6);
			PushFollow(Follow._ident_in_variableDeclarator1739);
			id=ident();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(573, 13);
			// AS3T.g:573:13: ( typeExpression )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==COLON||LA25_1==STAR||LA25_1==258))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:573:13: typeExpression
				{
				DebugLocation(573, 13);
				PushFollow(Follow._typeExpression_in_variableDeclarator1741);
				typeExpression12=typeExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(573, 29);
			// AS3T.g:573:29: ( variableInitializer )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==ASSIGN))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:573:29: variableInitializer
				{
				DebugLocation(573, 29);
				PushFollow(Follow._variableInitializer_in_variableDeclarator1744);
				variableInitializer13=variableInitializer();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(574, 4);
			if (state.backtracking == 0)
			{

							if (!_infunc) 
							{
								Symbol sym = new Symbol();
								sym.Name = (id!=null?id.Template:null).ToString();
								sym.Kind = Symbol.VARIABLE;
								sym.ReturnType = (typeExpression12!=null?typeExpression12.Template:null).ToString();
								sym.Scope = _scope;
								sym.Modifier = _modifier;
								sym.Storage = _storage;

								_symtab.Add(sym);
							}

							_storage = -1;
							_scope = -1;
							_modifier = -1;
						
			}

			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 592:2: -> var(name=$ident.sttype=$typeExpression.stinit=$variableInitializer.stptr=\"\")
				{
					retval.Template = TemplateGroup.GetInstanceOf("var",
					new Dictionary<string, object>() { {"name", (id!=null?id.Template:null)}, {"type", (typeExpression12!=null?typeExpression12.Template:null)}, {"init", (variableInitializer13!=null?variableInitializer13.Template:null)}, {"ptr", ""} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarator", 33);
			LeaveRule("variableDeclarator", 33);
			LeaveRule_variableDeclarator();
		}
		DebugLocation(593, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarator"); }
		return retval;

	}
	// $ANTLR end "variableDeclarator"

	partial void EnterRule_parameterDeclarationList();
	partial void LeaveRule_parameterDeclarationList();
	// $ANTLR start "parameterDeclarationList"
	// AS3T.g:598:1: parameterDeclarationList : LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN ;
	[GrammarRule("parameterDeclarationList")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> parameterDeclarationList()
	{
		EnterRule_parameterDeclarationList();
		EnterRule("parameterDeclarationList", 34);
		TraceIn("parameterDeclarationList", 34);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "parameterDeclarationList");
		DebugLocation(598, 1);
		try
		{
			// AS3T.g:599:2: ( LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN )
			DebugEnterAlt(1);
			// AS3T.g:599:4: LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN
			{
			DebugLocation(599, 4);
			Match(input,LPAREN,Follow._LPAREN_in_parameterDeclarationList1789); if (state.failed) return retval;
			DebugLocation(600, 3);
			// AS3T.g:600:3: ( parameterDeclaration ( COMMA parameterDeclaration )* )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1==AS||LA28_1==CONST||LA28_1==DYNAMIC||LA28_1==GET||LA28_1==IDENT||LA28_1==IS||LA28_1==NAMESPACE||LA28_1==REST||LA28_1==SET||LA28_1==SUPER||LA28_1==TRACE||LA28_1==USE||LA28_1==XML))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:600:5: parameterDeclaration ( COMMA parameterDeclaration )*
				{
				DebugLocation(600, 5);
				PushFollow(Follow._parameterDeclaration_in_parameterDeclarationList1795);
				parameterDeclaration();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(601, 4);
				// AS3T.g:601:4: ( COMMA parameterDeclaration )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_1 = input.LA(1);

					if ((LA27_1==COMMA))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// AS3T.g:601:5: COMMA parameterDeclaration
						{
						DebugLocation(601, 5);
						Match(input,COMMA,Follow._COMMA_in_parameterDeclarationList1801); if (state.failed) return retval;
						DebugLocation(601, 11);
						PushFollow(Follow._parameterDeclaration_in_parameterDeclarationList1803);
						parameterDeclaration();
						PopFollow();
						if (state.failed) return retval;

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(603, 3);
			Match(input,RPAREN,Follow._RPAREN_in_parameterDeclarationList1814); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameterDeclarationList", 34);
			LeaveRule("parameterDeclarationList", 34);
			LeaveRule_parameterDeclarationList();
		}
		DebugLocation(605, 1);
		} finally { DebugExitRule(GrammarFileName, "parameterDeclarationList"); }
		return retval;

	}
	// $ANTLR end "parameterDeclarationList"

	partial void EnterRule_parameterDeclaration();
	partial void LeaveRule_parameterDeclaration();
	// $ANTLR start "parameterDeclaration"
	// AS3T.g:608:1: parameterDeclaration : ( basicParameterDeclaration | parameterRestDeclaration );
	[GrammarRule("parameterDeclaration")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> parameterDeclaration()
	{
		EnterRule_parameterDeclaration();
		EnterRule("parameterDeclaration", 35);
		TraceIn("parameterDeclaration", 35);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "parameterDeclaration");
		DebugLocation(608, 1);
		try
		{
			// AS3T.g:610:2: ( basicParameterDeclaration | parameterRestDeclaration )
			int alt29=2;
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==AS||LA29_1==CONST||LA29_1==DYNAMIC||LA29_1==GET||LA29_1==IDENT||LA29_1==IS||LA29_1==NAMESPACE||LA29_1==SET||LA29_1==SUPER||LA29_1==TRACE||LA29_1==USE||LA29_1==XML))
			{
				alt29 = 1;
			}
			else if ((LA29_1==REST))
			{
				alt29 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:610:4: basicParameterDeclaration
				{
				DebugLocation(610, 4);
				PushFollow(Follow._basicParameterDeclaration_in_parameterDeclaration1834);
				basicParameterDeclaration();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:610:32: parameterRestDeclaration
				{
				DebugLocation(610, 32);
				PushFollow(Follow._parameterRestDeclaration_in_parameterDeclaration1838);
				parameterRestDeclaration();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameterDeclaration", 35);
			LeaveRule("parameterDeclaration", 35);
			LeaveRule_parameterDeclaration();
		}
		DebugLocation(611, 1);
		} finally { DebugExitRule(GrammarFileName, "parameterDeclaration"); }
		return retval;

	}
	// $ANTLR end "parameterDeclaration"

	partial void EnterRule_basicParameterDeclaration();
	partial void LeaveRule_basicParameterDeclaration();
	// $ANTLR start "basicParameterDeclaration"
	// AS3T.g:613:1: basicParameterDeclaration : ( CONST )? ident ( typeExpression )? ( parameterDefault )? -> paramdecl(name=$ident.texttype=$typeExpression.textinit=$parameterDefault.text);
	[GrammarRule("basicParameterDeclaration")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> basicParameterDeclaration()
	{
		EnterRule_basicParameterDeclaration();
		EnterRule("basicParameterDeclaration", 36);
		TraceIn("basicParameterDeclaration", 36);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> ident14 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> typeExpression15 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> parameterDefault16 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "basicParameterDeclaration");
		DebugLocation(613, 1);
		try
		{
			// AS3T.g:615:2: ( ( CONST )? ident ( typeExpression )? ( parameterDefault )? -> paramdecl(name=$ident.texttype=$typeExpression.textinit=$parameterDefault.text))
			DebugEnterAlt(1);
			// AS3T.g:615:4: ( CONST )? ident ( typeExpression )? ( parameterDefault )?
			{
			DebugLocation(615, 4);
			// AS3T.g:615:4: ( CONST )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1==CONST))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:615:4: CONST
				{
				DebugLocation(615, 4);
				Match(input,CONST,Follow._CONST_in_basicParameterDeclaration1854); if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(615, 11);
			PushFollow(Follow._ident_in_basicParameterDeclaration1857);
			ident14=ident();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(615, 17);
			// AS3T.g:615:17: ( typeExpression )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_1 = input.LA(1);

			if ((LA31_1==COLON||LA31_1==STAR||LA31_1==258))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:615:17: typeExpression
				{
				DebugLocation(615, 17);
				PushFollow(Follow._typeExpression_in_basicParameterDeclaration1859);
				typeExpression15=typeExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(615, 33);
			// AS3T.g:615:33: ( parameterDefault )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==ASSIGN))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:615:33: parameterDefault
				{
				DebugLocation(615, 33);
				PushFollow(Follow._parameterDefault_in_basicParameterDeclaration1862);
				parameterDefault16=parameterDefault();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(32); }


			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 615:51: -> paramdecl(name=$ident.texttype=$typeExpression.textinit=$parameterDefault.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("paramdecl",
					new Dictionary<string, object>() { {"name", (ident14!=null?input.ToString(ident14.Start,ident14.Stop):default(string))}, {"type", (typeExpression15!=null?input.ToString(typeExpression15.Start,typeExpression15.Stop):default(string))}, {"init", (parameterDefault16!=null?input.ToString(parameterDefault16.Start,parameterDefault16.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("basicParameterDeclaration", 36);
			LeaveRule("basicParameterDeclaration", 36);
			LeaveRule_basicParameterDeclaration();
		}
		DebugLocation(617, 1);
		} finally { DebugExitRule(GrammarFileName, "basicParameterDeclaration"); }
		return retval;

	}
	// $ANTLR end "basicParameterDeclaration"

	partial void EnterRule_parameterDefault();
	partial void LeaveRule_parameterDefault();
	// $ANTLR start "parameterDefault"
	// AS3T.g:619:1: parameterDefault : ASSIGN assignmentExpression ;
	[GrammarRule("parameterDefault")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> parameterDefault()
	{
		EnterRule_parameterDefault();
		EnterRule("parameterDefault", 37);
		TraceIn("parameterDefault", 37);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "parameterDefault");
		DebugLocation(619, 1);
		try
		{
			// AS3T.g:622:2: ( ASSIGN assignmentExpression )
			DebugEnterAlt(1);
			// AS3T.g:622:4: ASSIGN assignmentExpression
			{
			DebugLocation(622, 4);
			Match(input,ASSIGN,Follow._ASSIGN_in_parameterDefault1904); if (state.failed) return retval;
			DebugLocation(622, 11);
			PushFollow(Follow._assignmentExpression_in_parameterDefault1906);
			assignmentExpression();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameterDefault", 37);
			LeaveRule("parameterDefault", 37);
			LeaveRule_parameterDefault();
		}
		DebugLocation(623, 1);
		} finally { DebugExitRule(GrammarFileName, "parameterDefault"); }
		return retval;

	}
	// $ANTLR end "parameterDefault"

	partial void EnterRule_parameterRestDeclaration();
	partial void LeaveRule_parameterRestDeclaration();
	// $ANTLR start "parameterRestDeclaration"
	// AS3T.g:625:1: parameterRestDeclaration : REST ( ident )? ( typeExpression )? -> param(name=$ident.texttype=$typeExpression.text);
	[GrammarRule("parameterRestDeclaration")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> parameterRestDeclaration()
	{
		EnterRule_parameterRestDeclaration();
		EnterRule("parameterRestDeclaration", 38);
		TraceIn("parameterRestDeclaration", 38);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> ident17 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> typeExpression18 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "parameterRestDeclaration");
		DebugLocation(625, 1);
		try
		{
			// AS3T.g:627:2: ( REST ( ident )? ( typeExpression )? -> param(name=$ident.texttype=$typeExpression.text))
			DebugEnterAlt(1);
			// AS3T.g:627:4: REST ( ident )? ( typeExpression )?
			{
			DebugLocation(627, 4);
			Match(input,REST,Follow._REST_in_parameterRestDeclaration1922); if (state.failed) return retval;
			DebugLocation(627, 9);
			// AS3T.g:627:9: ( ident )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_1 = input.LA(1);

			if ((LA33_1==AS||LA33_1==DYNAMIC||LA33_1==GET||LA33_1==IDENT||LA33_1==IS||LA33_1==NAMESPACE||LA33_1==SET||LA33_1==SUPER||LA33_1==TRACE||LA33_1==USE||LA33_1==XML))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:627:9: ident
				{
				DebugLocation(627, 9);
				PushFollow(Follow._ident_in_parameterRestDeclaration1924);
				ident17=ident();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(627, 16);
			// AS3T.g:627:16: ( typeExpression )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_1 = input.LA(1);

			if ((LA34_1==COLON||LA34_1==STAR||LA34_1==258))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:627:16: typeExpression
				{
				DebugLocation(627, 16);
				PushFollow(Follow._typeExpression_in_parameterRestDeclaration1927);
				typeExpression18=typeExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(34); }


			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 627:32: -> param(name=$ident.texttype=$typeExpression.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("param",
					new Dictionary<string, object>() { {"name", (ident17!=null?input.ToString(ident17.Start,ident17.Stop):default(string))}, {"type", (typeExpression18!=null?input.ToString(typeExpression18.Start,typeExpression18.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameterRestDeclaration", 38);
			LeaveRule("parameterRestDeclaration", 38);
			LeaveRule_parameterRestDeclaration();
		}
		DebugLocation(629, 1);
		} finally { DebugExitRule(GrammarFileName, "parameterRestDeclaration"); }
		return retval;

	}
	// $ANTLR end "parameterRestDeclaration"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// AS3T.g:631:1: block : LCURLY ( blockEntry )* RCURLY ;
	[GrammarRule("block")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 39);
		TraceIn("block", 39);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(631, 1);
		try
		{
			// AS3T.g:633:2: ( LCURLY ( blockEntry )* RCURLY )
			DebugEnterAlt(1);
			// AS3T.g:633:4: LCURLY ( blockEntry )* RCURLY
			{
			DebugLocation(633, 4);
			Match(input,LCURLY,Follow._LCURLY_in_block1961); if (state.failed) return retval;
			DebugLocation(633, 11);
			// AS3T.g:633:11: ( blockEntry )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==AS||LA35_1==BNOT||LA35_1==BREAK||LA35_1==CONST||LA35_1==CONTINUE||(LA35_1>=DEC && LA35_1<=DECIMAL_LITERAL)||LA35_1==DEFAULT||LA35_1==DO||(LA35_1>=DYNAMIC && LA35_1<=E4X_ATTRI)||(LA35_1>=FALSE && LA35_1<=FOR)||LA35_1==FUNCTION||LA35_1==GET||(LA35_1>=HEX_LITERAL && LA35_1<=IDENT)||LA35_1==IF||LA35_1==INC||(LA35_1>=INTERNAL && LA35_1<=IS)||(LA35_1>=LBRACK && LA35_1<=LCURLY)||LA35_1==LNOT||LA35_1==LPAREN||LA35_1==MINUS||LA35_1==NAMESPACE||LA35_1==NEW||LA35_1==NULL||LA35_1==OCTAL_LITERAL||LA35_1==PLUS||LA35_1==PRIVATE||(LA35_1>=PROTECTED && LA35_1<=PUBLIC)||LA35_1==REGEX_LITERAL||LA35_1==RETURN||(LA35_1>=SEMI && LA35_1<=SET)||(LA35_1>=STRING_LITERAL_DOUBLE && LA35_1<=SWITCH)||(LA35_1>=TRACE && LA35_1<=TRUE)||(LA35_1>=USE && LA35_1<=VAR)||LA35_1==WHILE||LA35_1==WITH||LA35_1==XML||LA35_1==XML_LITERAL||LA35_1==244||(LA35_1>=254 && LA35_1<=258)))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:633:11: blockEntry
					{
					DebugLocation(633, 11);
					PushFollow(Follow._blockEntry_in_block1963);
					blockEntry();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }

			DebugLocation(633, 23);
			Match(input,RCURLY,Follow._RCURLY_in_block1966); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 39);
			LeaveRule("block", 39);
			LeaveRule_block();
		}
		DebugLocation(635, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_blockEntry();
	partial void LeaveRule_blockEntry();
	// $ANTLR start "blockEntry"
	// AS3T.g:637:1: blockEntry : statement ;
	[GrammarRule("blockEntry")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> blockEntry()
	{
		EnterRule_blockEntry();
		EnterRule("blockEntry", 40);
		TraceIn("blockEntry", 40);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "blockEntry");
		DebugLocation(637, 1);
		try
		{
			// AS3T.g:638:2: ( statement )
			DebugEnterAlt(1);
			// AS3T.g:638:4: statement
			{
			DebugLocation(638, 4);
			PushFollow(Follow._statement_in_blockEntry1980);
			statement();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("blockEntry", 40);
			LeaveRule("blockEntry", 40);
			LeaveRule_blockEntry();
		}
		DebugLocation(639, 1);
		} finally { DebugExitRule(GrammarFileName, "blockEntry"); }
		return retval;

	}
	// $ANTLR end "blockEntry"

	partial void EnterRule_condition();
	partial void LeaveRule_condition();
	// $ANTLR start "condition"
	// AS3T.g:641:1: condition : LPAREN expression RPAREN ;
	[GrammarRule("condition")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> condition()
	{
		EnterRule_condition();
		EnterRule("condition", 41);
		TraceIn("condition", 41);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "condition");
		DebugLocation(641, 1);
		try
		{
			// AS3T.g:642:2: ( LPAREN expression RPAREN )
			DebugEnterAlt(1);
			// AS3T.g:642:4: LPAREN expression RPAREN
			{
			DebugLocation(642, 4);
			Match(input,LPAREN,Follow._LPAREN_in_condition1991); if (state.failed) return retval;
			DebugLocation(642, 11);
			PushFollow(Follow._expression_in_condition1993);
			expression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(642, 22);
			Match(input,RPAREN,Follow._RPAREN_in_condition1995); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("condition", 41);
			LeaveRule("condition", 41);
			LeaveRule_condition();
		}
		DebugLocation(644, 1);
		} finally { DebugExitRule(GrammarFileName, "condition"); }
		return retval;

	}
	// $ANTLR end "condition"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// AS3T.g:646:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | semi );
	[GrammarRule("statement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 42);
		TraceIn("statement", 42);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(646, 1);
		try
		{
			// AS3T.g:648:2: ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | semi )
			int alt36=16;
			try { DebugEnterDecision(36, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred13_AS3T_fragment)))
				{
					alt36 = 1;
				}
				else if ((true))
				{
					alt36 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONST:
			case VAR:
				{
				alt36 = 2;
				}
				break;
			case AS:
			case BNOT:
			case DEC:
			case DECIMAL_LITERAL:
			case DYNAMIC:
			case E4X_ATTRI:
			case FALSE:
			case FLOAT_LITERAL:
			case FUNCTION:
			case GET:
			case HEX_LITERAL:
			case IDENT:
			case INC:
			case INTERNAL:
			case IS:
			case LBRACK:
			case LNOT:
			case LPAREN:
			case MINUS:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case REGEX_LITERAL:
			case SET:
			case STRING_LITERAL_DOUBLE:
			case STRING_LITERAL_SINGLE:
			case SUPER:
			case TRACE:
			case TRUE:
			case USE:
			case XML:
			case XML_LITERAL:
			case 244:
			case 256:
			case 257:
			case 258:
				{
				alt36 = 3;
				}
				break;
			case IF:
				{
				alt36 = 4;
				}
				break;
			case FOR:
				{
				alt36 = 5;
				}
				break;
			case WHILE:
				{
				alt36 = 6;
				}
				break;
			case DO:
				{
				alt36 = 7;
				}
				break;
			case WITH:
				{
				alt36 = 8;
				}
				break;
			case SWITCH:
				{
				alt36 = 9;
				}
				break;
			case BREAK:
				{
				alt36 = 10;
				}
				break;
			case CONTINUE:
				{
				alt36 = 11;
				}
				break;
			case RETURN:
				{
				alt36 = 12;
				}
				break;
			case 254:
				{
				alt36 = 13;
				}
				break;
			case 255:
				{
				alt36 = 14;
				}
				break;
			case DEFAULT:
				{
				alt36 = 15;
				}
				break;
			case SEMI:
				{
				alt36 = 16;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:648:4: ( LCURLY )=> block
				{
				DebugLocation(648, 16);
				PushFollow(Follow._block_in_statement2020);
				block();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:649:4: declarationStatement
				{
				DebugLocation(649, 4);
				PushFollow(Follow._declarationStatement_in_statement2025);
				declarationStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:650:4: expressionStatement
				{
				DebugLocation(650, 4);
				PushFollow(Follow._expressionStatement_in_statement2031);
				expressionStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// AS3T.g:651:4: ifStatement
				{
				DebugLocation(651, 4);
				PushFollow(Follow._ifStatement_in_statement2036);
				ifStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// AS3T.g:652:4: forStatement
				{
				DebugLocation(652, 4);
				PushFollow(Follow._forStatement_in_statement2041);
				forStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// AS3T.g:654:4: whileStatement
				{
				DebugLocation(654, 4);
				PushFollow(Follow._whileStatement_in_statement2047);
				whileStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// AS3T.g:655:4: doWhileStatement
				{
				DebugLocation(655, 4);
				PushFollow(Follow._doWhileStatement_in_statement2052);
				doWhileStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// AS3T.g:656:4: withStatement
				{
				DebugLocation(656, 4);
				PushFollow(Follow._withStatement_in_statement2057);
				withStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// AS3T.g:657:4: switchStatement
				{
				DebugLocation(657, 4);
				PushFollow(Follow._switchStatement_in_statement2062);
				switchStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// AS3T.g:658:4: breakStatement
				{
				DebugLocation(658, 4);
				PushFollow(Follow._breakStatement_in_statement2067);
				breakStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// AS3T.g:659:4: continueStatement
				{
				DebugLocation(659, 4);
				PushFollow(Follow._continueStatement_in_statement2072);
				continueStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// AS3T.g:660:4: returnStatement
				{
				DebugLocation(660, 4);
				PushFollow(Follow._returnStatement_in_statement2077);
				returnStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// AS3T.g:661:4: throwStatement
				{
				DebugLocation(661, 4);
				PushFollow(Follow._throwStatement_in_statement2082);
				throwStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// AS3T.g:662:4: tryStatement
				{
				DebugLocation(662, 4);
				PushFollow(Follow._tryStatement_in_statement2087);
				tryStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// AS3T.g:663:4: defaultXMLNamespaceStatement
				{
				DebugLocation(663, 4);
				PushFollow(Follow._defaultXMLNamespaceStatement_in_statement2092);
				defaultXMLNamespaceStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// AS3T.g:664:7: semi
				{
				DebugLocation(664, 7);
				PushFollow(Follow._semi_in_statement2100);
				semi();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 42);
			LeaveRule("statement", 42);
			LeaveRule_statement();
		}
		DebugLocation(665, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_declarationStatement();
	partial void LeaveRule_declarationStatement();
	// $ANTLR start "declarationStatement"
	// AS3T.g:667:1: declarationStatement : declaration s= semi ;
	[GrammarRule("declarationStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> declarationStatement()
	{
		EnterRule_declarationStatement();
		EnterRule("declarationStatement", 43);
		TraceIn("declarationStatement", 43);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> s = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "declarationStatement");
		DebugLocation(667, 1);
		try
		{
			// AS3T.g:669:2: ( declaration s= semi )
			DebugEnterAlt(1);
			// AS3T.g:669:4: declaration s= semi
			{
			DebugLocation(669, 4);
			PushFollow(Follow._declaration_in_declarationStatement2116);
			declaration();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(669, 17);
			PushFollow(Follow._semi_in_declarationStatement2120);
			s=semi();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declarationStatement", 43);
			LeaveRule("declarationStatement", 43);
			LeaveRule_declarationStatement();
		}
		DebugLocation(671, 1);
		} finally { DebugExitRule(GrammarFileName, "declarationStatement"); }
		return retval;

	}
	// $ANTLR end "declarationStatement"

	partial void EnterRule_expressionStatement();
	partial void LeaveRule_expressionStatement();
	// $ANTLR start "expressionStatement"
	// AS3T.g:673:1: expressionStatement : expressionList s= semi ;
	[GrammarRule("expressionStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> expressionStatement()
	{
		EnterRule_expressionStatement();
		EnterRule("expressionStatement", 44);
		TraceIn("expressionStatement", 44);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> s = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "expressionStatement");
		DebugLocation(673, 1);
		try
		{
			// AS3T.g:675:2: ( expressionList s= semi )
			DebugEnterAlt(1);
			// AS3T.g:675:4: expressionList s= semi
			{
			DebugLocation(675, 4);
			PushFollow(Follow._expressionList_in_expressionStatement2143);
			expressionList();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(675, 20);
			PushFollow(Follow._semi_in_expressionStatement2147);
			s=semi();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionStatement", 44);
			LeaveRule("expressionStatement", 44);
			LeaveRule_expressionStatement();
		}
		DebugLocation(677, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionStatement"); }
		return retval;

	}
	// $ANTLR end "expressionStatement"

	partial void EnterRule_ifStatement();
	partial void LeaveRule_ifStatement();
	// $ANTLR start "ifStatement"
	// AS3T.g:679:1: ifStatement : IF condition statement ( ( ELSE )=> elseClause )? ;
	[GrammarRule("ifStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> ifStatement()
	{
		EnterRule_ifStatement();
		EnterRule("ifStatement", 45);
		TraceIn("ifStatement", 45);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "ifStatement");
		DebugLocation(679, 1);
		try
		{
			// AS3T.g:681:2: ( IF condition statement ( ( ELSE )=> elseClause )? )
			DebugEnterAlt(1);
			// AS3T.g:681:4: IF condition statement ( ( ELSE )=> elseClause )?
			{
			DebugLocation(681, 4);
			Match(input,IF,Follow._IF_in_ifStatement2166); if (state.failed) return retval;
			DebugLocation(681, 7);
			PushFollow(Follow._condition_in_ifStatement2168);
			condition();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(681, 17);
			PushFollow(Follow._statement_in_ifStatement2170);
			statement();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(682, 3);
			// AS3T.g:682:3: ( ( ELSE )=> elseClause )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==ELSE))
			{
				int LA37_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_AS3T_fragment)))
				{
					alt37 = 1;
				}
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:682:4: ( ELSE )=> elseClause
				{
				DebugLocation(682, 12);
				PushFollow(Follow._elseClause_in_ifStatement2179);
				elseClause();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(37); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifStatement", 45);
			LeaveRule("ifStatement", 45);
			LeaveRule_ifStatement();
		}
		DebugLocation(684, 1);
		} finally { DebugExitRule(GrammarFileName, "ifStatement"); }
		return retval;

	}
	// $ANTLR end "ifStatement"

	partial void EnterRule_elseClause();
	partial void LeaveRule_elseClause();
	// $ANTLR start "elseClause"
	// AS3T.g:686:1: elseClause : ELSE statement ;
	[GrammarRule("elseClause")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> elseClause()
	{
		EnterRule_elseClause();
		EnterRule("elseClause", 46);
		TraceIn("elseClause", 46);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "elseClause");
		DebugLocation(686, 1);
		try
		{
			// AS3T.g:688:2: ( ELSE statement )
			DebugEnterAlt(1);
			// AS3T.g:688:4: ELSE statement
			{
			DebugLocation(688, 4);
			Match(input,ELSE,Follow._ELSE_in_elseClause2206); if (state.failed) return retval;
			DebugLocation(688, 9);
			PushFollow(Follow._statement_in_elseClause2208);
			statement();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elseClause", 46);
			LeaveRule("elseClause", 46);
			LeaveRule_elseClause();
		}
		DebugLocation(690, 1);
		} finally { DebugExitRule(GrammarFileName, "elseClause"); }
		return retval;

	}
	// $ANTLR end "elseClause"

	partial void EnterRule_throwStatement();
	partial void LeaveRule_throwStatement();
	// $ANTLR start "throwStatement"
	// AS3T.g:692:1: throwStatement : 'throw' expression s= semi ;
	[GrammarRule("throwStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> throwStatement()
	{
		EnterRule_throwStatement();
		EnterRule("throwStatement", 47);
		TraceIn("throwStatement", 47);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> s = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "throwStatement");
		DebugLocation(692, 1);
		try
		{
			// AS3T.g:694:2: ( 'throw' expression s= semi )
			DebugEnterAlt(1);
			// AS3T.g:694:4: 'throw' expression s= semi
			{
			DebugLocation(694, 4);
			Match(input,254,Follow._254_in_throwStatement2234); if (state.failed) return retval;
			DebugLocation(694, 12);
			PushFollow(Follow._expression_in_throwStatement2236);
			expression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(694, 24);
			PushFollow(Follow._semi_in_throwStatement2240);
			s=semi();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("throwStatement", 47);
			LeaveRule("throwStatement", 47);
			LeaveRule_throwStatement();
		}
		DebugLocation(696, 1);
		} finally { DebugExitRule(GrammarFileName, "throwStatement"); }
		return retval;

	}
	// $ANTLR end "throwStatement"

	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();
	// $ANTLR start "tryStatement"
	// AS3T.g:698:1: tryStatement : 'try' block ( catchBlock )* ( finallyBlock )? ;
	[GrammarRule("tryStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 48);
		TraceIn("tryStatement", 48);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(698, 1);
		try
		{
			// AS3T.g:699:2: ( 'try' block ( catchBlock )* ( finallyBlock )? )
			DebugEnterAlt(1);
			// AS3T.g:699:4: 'try' block ( catchBlock )* ( finallyBlock )?
			{
			DebugLocation(699, 4);
			Match(input,255,Follow._255_in_tryStatement2260); if (state.failed) return retval;
			DebugLocation(700, 3);
			PushFollow(Follow._block_in_tryStatement2264);
			block();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(701, 3);
			// AS3T.g:701:3: ( catchBlock )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if ((LA38_1==243))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:701:3: catchBlock
					{
					DebugLocation(701, 3);
					PushFollow(Follow._catchBlock_in_tryStatement2268);
					catchBlock();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }

			DebugLocation(702, 3);
			// AS3T.g:702:3: ( finallyBlock )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_1 = input.LA(1);

			if ((LA39_1==248))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:702:3: finallyBlock
				{
				DebugLocation(702, 3);
				PushFollow(Follow._finallyBlock_in_tryStatement2273);
				finallyBlock();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tryStatement", 48);
			LeaveRule("tryStatement", 48);
			LeaveRule_tryStatement();
		}
		DebugLocation(704, 1);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return retval;

	}
	// $ANTLR end "tryStatement"

	partial void EnterRule_catchBlock();
	partial void LeaveRule_catchBlock();
	// $ANTLR start "catchBlock"
	// AS3T.g:706:1: catchBlock : 'catch' LPAREN ident ( typeExpression )? RPAREN block -> catchBlock(t=$typeExpression.textid=$ident.textb=$block.text);
	[GrammarRule("catchBlock")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> catchBlock()
	{
		EnterRule_catchBlock();
		EnterRule("catchBlock", 49);
		TraceIn("catchBlock", 49);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> typeExpression19 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> ident20 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> block21 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "catchBlock");
		DebugLocation(706, 1);
		try
		{
			// AS3T.g:707:2: ( 'catch' LPAREN ident ( typeExpression )? RPAREN block -> catchBlock(t=$typeExpression.textid=$ident.textb=$block.text))
			DebugEnterAlt(1);
			// AS3T.g:707:4: 'catch' LPAREN ident ( typeExpression )? RPAREN block
			{
			DebugLocation(707, 4);
			Match(input,243,Follow._243_in_catchBlock2294); if (state.failed) return retval;
			DebugLocation(707, 12);
			Match(input,LPAREN,Follow._LPAREN_in_catchBlock2296); if (state.failed) return retval;
			DebugLocation(707, 19);
			PushFollow(Follow._ident_in_catchBlock2298);
			ident20=ident();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(707, 25);
			// AS3T.g:707:25: ( typeExpression )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_1 = input.LA(1);

			if ((LA40_1==COLON||LA40_1==STAR||LA40_1==258))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:707:25: typeExpression
				{
				DebugLocation(707, 25);
				PushFollow(Follow._typeExpression_in_catchBlock2300);
				typeExpression19=typeExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(707, 41);
			Match(input,RPAREN,Follow._RPAREN_in_catchBlock2303); if (state.failed) return retval;
			DebugLocation(708, 3);
			PushFollow(Follow._block_in_catchBlock2307);
			block21=block();
			PopFollow();
			if (state.failed) return retval;

			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 708:10: -> catchBlock(t=$typeExpression.textid=$ident.textb=$block.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("catchBlock",
					new Dictionary<string, object>() { {"t", (typeExpression19!=null?input.ToString(typeExpression19.Start,typeExpression19.Stop):default(string))}, {"id", (ident20!=null?input.ToString(ident20.Start,ident20.Stop):default(string))}, {"b", (block21!=null?input.ToString(block21.Start,block21.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catchBlock", 49);
			LeaveRule("catchBlock", 49);
			LeaveRule_catchBlock();
		}
		DebugLocation(709, 1);
		} finally { DebugExitRule(GrammarFileName, "catchBlock"); }
		return retval;

	}
	// $ANTLR end "catchBlock"

	partial void EnterRule_finallyBlock();
	partial void LeaveRule_finallyBlock();
	// $ANTLR start "finallyBlock"
	// AS3T.g:711:1: finallyBlock : 'finally' block ;
	[GrammarRule("finallyBlock")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> finallyBlock()
	{
		EnterRule_finallyBlock();
		EnterRule("finallyBlock", 50);
		TraceIn("finallyBlock", 50);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "finallyBlock");
		DebugLocation(711, 1);
		try
		{
			// AS3T.g:712:2: ( 'finally' block )
			DebugEnterAlt(1);
			// AS3T.g:712:4: 'finally' block
			{
			DebugLocation(712, 4);
			Match(input,248,Follow._248_in_finallyBlock2336); if (state.failed) return retval;
			DebugLocation(712, 14);
			PushFollow(Follow._block_in_finallyBlock2338);
			block();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("finallyBlock", 50);
			LeaveRule("finallyBlock", 50);
			LeaveRule_finallyBlock();
		}
		DebugLocation(713, 1);
		} finally { DebugExitRule(GrammarFileName, "finallyBlock"); }
		return retval;

	}
	// $ANTLR end "finallyBlock"

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();
	// $ANTLR start "returnStatement"
	// AS3T.g:715:1: returnStatement : RETURN ( expression )? s= semi ;
	[GrammarRule("returnStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 51);
		TraceIn("returnStatement", 51);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> s = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(715, 1);
		try
		{
			// AS3T.g:717:2: ( RETURN ( expression )? s= semi )
			DebugEnterAlt(1);
			// AS3T.g:717:4: RETURN ( expression )? s= semi
			{
			DebugLocation(717, 4);
			Match(input,RETURN,Follow._RETURN_in_returnStatement2354); if (state.failed) return retval;
			DebugLocation(717, 11);
			// AS3T.g:717:11: ( expression )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_1 = input.LA(1);

			if ((LA41_1==AS||LA41_1==BNOT||(LA41_1>=DEC && LA41_1<=DECIMAL_LITERAL)||(LA41_1>=DYNAMIC && LA41_1<=E4X_ATTRI)||(LA41_1>=FALSE && LA41_1<=FLOAT_LITERAL)||LA41_1==FUNCTION||LA41_1==GET||(LA41_1>=HEX_LITERAL && LA41_1<=IDENT)||LA41_1==INC||(LA41_1>=INTERNAL && LA41_1<=IS)||(LA41_1>=LBRACK && LA41_1<=LCURLY)||LA41_1==LNOT||LA41_1==LPAREN||LA41_1==MINUS||LA41_1==NAMESPACE||LA41_1==NEW||LA41_1==NULL||LA41_1==OCTAL_LITERAL||LA41_1==PLUS||LA41_1==PRIVATE||(LA41_1>=PROTECTED && LA41_1<=PUBLIC)||LA41_1==REGEX_LITERAL||LA41_1==SET||(LA41_1>=STRING_LITERAL_DOUBLE && LA41_1<=SUPER)||(LA41_1>=TRACE && LA41_1<=TRUE)||LA41_1==USE||LA41_1==XML||LA41_1==XML_LITERAL||LA41_1==244||(LA41_1>=256 && LA41_1<=258)))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:717:11: expression
				{
				DebugLocation(717, 11);
				PushFollow(Follow._expression_in_returnStatement2356);
				expression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(717, 24);
			PushFollow(Follow._semi_in_returnStatement2361);
			s=semi();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("returnStatement", 51);
			LeaveRule("returnStatement", 51);
			LeaveRule_returnStatement();
		}
		DebugLocation(719, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return retval;

	}
	// $ANTLR end "returnStatement"

	partial void EnterRule_continueStatement();
	partial void LeaveRule_continueStatement();
	// $ANTLR start "continueStatement"
	// AS3T.g:721:1: continueStatement : CONTINUE s= semi ;
	[GrammarRule("continueStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> continueStatement()
	{
		EnterRule_continueStatement();
		EnterRule("continueStatement", 52);
		TraceIn("continueStatement", 52);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> s = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "continueStatement");
		DebugLocation(721, 1);
		try
		{
			// AS3T.g:723:2: ( CONTINUE s= semi )
			DebugEnterAlt(1);
			// AS3T.g:723:4: CONTINUE s= semi
			{
			DebugLocation(723, 4);
			Match(input,CONTINUE,Follow._CONTINUE_in_continueStatement2388); if (state.failed) return retval;
			DebugLocation(723, 14);
			PushFollow(Follow._semi_in_continueStatement2392);
			s=semi();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("continueStatement", 52);
			LeaveRule("continueStatement", 52);
			LeaveRule_continueStatement();
		}
		DebugLocation(725, 1);
		} finally { DebugExitRule(GrammarFileName, "continueStatement"); }
		return retval;

	}
	// $ANTLR end "continueStatement"

	partial void EnterRule_breakStatement();
	partial void LeaveRule_breakStatement();
	// $ANTLR start "breakStatement"
	// AS3T.g:727:1: breakStatement : BREAK s= semi ;
	[GrammarRule("breakStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> breakStatement()
	{
		EnterRule_breakStatement();
		EnterRule("breakStatement", 53);
		TraceIn("breakStatement", 53);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> s = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "breakStatement");
		DebugLocation(727, 1);
		try
		{
			// AS3T.g:728:2: ( BREAK s= semi )
			DebugEnterAlt(1);
			// AS3T.g:728:4: BREAK s= semi
			{
			DebugLocation(728, 4);
			Match(input,BREAK,Follow._BREAK_in_breakStatement2412); if (state.failed) return retval;
			DebugLocation(728, 11);
			PushFollow(Follow._semi_in_breakStatement2416);
			s=semi();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("breakStatement", 53);
			LeaveRule("breakStatement", 53);
			LeaveRule_breakStatement();
		}
		DebugLocation(730, 1);
		} finally { DebugExitRule(GrammarFileName, "breakStatement"); }
		return retval;

	}
	// $ANTLR end "breakStatement"

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();
	// $ANTLR start "switchStatement"
	// AS3T.g:732:1: switchStatement : SWITCH condition switchBlock ;
	[GrammarRule("switchStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 54);
		TraceIn("switchStatement", 54);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(732, 1);
		try
		{
			// AS3T.g:733:2: ( SWITCH condition switchBlock )
			DebugEnterAlt(1);
			// AS3T.g:733:4: SWITCH condition switchBlock
			{
			DebugLocation(733, 4);
			Match(input,SWITCH,Follow._SWITCH_in_switchStatement2436); if (state.failed) return retval;
			DebugLocation(733, 11);
			PushFollow(Follow._condition_in_switchStatement2438);
			condition();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(734, 3);
			PushFollow(Follow._switchBlock_in_switchStatement2442);
			switchBlock();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchStatement", 54);
			LeaveRule("switchStatement", 54);
			LeaveRule_switchStatement();
		}
		DebugLocation(736, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return retval;

	}
	// $ANTLR end "switchStatement"

	partial void EnterRule_switchBlock();
	partial void LeaveRule_switchBlock();
	// $ANTLR start "switchBlock"
	// AS3T.g:738:1: switchBlock : LCURLY ( caseStatement )* ( defaultStatement )? RCURLY ;
	[GrammarRule("switchBlock")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> switchBlock()
	{
		EnterRule_switchBlock();
		EnterRule("switchBlock", 55);
		TraceIn("switchBlock", 55);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "switchBlock");
		DebugLocation(738, 1);
		try
		{
			// AS3T.g:739:2: ( LCURLY ( caseStatement )* ( defaultStatement )? RCURLY )
			DebugEnterAlt(1);
			// AS3T.g:739:4: LCURLY ( caseStatement )* ( defaultStatement )? RCURLY
			{
			DebugLocation(739, 4);
			Match(input,LCURLY,Follow._LCURLY_in_switchBlock2462); if (state.failed) return retval;
			DebugLocation(740, 3);
			// AS3T.g:740:3: ( caseStatement )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==CASE))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:740:4: caseStatement
					{
					DebugLocation(740, 4);
					PushFollow(Follow._caseStatement_in_switchBlock2467);
					caseStatement();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }

			DebugLocation(741, 3);
			// AS3T.g:741:3: ( defaultStatement )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_1 = input.LA(1);

			if ((LA43_1==DEFAULT))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:741:4: defaultStatement
				{
				DebugLocation(741, 4);
				PushFollow(Follow._defaultStatement_in_switchBlock2474);
				defaultStatement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(742, 3);
			Match(input,RCURLY,Follow._RCURLY_in_switchBlock2480); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchBlock", 55);
			LeaveRule("switchBlock", 55);
			LeaveRule_switchBlock();
		}
		DebugLocation(744, 1);
		} finally { DebugExitRule(GrammarFileName, "switchBlock"); }
		return retval;

	}
	// $ANTLR end "switchBlock"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// AS3T.g:746:1: caseStatement : CASE expression COLON l= switchStatementList ;
	[GrammarRule("caseStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 56);
		TraceIn("caseStatement", 56);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> l = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(746, 1);
		try
		{
			// AS3T.g:747:2: ( CASE expression COLON l= switchStatementList )
			DebugEnterAlt(1);
			// AS3T.g:747:4: CASE expression COLON l= switchStatementList
			{
			DebugLocation(747, 4);
			Match(input,CASE,Follow._CASE_in_caseStatement2494); if (state.failed) return retval;
			DebugLocation(747, 9);
			PushFollow(Follow._expression_in_caseStatement2496);
			expression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(747, 20);
			Match(input,COLON,Follow._COLON_in_caseStatement2498); if (state.failed) return retval;
			DebugLocation(747, 27);
			PushFollow(Follow._switchStatementList_in_caseStatement2502);
			l=switchStatementList();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("caseStatement", 56);
			LeaveRule("caseStatement", 56);
			LeaveRule_caseStatement();
		}
		DebugLocation(748, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_defaultStatement();
	partial void LeaveRule_defaultStatement();
	// $ANTLR start "defaultStatement"
	// AS3T.g:750:1: defaultStatement : DEFAULT COLON l= switchStatementList ;
	[GrammarRule("defaultStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> defaultStatement()
	{
		EnterRule_defaultStatement();
		EnterRule("defaultStatement", 57);
		TraceIn("defaultStatement", 57);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> l = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "defaultStatement");
		DebugLocation(750, 1);
		try
		{
			// AS3T.g:752:2: ( DEFAULT COLON l= switchStatementList )
			DebugEnterAlt(1);
			// AS3T.g:752:4: DEFAULT COLON l= switchStatementList
			{
			DebugLocation(752, 4);
			Match(input,DEFAULT,Follow._DEFAULT_in_defaultStatement2520); if (state.failed) return retval;
			DebugLocation(752, 12);
			Match(input,COLON,Follow._COLON_in_defaultStatement2522); if (state.failed) return retval;
			DebugLocation(752, 19);
			PushFollow(Follow._switchStatementList_in_defaultStatement2526);
			l=switchStatementList();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("defaultStatement", 57);
			LeaveRule("defaultStatement", 57);
			LeaveRule_defaultStatement();
		}
		DebugLocation(753, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultStatement"); }
		return retval;

	}
	// $ANTLR end "defaultStatement"

	partial void EnterRule_switchStatementList();
	partial void LeaveRule_switchStatementList();
	// $ANTLR start "switchStatementList"
	// AS3T.g:755:1: switchStatementList : ( statement )* ;
	[GrammarRule("switchStatementList")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> switchStatementList()
	{
		EnterRule_switchStatementList();
		EnterRule("switchStatementList", 58);
		TraceIn("switchStatementList", 58);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "switchStatementList");
		DebugLocation(755, 1);
		try
		{
			// AS3T.g:756:2: ( ( statement )* )
			DebugEnterAlt(1);
			// AS3T.g:756:4: ( statement )*
			{
			DebugLocation(756, 4);
			// AS3T.g:756:4: ( statement )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==DEFAULT))
				{
					int LA44_2 = input.LA(2);

					if ((LA44_2==XML))
					{
						alt44 = 1;
					}


				}
				else if ((LA44_1==AS||LA44_1==BNOT||LA44_1==BREAK||LA44_1==CONST||LA44_1==CONTINUE||(LA44_1>=DEC && LA44_1<=DECIMAL_LITERAL)||LA44_1==DO||(LA44_1>=DYNAMIC && LA44_1<=E4X_ATTRI)||(LA44_1>=FALSE && LA44_1<=FOR)||LA44_1==FUNCTION||LA44_1==GET||(LA44_1>=HEX_LITERAL && LA44_1<=IDENT)||LA44_1==IF||LA44_1==INC||(LA44_1>=INTERNAL && LA44_1<=IS)||(LA44_1>=LBRACK && LA44_1<=LCURLY)||LA44_1==LNOT||LA44_1==LPAREN||LA44_1==MINUS||LA44_1==NAMESPACE||LA44_1==NEW||LA44_1==NULL||LA44_1==OCTAL_LITERAL||LA44_1==PLUS||LA44_1==PRIVATE||(LA44_1>=PROTECTED && LA44_1<=PUBLIC)||LA44_1==REGEX_LITERAL||LA44_1==RETURN||(LA44_1>=SEMI && LA44_1<=SET)||(LA44_1>=STRING_LITERAL_DOUBLE && LA44_1<=SWITCH)||(LA44_1>=TRACE && LA44_1<=TRUE)||(LA44_1>=USE && LA44_1<=VAR)||LA44_1==WHILE||LA44_1==WITH||LA44_1==XML||LA44_1==XML_LITERAL||LA44_1==244||(LA44_1>=254 && LA44_1<=258)))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:756:4: statement
					{
					DebugLocation(756, 4);
					PushFollow(Follow._statement_in_switchStatementList2538);
					statement();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchStatementList", 58);
			LeaveRule("switchStatementList", 58);
			LeaveRule_switchStatementList();
		}
		DebugLocation(757, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatementList"); }
		return retval;

	}
	// $ANTLR end "switchStatementList"

	partial void EnterRule_forEachStatement();
	partial void LeaveRule_forEachStatement();
	// $ANTLR start "forEachStatement"
	// AS3T.g:759:1: forEachStatement : f= FOR EACH LPAREN forInClause RPAREN statement ;
	[GrammarRule("forEachStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> forEachStatement()
	{
		EnterRule_forEachStatement();
		EnterRule("forEachStatement", 59);
		TraceIn("forEachStatement", 59);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		IToken f = default(IToken);

		try { DebugEnterRule(GrammarFileName, "forEachStatement");
		DebugLocation(759, 1);
		try
		{
			// AS3T.g:760:2: (f= FOR EACH LPAREN forInClause RPAREN statement )
			DebugEnterAlt(1);
			// AS3T.g:760:4: f= FOR EACH LPAREN forInClause RPAREN statement
			{
			DebugLocation(760, 5);
			f=(IToken)Match(input,FOR,Follow._FOR_in_forEachStatement2553); if (state.failed) return retval;
			DebugLocation(760, 10);
			Match(input,EACH,Follow._EACH_in_forEachStatement2555); if (state.failed) return retval;
			DebugLocation(761, 3);
			Match(input,LPAREN,Follow._LPAREN_in_forEachStatement2559); if (state.failed) return retval;
			DebugLocation(762, 3);
			PushFollow(Follow._forInClause_in_forEachStatement2563);
			forInClause();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(763, 3);
			Match(input,RPAREN,Follow._RPAREN_in_forEachStatement2567); if (state.failed) return retval;
			DebugLocation(764, 3);
			PushFollow(Follow._statement_in_forEachStatement2571);
			statement();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forEachStatement", 59);
			LeaveRule("forEachStatement", 59);
			LeaveRule_forEachStatement();
		}
		DebugLocation(766, 1);
		} finally { DebugExitRule(GrammarFileName, "forEachStatement"); }
		return retval;

	}
	// $ANTLR end "forEachStatement"

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();
	// $ANTLR start "forStatement"
	// AS3T.g:768:1: forStatement : f= FOR LPAREN ( forInClause RPAREN statement | traditionalForClause RPAREN statement ) ;
	[GrammarRule("forStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 60);
		TraceIn("forStatement", 60);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		IToken f = default(IToken);

		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(768, 1);
		try
		{
			// AS3T.g:770:2: (f= FOR LPAREN ( forInClause RPAREN statement | traditionalForClause RPAREN statement ) )
			DebugEnterAlt(1);
			// AS3T.g:770:4: f= FOR LPAREN ( forInClause RPAREN statement | traditionalForClause RPAREN statement )
			{
			DebugLocation(770, 5);
			f=(IToken)Match(input,FOR,Follow._FOR_in_forStatement2592); if (state.failed) return retval;
			DebugLocation(771, 3);
			Match(input,LPAREN,Follow._LPAREN_in_forStatement2596); if (state.failed) return retval;
			DebugLocation(772, 3);
			// AS3T.g:772:3: ( forInClause RPAREN statement | traditionalForClause RPAREN statement )
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			try
			{
				alt45 = dfa45.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:772:5: forInClause RPAREN statement
				{
				DebugLocation(772, 5);
				PushFollow(Follow._forInClause_in_forStatement2602);
				forInClause();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(772, 17);
				Match(input,RPAREN,Follow._RPAREN_in_forStatement2604); if (state.failed) return retval;
				DebugLocation(772, 24);
				PushFollow(Follow._statement_in_forStatement2606);
				statement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:772:36: traditionalForClause RPAREN statement
				{
				DebugLocation(772, 36);
				PushFollow(Follow._traditionalForClause_in_forStatement2610);
				traditionalForClause();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(772, 57);
				Match(input,RPAREN,Follow._RPAREN_in_forStatement2612); if (state.failed) return retval;
				DebugLocation(772, 64);
				PushFollow(Follow._statement_in_forStatement2614);
				statement();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forStatement", 60);
			LeaveRule("forStatement", 60);
			LeaveRule_forStatement();
		}
		DebugLocation(773, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return retval;

	}
	// $ANTLR end "forStatement"

	partial void EnterRule_traditionalForClause();
	partial void LeaveRule_traditionalForClause();
	// $ANTLR start "traditionalForClause"
	// AS3T.g:775:1: traditionalForClause : i= forInit semi c= forCond semi u= forIter ;
	[GrammarRule("traditionalForClause")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> traditionalForClause()
	{
		EnterRule_traditionalForClause();
		EnterRule("traditionalForClause", 61);
		TraceIn("traditionalForClause", 61);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> i = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> c = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> u = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "traditionalForClause");
		DebugLocation(775, 1);
		try
		{
			// AS3T.g:776:2: (i= forInit semi c= forCond semi u= forIter )
			DebugEnterAlt(1);
			// AS3T.g:776:4: i= forInit semi c= forCond semi u= forIter
			{
			DebugLocation(776, 5);
			PushFollow(Follow._forInit_in_traditionalForClause2628);
			i=forInit();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(776, 15);
			PushFollow(Follow._semi_in_traditionalForClause2631);
			semi();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(777, 4);
			PushFollow(Follow._forCond_in_traditionalForClause2639);
			c=forCond();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(777, 14);
			PushFollow(Follow._semi_in_traditionalForClause2642);
			semi();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(778, 4);
			PushFollow(Follow._forIter_in_traditionalForClause2649);
			u=forIter();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("traditionalForClause", 61);
			LeaveRule("traditionalForClause", 61);
			LeaveRule_traditionalForClause();
		}
		DebugLocation(779, 1);
		} finally { DebugExitRule(GrammarFileName, "traditionalForClause"); }
		return retval;

	}
	// $ANTLR end "traditionalForClause"

	partial void EnterRule_forInClause();
	partial void LeaveRule_forInClause();
	// $ANTLR start "forInClause"
	// AS3T.g:781:1: forInClause : forInClauseDecl IN forInClauseTail ;
	[GrammarRule("forInClause")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> forInClause()
	{
		EnterRule_forInClause();
		EnterRule("forInClause", 62);
		TraceIn("forInClause", 62);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "forInClause");
		DebugLocation(781, 1);
		try
		{
			// AS3T.g:782:2: ( forInClauseDecl IN forInClauseTail )
			DebugEnterAlt(1);
			// AS3T.g:782:4: forInClauseDecl IN forInClauseTail
			{
			DebugLocation(782, 4);
			PushFollow(Follow._forInClauseDecl_in_forInClause2661);
			forInClauseDecl();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(782, 20);
			Match(input,IN,Follow._IN_in_forInClause2663); if (state.failed) return retval;
			DebugLocation(782, 23);
			PushFollow(Follow._forInClauseTail_in_forInClause2665);
			forInClauseTail();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forInClause", 62);
			LeaveRule("forInClause", 62);
			LeaveRule_forInClause();
		}
		DebugLocation(783, 1);
		} finally { DebugExitRule(GrammarFileName, "forInClause"); }
		return retval;

	}
	// $ANTLR end "forInClause"

	partial void EnterRule_forInClauseDecl();
	partial void LeaveRule_forInClauseDecl();
	// $ANTLR start "forInClauseDecl"
	// AS3T.g:785:1: forInClauseDecl : ( varOrConst ident ( typeExpression )? | ident );
	[GrammarRule("forInClauseDecl")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> forInClauseDecl()
	{
		EnterRule_forInClauseDecl();
		EnterRule("forInClauseDecl", 63);
		TraceIn("forInClauseDecl", 63);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "forInClauseDecl");
		DebugLocation(785, 1);
		try
		{
			// AS3T.g:786:2: ( varOrConst ident ( typeExpression )? | ident )
			int alt47=2;
			try { DebugEnterDecision(47, false);
			int LA47_1 = input.LA(1);

			if ((LA47_1==CONST||LA47_1==VAR))
			{
				alt47 = 1;
			}
			else if ((LA47_1==AS||LA47_1==DYNAMIC||LA47_1==GET||LA47_1==IDENT||LA47_1==IS||LA47_1==NAMESPACE||LA47_1==SET||LA47_1==SUPER||LA47_1==TRACE||LA47_1==USE||LA47_1==XML))
			{
				alt47 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:786:4: varOrConst ident ( typeExpression )?
				{
				DebugLocation(786, 4);
				PushFollow(Follow._varOrConst_in_forInClauseDecl2676);
				varOrConst();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(786, 15);
				PushFollow(Follow._ident_in_forInClauseDecl2678);
				ident();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(786, 21);
				// AS3T.g:786:21: ( typeExpression )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==COLON||LA46_1==STAR||LA46_1==258))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:786:21: typeExpression
					{
					DebugLocation(786, 21);
					PushFollow(Follow._typeExpression_in_forInClauseDecl2680);
					typeExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				}
				} finally { DebugExitSubRule(46); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:787:7: ident
				{
				DebugLocation(787, 7);
				PushFollow(Follow._ident_in_forInClauseDecl2690);
				ident();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forInClauseDecl", 63);
			LeaveRule("forInClauseDecl", 63);
			LeaveRule_forInClauseDecl();
		}
		DebugLocation(788, 1);
		} finally { DebugExitRule(GrammarFileName, "forInClauseDecl"); }
		return retval;

	}
	// $ANTLR end "forInClauseDecl"

	partial void EnterRule_forInClauseTail();
	partial void LeaveRule_forInClauseTail();
	// $ANTLR start "forInClauseTail"
	// AS3T.g:791:1: forInClauseTail : expressionList ;
	[GrammarRule("forInClauseTail")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> forInClauseTail()
	{
		EnterRule_forInClauseTail();
		EnterRule("forInClauseTail", 64);
		TraceIn("forInClauseTail", 64);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "forInClauseTail");
		DebugLocation(791, 1);
		try
		{
			// AS3T.g:792:2: ( expressionList )
			DebugEnterAlt(1);
			// AS3T.g:792:4: expressionList
			{
			DebugLocation(792, 4);
			PushFollow(Follow._expressionList_in_forInClauseTail2702);
			expressionList();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forInClauseTail", 64);
			LeaveRule("forInClauseTail", 64);
			LeaveRule_forInClauseTail();
		}
		DebugLocation(793, 1);
		} finally { DebugExitRule(GrammarFileName, "forInClauseTail"); }
		return retval;

	}
	// $ANTLR end "forInClauseTail"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// AS3T.g:796:1: forInit : ( declaration | expressionList )? ;
	[GrammarRule("forInit")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 65);
		TraceIn("forInit", 65);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(796, 1);
		try
		{
			// AS3T.g:798:2: ( ( declaration | expressionList )? )
			DebugEnterAlt(1);
			// AS3T.g:798:4: ( declaration | expressionList )?
			{
			DebugLocation(798, 4);
			// AS3T.g:798:4: ( declaration | expressionList )?
			int alt48=3;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_1 = input.LA(1);

			if ((LA48_1==CONST||LA48_1==VAR))
			{
				alt48 = 1;
			}
			else if ((LA48_1==AS||LA48_1==BNOT||(LA48_1>=DEC && LA48_1<=DECIMAL_LITERAL)||(LA48_1>=DYNAMIC && LA48_1<=E4X_ATTRI)||(LA48_1>=FALSE && LA48_1<=FLOAT_LITERAL)||LA48_1==FUNCTION||LA48_1==GET||(LA48_1>=HEX_LITERAL && LA48_1<=IDENT)||LA48_1==INC||(LA48_1>=INTERNAL && LA48_1<=IS)||(LA48_1>=LBRACK && LA48_1<=LCURLY)||LA48_1==LNOT||LA48_1==LPAREN||LA48_1==MINUS||LA48_1==NAMESPACE||LA48_1==NEW||LA48_1==NULL||LA48_1==OCTAL_LITERAL||LA48_1==PLUS||LA48_1==PRIVATE||(LA48_1>=PROTECTED && LA48_1<=PUBLIC)||LA48_1==REGEX_LITERAL||LA48_1==SET||(LA48_1>=STRING_LITERAL_DOUBLE && LA48_1<=SUPER)||(LA48_1>=TRACE && LA48_1<=TRUE)||LA48_1==USE||LA48_1==XML||LA48_1==XML_LITERAL||LA48_1==244||(LA48_1>=256 && LA48_1<=258)))
			{
				alt48 = 2;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:798:5: declaration
				{
				DebugLocation(798, 5);
				PushFollow(Follow._declaration_in_forInit2720);
				declaration();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:798:19: expressionList
				{
				DebugLocation(798, 19);
				PushFollow(Follow._expressionList_in_forInit2724);
				expressionList();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forInit", 65);
			LeaveRule("forInit", 65);
			LeaveRule_forInit();
		}
		DebugLocation(799, 1);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCond();
	partial void LeaveRule_forCond();
	// $ANTLR start "forCond"
	// AS3T.g:801:1: forCond : ( expressionList )? ;
	[GrammarRule("forCond")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> forCond()
	{
		EnterRule_forCond();
		EnterRule("forCond", 66);
		TraceIn("forCond", 66);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "forCond");
		DebugLocation(801, 1);
		try
		{
			// AS3T.g:803:2: ( ( expressionList )? )
			DebugEnterAlt(1);
			// AS3T.g:803:4: ( expressionList )?
			{
			DebugLocation(803, 4);
			// AS3T.g:803:4: ( expressionList )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_1 = input.LA(1);

			if ((LA49_1==AS||LA49_1==BNOT||(LA49_1>=DEC && LA49_1<=DECIMAL_LITERAL)||(LA49_1>=DYNAMIC && LA49_1<=E4X_ATTRI)||(LA49_1>=FALSE && LA49_1<=FLOAT_LITERAL)||LA49_1==FUNCTION||LA49_1==GET||(LA49_1>=HEX_LITERAL && LA49_1<=IDENT)||LA49_1==INC||(LA49_1>=INTERNAL && LA49_1<=IS)||(LA49_1>=LBRACK && LA49_1<=LCURLY)||LA49_1==LNOT||LA49_1==LPAREN||LA49_1==MINUS||LA49_1==NAMESPACE||LA49_1==NEW||LA49_1==NULL||LA49_1==OCTAL_LITERAL||LA49_1==PLUS||LA49_1==PRIVATE||(LA49_1>=PROTECTED && LA49_1<=PUBLIC)||LA49_1==REGEX_LITERAL||LA49_1==SET||(LA49_1>=STRING_LITERAL_DOUBLE && LA49_1<=SUPER)||(LA49_1>=TRACE && LA49_1<=TRUE)||LA49_1==USE||LA49_1==XML||LA49_1==XML_LITERAL||LA49_1==244||(LA49_1>=256 && LA49_1<=258)))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:803:4: expressionList
				{
				DebugLocation(803, 4);
				PushFollow(Follow._expressionList_in_forCond2743);
				expressionList();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forCond", 66);
			LeaveRule("forCond", 66);
			LeaveRule_forCond();
		}
		DebugLocation(804, 1);
		} finally { DebugExitRule(GrammarFileName, "forCond"); }
		return retval;

	}
	// $ANTLR end "forCond"

	partial void EnterRule_forIter();
	partial void LeaveRule_forIter();
	// $ANTLR start "forIter"
	// AS3T.g:806:1: forIter : ( expressionList )? ;
	[GrammarRule("forIter")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> forIter()
	{
		EnterRule_forIter();
		EnterRule("forIter", 67);
		TraceIn("forIter", 67);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "forIter");
		DebugLocation(806, 1);
		try
		{
			// AS3T.g:808:2: ( ( expressionList )? )
			DebugEnterAlt(1);
			// AS3T.g:808:4: ( expressionList )?
			{
			DebugLocation(808, 4);
			// AS3T.g:808:4: ( expressionList )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==AS||LA50_1==BNOT||(LA50_1>=DEC && LA50_1<=DECIMAL_LITERAL)||(LA50_1>=DYNAMIC && LA50_1<=E4X_ATTRI)||(LA50_1>=FALSE && LA50_1<=FLOAT_LITERAL)||LA50_1==FUNCTION||LA50_1==GET||(LA50_1>=HEX_LITERAL && LA50_1<=IDENT)||LA50_1==INC||(LA50_1>=INTERNAL && LA50_1<=IS)||(LA50_1>=LBRACK && LA50_1<=LCURLY)||LA50_1==LNOT||LA50_1==LPAREN||LA50_1==MINUS||LA50_1==NAMESPACE||LA50_1==NEW||LA50_1==NULL||LA50_1==OCTAL_LITERAL||LA50_1==PLUS||LA50_1==PRIVATE||(LA50_1>=PROTECTED && LA50_1<=PUBLIC)||LA50_1==REGEX_LITERAL||LA50_1==SET||(LA50_1>=STRING_LITERAL_DOUBLE && LA50_1<=SUPER)||(LA50_1>=TRACE && LA50_1<=TRUE)||LA50_1==USE||LA50_1==XML||LA50_1==XML_LITERAL||LA50_1==244||(LA50_1>=256 && LA50_1<=258)))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:808:4: expressionList
				{
				DebugLocation(808, 4);
				PushFollow(Follow._expressionList_in_forIter2760);
				expressionList();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forIter", 67);
			LeaveRule("forIter", 67);
			LeaveRule_forIter();
		}
		DebugLocation(809, 1);
		} finally { DebugExitRule(GrammarFileName, "forIter"); }
		return retval;

	}
	// $ANTLR end "forIter"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();
	// $ANTLR start "whileStatement"
	// AS3T.g:811:1: whileStatement : WHILE condition statement ;
	[GrammarRule("whileStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 68);
		TraceIn("whileStatement", 68);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(811, 1);
		try
		{
			// AS3T.g:812:2: ( WHILE condition statement )
			DebugEnterAlt(1);
			// AS3T.g:812:4: WHILE condition statement
			{
			DebugLocation(812, 4);
			Match(input,WHILE,Follow._WHILE_in_whileStatement2772); if (state.failed) return retval;
			DebugLocation(812, 10);
			PushFollow(Follow._condition_in_whileStatement2774);
			condition();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(812, 20);
			PushFollow(Follow._statement_in_whileStatement2776);
			statement();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("whileStatement", 68);
			LeaveRule("whileStatement", 68);
			LeaveRule_whileStatement();
		}
		DebugLocation(814, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_doWhileStatement();
	partial void LeaveRule_doWhileStatement();
	// $ANTLR start "doWhileStatement"
	// AS3T.g:816:1: doWhileStatement : DO statement WHILE condition semi ;
	[GrammarRule("doWhileStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> doWhileStatement()
	{
		EnterRule_doWhileStatement();
		EnterRule("doWhileStatement", 69);
		TraceIn("doWhileStatement", 69);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "doWhileStatement");
		DebugLocation(816, 1);
		try
		{
			// AS3T.g:817:2: ( DO statement WHILE condition semi )
			DebugEnterAlt(1);
			// AS3T.g:817:4: DO statement WHILE condition semi
			{
			DebugLocation(817, 4);
			Match(input,DO,Follow._DO_in_doWhileStatement2790); if (state.failed) return retval;
			DebugLocation(817, 7);
			PushFollow(Follow._statement_in_doWhileStatement2792);
			statement();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(817, 17);
			Match(input,WHILE,Follow._WHILE_in_doWhileStatement2794); if (state.failed) return retval;
			DebugLocation(817, 23);
			PushFollow(Follow._condition_in_doWhileStatement2796);
			condition();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(817, 33);
			PushFollow(Follow._semi_in_doWhileStatement2798);
			semi();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("doWhileStatement", 69);
			LeaveRule("doWhileStatement", 69);
			LeaveRule_doWhileStatement();
		}
		DebugLocation(819, 1);
		} finally { DebugExitRule(GrammarFileName, "doWhileStatement"); }
		return retval;

	}
	// $ANTLR end "doWhileStatement"

	partial void EnterRule_withStatement();
	partial void LeaveRule_withStatement();
	// $ANTLR start "withStatement"
	// AS3T.g:821:1: withStatement : WITH condition statement ;
	[GrammarRule("withStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> withStatement()
	{
		EnterRule_withStatement();
		EnterRule("withStatement", 70);
		TraceIn("withStatement", 70);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "withStatement");
		DebugLocation(821, 1);
		try
		{
			// AS3T.g:822:2: ( WITH condition statement )
			DebugEnterAlt(1);
			// AS3T.g:822:4: WITH condition statement
			{
			DebugLocation(822, 4);
			Match(input,WITH,Follow._WITH_in_withStatement2812); if (state.failed) return retval;
			DebugLocation(822, 9);
			PushFollow(Follow._condition_in_withStatement2814);
			condition();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(822, 19);
			PushFollow(Follow._statement_in_withStatement2816);
			statement();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("withStatement", 70);
			LeaveRule("withStatement", 70);
			LeaveRule_withStatement();
		}
		DebugLocation(823, 1);
		} finally { DebugExitRule(GrammarFileName, "withStatement"); }
		return retval;

	}
	// $ANTLR end "withStatement"

	partial void EnterRule_defaultXMLNamespaceStatement();
	partial void LeaveRule_defaultXMLNamespaceStatement();
	// $ANTLR start "defaultXMLNamespaceStatement"
	// AS3T.g:825:1: defaultXMLNamespaceStatement : DEFAULT XML NAMESPACE ASSIGN expression semi ;
	[GrammarRule("defaultXMLNamespaceStatement")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> defaultXMLNamespaceStatement()
	{
		EnterRule_defaultXMLNamespaceStatement();
		EnterRule("defaultXMLNamespaceStatement", 71);
		TraceIn("defaultXMLNamespaceStatement", 71);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "defaultXMLNamespaceStatement");
		DebugLocation(825, 1);
		try
		{
			// AS3T.g:826:2: ( DEFAULT XML NAMESPACE ASSIGN expression semi )
			DebugEnterAlt(1);
			// AS3T.g:826:4: DEFAULT XML NAMESPACE ASSIGN expression semi
			{
			DebugLocation(826, 4);
			Match(input,DEFAULT,Follow._DEFAULT_in_defaultXMLNamespaceStatement2827); if (state.failed) return retval;
			DebugLocation(826, 12);
			Match(input,XML,Follow._XML_in_defaultXMLNamespaceStatement2829); if (state.failed) return retval;
			DebugLocation(826, 16);
			Match(input,NAMESPACE,Follow._NAMESPACE_in_defaultXMLNamespaceStatement2831); if (state.failed) return retval;
			DebugLocation(826, 26);
			Match(input,ASSIGN,Follow._ASSIGN_in_defaultXMLNamespaceStatement2833); if (state.failed) return retval;
			DebugLocation(826, 33);
			PushFollow(Follow._expression_in_defaultXMLNamespaceStatement2835);
			expression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(826, 44);
			PushFollow(Follow._semi_in_defaultXMLNamespaceStatement2837);
			semi();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("defaultXMLNamespaceStatement", 71);
			LeaveRule("defaultXMLNamespaceStatement", 71);
			LeaveRule_defaultXMLNamespaceStatement();
		}
		DebugLocation(828, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultXMLNamespaceStatement"); }
		return retval;

	}
	// $ANTLR end "defaultXMLNamespaceStatement"

	partial void EnterRule_typeExpression();
	partial void LeaveRule_typeExpression();
	// $ANTLR start "typeExpression"
	// AS3T.g:830:1: typeExpression : ( COLON typeIdentifier -> type(t=$typeIdentifier.text)| 'void' -> type(t=\"void\")| STAR -> type(t=\"void*\"));
	[GrammarRule("typeExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> typeExpression()
	{
		EnterRule_typeExpression();
		EnterRule("typeExpression", 72);
		TraceIn("typeExpression", 72);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> typeIdentifier22 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "typeExpression");
		DebugLocation(830, 4);
		try
		{
			// AS3T.g:832:2: ( COLON typeIdentifier -> type(t=$typeIdentifier.text)| 'void' -> type(t=\"void\")| STAR -> type(t=\"void*\"))
			int alt51=3;
			try { DebugEnterDecision(51, false);
			switch (input.LA(1))
			{
			case COLON:
				{
				alt51 = 1;
				}
				break;
			case 258:
				{
				alt51 = 2;
				}
				break;
			case STAR:
				{
				alt51 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:832:4: COLON typeIdentifier
				{
				DebugLocation(832, 4);
				Match(input,COLON,Follow._COLON_in_typeExpression2856); if (state.failed) return retval;
				DebugLocation(832, 10);
				PushFollow(Follow._typeIdentifier_in_typeExpression2858);
				typeIdentifier22=typeIdentifier();
				PopFollow();
				if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 832:25: -> type(t=$typeIdentifier.text)
					{
						retval.Template = TemplateGroup.GetInstanceOf("type",
						new Dictionary<string, object>() { {"t", (typeIdentifier22!=null?input.ToString(typeIdentifier22.Start,typeIdentifier22.Stop):default(string))} }
					);
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:833:4: 'void'
				{
				DebugLocation(833, 4);
				Match(input,258,Follow._258_in_typeExpression2872); if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 833:12: -> type(t=\"void\")
					{
						retval.Template = TemplateGroup.GetInstanceOf("type",
						new Dictionary<string, object>() { {"t", "void"} }
					);
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:834:4: STAR
				{
				DebugLocation(834, 4);
				Match(input,STAR,Follow._STAR_in_typeExpression2887); if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 834:9: -> type(t=\"void*\")
					{
						retval.Template = TemplateGroup.GetInstanceOf("type",
						new Dictionary<string, object>() { {"t", "void*"} }
					);
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template =  new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeExpression", 72);
			LeaveRule("typeExpression", 72);
			LeaveRule_typeExpression();
		}
		DebugLocation(835, 4);
		} finally { DebugExitRule(GrammarFileName, "typeExpression"); }
		return retval;

	}
	// $ANTLR end "typeExpression"

	partial void EnterRule_typeIdentifier();
	partial void LeaveRule_typeIdentifier();
	// $ANTLR start "typeIdentifier"
	// AS3T.g:837:1: typeIdentifier : ident ( propOrIdent )* ;
	[GrammarRule("typeIdentifier")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> typeIdentifier()
	{
		EnterRule_typeIdentifier();
		EnterRule("typeIdentifier", 73);
		TraceIn("typeIdentifier", 73);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "typeIdentifier");
		DebugLocation(837, 4);
		try
		{
			// AS3T.g:839:5: ( ident ( propOrIdent )* )
			DebugEnterAlt(1);
			// AS3T.g:839:7: ident ( propOrIdent )*
			{
			DebugLocation(839, 7);
			PushFollow(Follow._ident_in_typeIdentifier2918);
			ident();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(839, 13);
			// AS3T.g:839:13: ( propOrIdent )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_1 = input.LA(1);

				if ((LA52_1==DOT))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:839:14: propOrIdent
					{
					DebugLocation(839, 14);
					PushFollow(Follow._propOrIdent_in_typeIdentifier2921);
					propOrIdent();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeIdentifier", 73);
			LeaveRule("typeIdentifier", 73);
			LeaveRule_typeIdentifier();
		}
		DebugLocation(840, 4);
		} finally { DebugExitRule(GrammarFileName, "typeIdentifier"); }
		return retval;

	}
	// $ANTLR end "typeIdentifier"

	partial void EnterRule_identifier();
	partial void LeaveRule_identifier();
	// $ANTLR start "identifier"
	// AS3T.g:842:1: identifier : ( qualifiedIdent ) ( propOrIdent )* ;
	[GrammarRule("identifier")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> identifier()
	{
		EnterRule_identifier();
		EnterRule("identifier", 74);
		TraceIn("identifier", 74);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "identifier");
		DebugLocation(842, 1);
		try
		{
			// AS3T.g:844:2: ( ( qualifiedIdent ) ( propOrIdent )* )
			DebugEnterAlt(1);
			// AS3T.g:844:4: ( qualifiedIdent ) ( propOrIdent )*
			{
			DebugLocation(844, 4);
			// AS3T.g:844:4: ( qualifiedIdent )
			DebugEnterAlt(1);
			// AS3T.g:844:5: qualifiedIdent
			{
			DebugLocation(844, 5);
			PushFollow(Follow._qualifiedIdent_in_identifier2944);
			qualifiedIdent();
			PopFollow();
			if (state.failed) return retval;

			}

			DebugLocation(844, 21);
			// AS3T.g:844:21: ( propOrIdent )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==DOT))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:844:22: propOrIdent
					{
					DebugLocation(844, 22);
					PushFollow(Follow._propOrIdent_in_identifier2948);
					propOrIdent();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("identifier", 74);
			LeaveRule("identifier", 74);
			LeaveRule_identifier();
		}
		DebugLocation(845, 1);
		} finally { DebugExitRule(GrammarFileName, "identifier"); }
		return retval;

	}
	// $ANTLR end "identifier"

	partial void EnterRule_qualifiedIdent();
	partial void LeaveRule_qualifiedIdent();
	// $ANTLR start "qualifiedIdent"
	// AS3T.g:847:1: qualifiedIdent options {k=1; } : ( ( namespaceName DBL_COLON )=> namespaceName DBL_COLON ident | ident );
	[GrammarRule("qualifiedIdent")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> qualifiedIdent()
	{
		EnterRule_qualifiedIdent();
		EnterRule("qualifiedIdent", 75);
		TraceIn("qualifiedIdent", 75);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "qualifiedIdent");
		DebugLocation(847, 4);
		try
		{
			// AS3T.g:850:5: ( ( namespaceName DBL_COLON )=> namespaceName DBL_COLON ident | ident )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			int LA54_1 = input.LA(1);

			if ((LA54_1==IDENT))
			{
				int LA54_2 = input.LA(2);

				if ((EvaluatePredicate(synpred15_AS3T_fragment)))
				{
					alt54 = 1;
				}
				else if ((true))
				{
					alt54 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 54, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA54_1==PUBLIC) && (EvaluatePredicate(synpred15_AS3T_fragment)))
			{
				alt54 = 1;
			}
			else if ((LA54_1==PRIVATE) && (EvaluatePredicate(synpred15_AS3T_fragment)))
			{
				alt54 = 1;
			}
			else if ((LA54_1==PROTECTED) && (EvaluatePredicate(synpred15_AS3T_fragment)))
			{
				alt54 = 1;
			}
			else if ((LA54_1==INTERNAL) && (EvaluatePredicate(synpred15_AS3T_fragment)))
			{
				alt54 = 1;
			}
			else if ((LA54_1==AS||LA54_1==DYNAMIC||LA54_1==GET||LA54_1==IS||LA54_1==NAMESPACE||LA54_1==SET||LA54_1==SUPER||LA54_1==TRACE||LA54_1==USE||LA54_1==XML))
			{
				alt54 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:850:7: ( namespaceName DBL_COLON )=> namespaceName DBL_COLON ident
				{
				DebugLocation(850, 36);
				PushFollow(Follow._namespaceName_in_qualifiedIdent2985);
				namespaceName();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(850, 50);
				Match(input,DBL_COLON,Follow._DBL_COLON_in_qualifiedIdent2987); if (state.failed) return retval;
				DebugLocation(850, 60);
				PushFollow(Follow._ident_in_qualifiedIdent2989);
				ident();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:851:7: ident
				{
				DebugLocation(851, 7);
				PushFollow(Follow._ident_in_qualifiedIdent2997);
				ident();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedIdent", 75);
			LeaveRule("qualifiedIdent", 75);
			LeaveRule_qualifiedIdent();
		}
		DebugLocation(852, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdent"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdent"

	partial void EnterRule_namespaceName();
	partial void LeaveRule_namespaceName();
	// $ANTLR start "namespaceName"
	// AS3T.g:854:1: namespaceName : ( IDENT | reservedNamespace );
	[GrammarRule("namespaceName")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> namespaceName()
	{
		EnterRule_namespaceName();
		EnterRule("namespaceName", 76);
		TraceIn("namespaceName", 76);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "namespaceName");
		DebugLocation(854, 1);
		try
		{
			// AS3T.g:856:2: ( IDENT | reservedNamespace )
			int alt55=2;
			try { DebugEnterDecision(55, false);
			int LA55_1 = input.LA(1);

			if ((LA55_1==IDENT))
			{
				alt55 = 1;
			}
			else if ((LA55_1==INTERNAL||LA55_1==PRIVATE||(LA55_1>=PROTECTED && LA55_1<=PUBLIC)))
			{
				alt55 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:856:4: IDENT
				{
				DebugLocation(856, 4);
				Match(input,IDENT,Follow._IDENT_in_namespaceName3016); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:856:12: reservedNamespace
				{
				DebugLocation(856, 12);
				PushFollow(Follow._reservedNamespace_in_namespaceName3020);
				reservedNamespace();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespaceName", 76);
			LeaveRule("namespaceName", 76);
			LeaveRule_namespaceName();
		}
		DebugLocation(857, 1);
		} finally { DebugExitRule(GrammarFileName, "namespaceName"); }
		return retval;

	}
	// $ANTLR end "namespaceName"

	partial void EnterRule_reservedNamespace();
	partial void LeaveRule_reservedNamespace();
	// $ANTLR start "reservedNamespace"
	// AS3T.g:859:1: reservedNamespace : ( PUBLIC -> ignore(| PRIVATE -> ignore(| PROTECTED -> ignore(| INTERNAL -> ignore();
	[GrammarRule("reservedNamespace")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> reservedNamespace()
	{
		EnterRule_reservedNamespace();
		EnterRule("reservedNamespace", 77);
		TraceIn("reservedNamespace", 77);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "reservedNamespace");
		DebugLocation(859, 1);
		try
		{
			// AS3T.g:861:2: ( PUBLIC -> ignore(| PRIVATE -> ignore(| PROTECTED -> ignore(| INTERNAL -> ignore()
			int alt56=4;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				alt56 = 1;
				}
				break;
			case PRIVATE:
				{
				alt56 = 2;
				}
				break;
			case PROTECTED:
				{
				alt56 = 3;
				}
				break;
			case INTERNAL:
				{
				alt56 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:861:4: PUBLIC
				{
				DebugLocation(861, 4);
				Match(input,PUBLIC,Follow._PUBLIC_in_reservedNamespace3036); if (state.failed) return retval;
				DebugLocation(861, 11);
				if (state.backtracking == 0)
				{
					 _scope = Symbol.PUBLIC; 
				}

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 861:39: -> ignore(
					{
						retval.Template = TemplateGroup.GetInstanceOf("ignore");
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:862:4: PRIVATE
				{
				DebugLocation(862, 4);
				Match(input,PRIVATE,Follow._PRIVATE_in_reservedNamespace3049); if (state.failed) return retval;
				DebugLocation(862, 12);
				if (state.backtracking == 0)
				{
					 _scope = Symbol.PRIVATE; 
				}

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 862:41: -> ignore(
					{
						retval.Template = TemplateGroup.GetInstanceOf("ignore");
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:863:4: PROTECTED
				{
				DebugLocation(863, 4);
				Match(input,PROTECTED,Follow._PROTECTED_in_reservedNamespace3062); if (state.failed) return retval;
				DebugLocation(863, 14);
				if (state.backtracking == 0)
				{
					 _scope = Symbol.PROTECTED; 
				}

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 863:45: -> ignore(
					{
						retval.Template = TemplateGroup.GetInstanceOf("ignore");
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// AS3T.g:864:4: INTERNAL
				{
				DebugLocation(864, 4);
				Match(input,INTERNAL,Follow._INTERNAL_in_reservedNamespace3075); if (state.failed) return retval;
				DebugLocation(864, 13);
				if (state.backtracking == 0)
				{
					 _scope = Symbol.INTERNAL; 
				}

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 864:43: -> ignore(
					{
						retval.Template = TemplateGroup.GetInstanceOf("ignore");
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("reservedNamespace", 77);
			LeaveRule("reservedNamespace", 77);
			LeaveRule_reservedNamespace();
		}
		DebugLocation(865, 1);
		} finally { DebugExitRule(GrammarFileName, "reservedNamespace"); }
		return retval;

	}
	// $ANTLR end "reservedNamespace"

	partial void EnterRule_identifierStar();
	partial void LeaveRule_identifierStar();
	// $ANTLR start "identifierStar"
	// AS3T.g:867:1: identifierStar : ident ( dotIdent )* ( DOT STAR )? ;
	[GrammarRule("identifierStar")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> identifierStar()
	{
		EnterRule_identifierStar();
		EnterRule("identifierStar", 78);
		TraceIn("identifierStar", 78);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "identifierStar");
		DebugLocation(867, 1);
		try
		{
			// AS3T.g:869:2: ( ident ( dotIdent )* ( DOT STAR )? )
			DebugEnterAlt(1);
			// AS3T.g:869:4: ident ( dotIdent )* ( DOT STAR )?
			{
			DebugLocation(869, 4);
			PushFollow(Follow._ident_in_identifierStar3099);
			ident();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(870, 3);
			// AS3T.g:870:3: ( dotIdent )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==DOT))
				{
					int LA57_2 = input.LA(2);

					if ((LA57_2==AS||LA57_2==DYNAMIC||LA57_2==GET||LA57_2==IDENT||LA57_2==IS||LA57_2==NAMESPACE||LA57_2==SET||LA57_2==SUPER||LA57_2==TRACE||LA57_2==USE||LA57_2==XML))
					{
						alt57 = 1;
					}


				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:870:3: dotIdent
					{
					DebugLocation(870, 3);
					PushFollow(Follow._dotIdent_in_identifierStar3103);
					dotIdent();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }

			DebugLocation(871, 3);
			// AS3T.g:871:3: ( DOT STAR )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==DOT))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:871:4: DOT STAR
				{
				DebugLocation(871, 4);
				Match(input,DOT,Follow._DOT_in_identifierStar3109); if (state.failed) return retval;
				DebugLocation(871, 8);
				Match(input,STAR,Follow._STAR_in_identifierStar3111); if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("identifierStar", 78);
			LeaveRule("identifierStar", 78);
			LeaveRule_identifierStar();
		}
		DebugLocation(872, 1);
		} finally { DebugExitRule(GrammarFileName, "identifierStar"); }
		return retval;

	}
	// $ANTLR end "identifierStar"

	partial void EnterRule_dotIdent();
	partial void LeaveRule_dotIdent();
	// $ANTLR start "dotIdent"
	// AS3T.g:874:1: dotIdent : DOT ident -> path(p=$ident.text);
	[GrammarRule("dotIdent")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> dotIdent()
	{
		EnterRule_dotIdent();
		EnterRule("dotIdent", 79);
		TraceIn("dotIdent", 79);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> ident23 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "dotIdent");
		DebugLocation(874, 4);
		try
		{
			// AS3T.g:875:5: ( DOT ident -> path(p=$ident.text))
			DebugEnterAlt(1);
			// AS3T.g:875:7: DOT ident
			{
			DebugLocation(875, 7);
			Match(input,DOT,Follow._DOT_in_dotIdent3127); if (state.failed) return retval;
			DebugLocation(875, 11);
			PushFollow(Follow._ident_in_dotIdent3129);
			ident23=ident();
			PopFollow();
			if (state.failed) return retval;

			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 875:17: -> path(p=$ident.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("path",
					new Dictionary<string, object>() { {"p", (ident23!=null?input.ToString(ident23.Start,ident23.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dotIdent", 79);
			LeaveRule("dotIdent", 79);
			LeaveRule_dotIdent();
		}
		DebugLocation(876, 4);
		} finally { DebugExitRule(GrammarFileName, "dotIdent"); }
		return retval;

	}
	// $ANTLR end "dotIdent"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();
	// $ANTLR start "ident"
	// AS3T.g:878:1: ident : ( IDENT | USE | XML | TRACE | DYNAMIC | NAMESPACE | IS | AS | GET | SET |z= SUPER -> comment(s=$z.text));
	[GrammarRule("ident")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 80);
		TraceIn("ident", 80);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		IToken z = default(IToken);

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(878, 1);
		try
		{
			// AS3T.g:880:2: ( IDENT | USE | XML | TRACE | DYNAMIC | NAMESPACE | IS | AS | GET | SET |z= SUPER -> comment(s=$z.text))
			int alt59=11;
			try { DebugEnterDecision(59, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt59 = 1;
				}
				break;
			case USE:
				{
				alt59 = 2;
				}
				break;
			case XML:
				{
				alt59 = 3;
				}
				break;
			case TRACE:
				{
				alt59 = 4;
				}
				break;
			case DYNAMIC:
				{
				alt59 = 5;
				}
				break;
			case NAMESPACE:
				{
				alt59 = 6;
				}
				break;
			case IS:
				{
				alt59 = 7;
				}
				break;
			case AS:
				{
				alt59 = 8;
				}
				break;
			case GET:
				{
				alt59 = 9;
				}
				break;
			case SET:
				{
				alt59 = 10;
				}
				break;
			case SUPER:
				{
				alt59 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 59, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:880:4: IDENT
				{
				DebugLocation(880, 4);
				Match(input,IDENT,Follow._IDENT_in_ident3157); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:881:4: USE
				{
				DebugLocation(881, 4);
				Match(input,USE,Follow._USE_in_ident3163); if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:882:4: XML
				{
				DebugLocation(882, 4);
				Match(input,XML,Follow._XML_in_ident3168); if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// AS3T.g:883:4: TRACE
				{
				DebugLocation(883, 4);
				Match(input,TRACE,Follow._TRACE_in_ident3173); if (state.failed) return retval;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// AS3T.g:884:4: DYNAMIC
				{
				DebugLocation(884, 4);
				Match(input,DYNAMIC,Follow._DYNAMIC_in_ident3178); if (state.failed) return retval;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// AS3T.g:885:4: NAMESPACE
				{
				DebugLocation(885, 4);
				Match(input,NAMESPACE,Follow._NAMESPACE_in_ident3183); if (state.failed) return retval;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// AS3T.g:886:4: IS
				{
				DebugLocation(886, 4);
				Match(input,IS,Follow._IS_in_ident3188); if (state.failed) return retval;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// AS3T.g:887:4: AS
				{
				DebugLocation(887, 4);
				Match(input,AS,Follow._AS_in_ident3193); if (state.failed) return retval;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// AS3T.g:888:4: GET
				{
				DebugLocation(888, 4);
				Match(input,GET,Follow._GET_in_ident3198); if (state.failed) return retval;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// AS3T.g:889:4: SET
				{
				DebugLocation(889, 4);
				Match(input,SET,Follow._SET_in_ident3203); if (state.failed) return retval;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// AS3T.g:890:4: z= SUPER
				{
				DebugLocation(890, 5);
				z=(IToken)Match(input,SUPER,Follow._SUPER_in_ident3210); if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 890:12: -> comment(s=$z.text)
					{
						retval.Template = TemplateGroup.GetInstanceOf("comment",
						new Dictionary<string, object>() { {"s", (z!=null?z.Text:default(string))} }
					);
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 80);
			LeaveRule("ident", 80);
			LeaveRule_ident();
		}
		DebugLocation(891, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();
	// $ANTLR start "annotation"
	// AS3T.g:893:1: annotation : LBRACK ident ( annotationParamList )? RBRACK -> notsupported(s=$text);
	[GrammarRule("annotation")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 81);
		TraceIn("annotation", 81);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(893, 1);
		try
		{
			// AS3T.g:895:2: ( LBRACK ident ( annotationParamList )? RBRACK -> notsupported(s=$text))
			DebugEnterAlt(1);
			// AS3T.g:895:4: LBRACK ident ( annotationParamList )? RBRACK
			{
			DebugLocation(895, 4);
			Match(input,LBRACK,Follow._LBRACK_in_annotation3235); if (state.failed) return retval;
			DebugLocation(896, 3);
			PushFollow(Follow._ident_in_annotation3239);
			ident();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(897, 3);
			// AS3T.g:897:3: ( annotationParamList )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_1 = input.LA(1);

			if ((LA60_1==LPAREN))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:897:3: annotationParamList
				{
				DebugLocation(897, 3);
				PushFollow(Follow._annotationParamList_in_annotation3243);
				annotationParamList();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(898, 3);
			Match(input,RBRACK,Follow._RBRACK_in_annotation3248); if (state.failed) return retval;

			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 898:10: -> notsupported(s=$text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("notsupported",
					new Dictionary<string, object>() { {"s", input.ToString(retval.Start,input.LT(-1))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotation", 81);
			LeaveRule("annotation", 81);
			LeaveRule_annotation();
		}
		DebugLocation(900, 1);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return retval;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_annotationParamList();
	partial void LeaveRule_annotationParamList();
	// $ANTLR start "annotationParamList"
	// AS3T.g:902:1: annotationParamList : LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN ;
	[GrammarRule("annotationParamList")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> annotationParamList()
	{
		EnterRule_annotationParamList();
		EnterRule("annotationParamList", 82);
		TraceIn("annotationParamList", 82);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "annotationParamList");
		DebugLocation(902, 1);
		try
		{
			// AS3T.g:903:2: ( LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN )
			DebugEnterAlt(1);
			// AS3T.g:904:3: LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN
			{
			DebugLocation(904, 3);
			Match(input,LPAREN,Follow._LPAREN_in_annotationParamList3273); if (state.failed) return retval;
			DebugLocation(905, 3);
			// AS3T.g:905:3: ( annotationParam ( COMMA annotationParam )* )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_1 = input.LA(1);

			if ((LA62_1==AS||LA62_1==DECIMAL_LITERAL||LA62_1==DYNAMIC||(LA62_1>=FALSE && LA62_1<=FLOAT_LITERAL)||LA62_1==GET||(LA62_1>=HEX_LITERAL && LA62_1<=IDENT)||LA62_1==IS||LA62_1==NAMESPACE||LA62_1==NULL||LA62_1==OCTAL_LITERAL||LA62_1==REGEX_LITERAL||LA62_1==SET||(LA62_1>=STRING_LITERAL_DOUBLE && LA62_1<=SUPER)||(LA62_1>=TRACE && LA62_1<=TRUE)||LA62_1==USE||LA62_1==XML||LA62_1==XML_LITERAL))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:905:5: annotationParam ( COMMA annotationParam )*
				{
				DebugLocation(905, 5);
				PushFollow(Follow._annotationParam_in_annotationParamList3279);
				annotationParam();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(906, 4);
				// AS3T.g:906:4: ( COMMA annotationParam )*
				try { DebugEnterSubRule(61);
				while (true)
				{
					int alt61=2;
					try { DebugEnterDecision(61, false);
					int LA61_1 = input.LA(1);

					if ((LA61_1==COMMA))
					{
						alt61 = 1;
					}


					} finally { DebugExitDecision(61); }
					switch ( alt61 )
					{
					case 1:
						DebugEnterAlt(1);
						// AS3T.g:906:5: COMMA annotationParam
						{
						DebugLocation(906, 5);
						Match(input,COMMA,Follow._COMMA_in_annotationParamList3285); if (state.failed) return retval;
						DebugLocation(906, 11);
						PushFollow(Follow._annotationParam_in_annotationParamList3287);
						annotationParam();
						PopFollow();
						if (state.failed) return retval;

						}
						break;

					default:
						goto loop61;
					}
				}

				loop61:
					;

				} finally { DebugExitSubRule(61); }


				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(908, 3);
			Match(input,RPAREN,Follow._RPAREN_in_annotationParamList3298); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationParamList", 82);
			LeaveRule("annotationParamList", 82);
			LeaveRule_annotationParamList();
		}
		DebugLocation(910, 1);
		} finally { DebugExitRule(GrammarFileName, "annotationParamList"); }
		return retval;

	}
	// $ANTLR end "annotationParamList"

	partial void EnterRule_annotationParam();
	partial void LeaveRule_annotationParam();
	// $ANTLR start "annotationParam"
	// AS3T.g:912:1: annotationParam : ( ident ASSIGN constant | constant | ident );
	[GrammarRule("annotationParam")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> annotationParam()
	{
		EnterRule_annotationParam();
		EnterRule("annotationParam", 83);
		TraceIn("annotationParam", 83);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "annotationParam");
		DebugLocation(912, 1);
		try
		{
			// AS3T.g:913:2: ( ident ASSIGN constant | constant | ident )
			int alt63=3;
			try { DebugEnterDecision(63, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				int LA63_2 = input.LA(2);

				if ((LA63_2==ASSIGN))
				{
					alt63 = 1;
				}
				else if ((LA63_2==COMMA||LA63_2==RPAREN))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case USE:
				{
				int LA63_2 = input.LA(2);

				if ((LA63_2==ASSIGN))
				{
					alt63 = 1;
				}
				else if ((LA63_2==COMMA||LA63_2==RPAREN))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case XML:
				{
				int LA63_2 = input.LA(2);

				if ((LA63_2==ASSIGN))
				{
					alt63 = 1;
				}
				else if ((LA63_2==COMMA||LA63_2==RPAREN))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRACE:
				{
				int LA63_2 = input.LA(2);

				if ((LA63_2==ASSIGN))
				{
					alt63 = 1;
				}
				else if ((LA63_2==COMMA||LA63_2==RPAREN))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DYNAMIC:
				{
				int LA63_2 = input.LA(2);

				if ((LA63_2==ASSIGN))
				{
					alt63 = 1;
				}
				else if ((LA63_2==COMMA||LA63_2==RPAREN))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAMESPACE:
				{
				int LA63_2 = input.LA(2);

				if ((LA63_2==ASSIGN))
				{
					alt63 = 1;
				}
				else if ((LA63_2==COMMA||LA63_2==RPAREN))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IS:
				{
				int LA63_2 = input.LA(2);

				if ((LA63_2==ASSIGN))
				{
					alt63 = 1;
				}
				else if ((LA63_2==COMMA||LA63_2==RPAREN))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AS:
				{
				int LA63_2 = input.LA(2);

				if ((LA63_2==ASSIGN))
				{
					alt63 = 1;
				}
				else if ((LA63_2==COMMA||LA63_2==RPAREN))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case GET:
				{
				int LA63_2 = input.LA(2);

				if ((LA63_2==ASSIGN))
				{
					alt63 = 1;
				}
				else if ((LA63_2==COMMA||LA63_2==RPAREN))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SET:
				{
				int LA63_2 = input.LA(2);

				if ((LA63_2==ASSIGN))
				{
					alt63 = 1;
				}
				else if ((LA63_2==COMMA||LA63_2==RPAREN))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SUPER:
				{
				int LA63_2 = input.LA(2);

				if ((LA63_2==ASSIGN))
				{
					alt63 = 1;
				}
				else if ((LA63_2==COMMA||LA63_2==RPAREN))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOAT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case REGEX_LITERAL:
			case STRING_LITERAL_DOUBLE:
			case STRING_LITERAL_SINGLE:
			case TRUE:
			case XML_LITERAL:
				{
				alt63 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:913:4: ident ASSIGN constant
				{
				DebugLocation(913, 4);
				PushFollow(Follow._ident_in_annotationParam3312);
				ident();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(913, 10);
				Match(input,ASSIGN,Follow._ASSIGN_in_annotationParam3314); if (state.failed) return retval;
				DebugLocation(913, 17);
				PushFollow(Follow._constant_in_annotationParam3316);
				constant();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:914:4: constant
				{
				DebugLocation(914, 4);
				PushFollow(Follow._constant_in_annotationParam3322);
				constant();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:915:4: ident
				{
				DebugLocation(915, 4);
				PushFollow(Follow._ident_in_annotationParam3328);
				ident();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationParam", 83);
			LeaveRule("annotationParam", 83);
			LeaveRule_annotationParam();
		}
		DebugLocation(916, 1);
		} finally { DebugExitRule(GrammarFileName, "annotationParam"); }
		return retval;

	}
	// $ANTLR end "annotationParam"

	partial void EnterRule_modifiers();
	partial void LeaveRule_modifiers();
	// $ANTLR start "modifiers"
	// AS3T.g:918:1: modifiers : ( modifier ( modifier )* )? ;
	[GrammarRule("modifiers")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> modifiers()
	{
		EnterRule_modifiers();
		EnterRule("modifiers", 84);
		TraceIn("modifiers", 84);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "modifiers");
		DebugLocation(918, 1);
		try
		{
			// AS3T.g:920:2: ( ( modifier ( modifier )* )? )
			DebugEnterAlt(1);
			// AS3T.g:920:4: ( modifier ( modifier )* )?
			{
			DebugLocation(920, 4);
			// AS3T.g:920:4: ( modifier ( modifier )* )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_1 = input.LA(1);

			if ((LA65_1==DYNAMIC||LA65_1==IDENT||LA65_1==INTERNAL||LA65_1==PRIVATE||(LA65_1>=PROTECTED && LA65_1<=PUBLIC)||LA65_1==STATIC||(LA65_1>=245 && LA65_1<=247)||LA65_1==251||LA65_1==253))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:920:6: modifier ( modifier )*
				{
				DebugLocation(920, 6);
				PushFollow(Follow._modifier_in_modifiers3347);
				modifier();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(920, 15);
				// AS3T.g:920:15: ( modifier )*
				try { DebugEnterSubRule(64);
				while (true)
				{
					int alt64=2;
					try { DebugEnterDecision(64, false);
					int LA64_1 = input.LA(1);

					if ((LA64_1==DYNAMIC||LA64_1==IDENT||LA64_1==INTERNAL||LA64_1==PRIVATE||(LA64_1>=PROTECTED && LA64_1<=PUBLIC)||LA64_1==STATIC||(LA64_1>=245 && LA64_1<=247)||LA64_1==251||LA64_1==253))
					{
						alt64 = 1;
					}


					} finally { DebugExitDecision(64); }
					switch ( alt64 )
					{
					case 1:
						DebugEnterAlt(1);
						// AS3T.g:920:16: modifier
						{
						DebugLocation(920, 16);
						PushFollow(Follow._modifier_in_modifiers3350);
						modifier();
						PopFollow();
						if (state.failed) return retval;

						}
						break;

					default:
						goto loop64;
					}
				}

				loop64:
					;

				} finally { DebugExitSubRule(64); }


				}
				break;

			}
			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifiers", 84);
			LeaveRule("modifiers", 84);
			LeaveRule_modifiers();
		}
		DebugLocation(921, 1);
		} finally { DebugExitRule(GrammarFileName, "modifiers"); }
		return retval;

	}
	// $ANTLR end "modifiers"

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();
	// $ANTLR start "modifier"
	// AS3T.g:923:1: modifier : ( namespaceName | STATIC -> ignore(| 'final' | 'enumerable' | 'explicit' | 'override' | DYNAMIC | 'intrinsic' );
	[GrammarRule("modifier")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 85);
		TraceIn("modifier", 85);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(923, 1);
		try
		{
			// AS3T.g:925:2: ( namespaceName | STATIC -> ignore(| 'final' | 'enumerable' | 'explicit' | 'override' | DYNAMIC | 'intrinsic' )
			int alt66=8;
			try { DebugEnterDecision(66, false);
			switch (input.LA(1))
			{
			case IDENT:
			case INTERNAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
				{
				alt66 = 1;
				}
				break;
			case STATIC:
				{
				alt66 = 2;
				}
				break;
			case 247:
				{
				alt66 = 3;
				}
				break;
			case 245:
				{
				alt66 = 4;
				}
				break;
			case 246:
				{
				alt66 = 5;
				}
				break;
			case 253:
				{
				alt66 = 6;
				}
				break;
			case DYNAMIC:
				{
				alt66 = 7;
				}
				break;
			case 251:
				{
				alt66 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:925:4: namespaceName
				{
				DebugLocation(925, 4);
				PushFollow(Follow._namespaceName_in_modifier3371);
				namespaceName();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:926:4: STATIC
				{
				DebugLocation(926, 4);
				Match(input,STATIC,Follow._STATIC_in_modifier3376); if (state.failed) return retval;
				DebugLocation(926, 11);
				if (state.backtracking == 0)
				{
					 _storage = Symbol.STATIC; 
				}

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 926:41: -> ignore(
					{
						retval.Template = TemplateGroup.GetInstanceOf("ignore");
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:927:4: 'final'
				{
				DebugLocation(927, 4);
				Match(input,247,Follow._247_in_modifier3389); if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// AS3T.g:928:4: 'enumerable'
				{
				DebugLocation(928, 4);
				Match(input,245,Follow._245_in_modifier3394); if (state.failed) return retval;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// AS3T.g:929:4: 'explicit'
				{
				DebugLocation(929, 4);
				Match(input,246,Follow._246_in_modifier3399); if (state.failed) return retval;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// AS3T.g:930:4: 'override'
				{
				DebugLocation(930, 4);
				Match(input,253,Follow._253_in_modifier3404); if (state.failed) return retval;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// AS3T.g:931:4: DYNAMIC
				{
				DebugLocation(931, 4);
				Match(input,DYNAMIC,Follow._DYNAMIC_in_modifier3409); if (state.failed) return retval;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// AS3T.g:932:4: 'intrinsic'
				{
				DebugLocation(932, 4);
				Match(input,251,Follow._251_in_modifier3414); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifier", 85);
			LeaveRule("modifier", 85);
			LeaveRule_modifier();
		}
		DebugLocation(933, 1);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return retval;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// AS3T.g:935:1: arguments : ( LPAREN expressionList RPAREN | LPAREN RPAREN );
	[GrammarRule("arguments")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 86);
		TraceIn("arguments", 86);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(935, 1);
		try
		{
			// AS3T.g:937:2: ( LPAREN expressionList RPAREN | LPAREN RPAREN )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_1 = input.LA(1);

			if ((LA67_1==LPAREN))
			{
				int LA67_2 = input.LA(2);

				if ((LA67_2==RPAREN))
				{
					alt67 = 2;
				}
				else if ((LA67_2==AS||LA67_2==BNOT||(LA67_2>=DEC && LA67_2<=DECIMAL_LITERAL)||(LA67_2>=DYNAMIC && LA67_2<=E4X_ATTRI)||(LA67_2>=FALSE && LA67_2<=FLOAT_LITERAL)||LA67_2==FUNCTION||LA67_2==GET||(LA67_2>=HEX_LITERAL && LA67_2<=IDENT)||LA67_2==INC||(LA67_2>=INTERNAL && LA67_2<=IS)||(LA67_2>=LBRACK && LA67_2<=LCURLY)||LA67_2==LNOT||LA67_2==LPAREN||LA67_2==MINUS||LA67_2==NAMESPACE||LA67_2==NEW||LA67_2==NULL||LA67_2==OCTAL_LITERAL||LA67_2==PLUS||LA67_2==PRIVATE||(LA67_2>=PROTECTED && LA67_2<=PUBLIC)||LA67_2==REGEX_LITERAL||LA67_2==SET||(LA67_2>=STRING_LITERAL_DOUBLE && LA67_2<=SUPER)||(LA67_2>=TRACE && LA67_2<=TRUE)||LA67_2==USE||LA67_2==XML||LA67_2==XML_LITERAL||LA67_2==244||(LA67_2>=256 && LA67_2<=258)))
				{
					alt67 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 67, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:937:4: LPAREN expressionList RPAREN
				{
				DebugLocation(937, 4);
				Match(input,LPAREN,Follow._LPAREN_in_arguments3430); if (state.failed) return retval;
				DebugLocation(937, 11);
				PushFollow(Follow._expressionList_in_arguments3432);
				expressionList();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(937, 26);
				Match(input,RPAREN,Follow._RPAREN_in_arguments3434); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:938:4: LPAREN RPAREN
				{
				DebugLocation(938, 4);
				Match(input,LPAREN,Follow._LPAREN_in_arguments3439); if (state.failed) return retval;
				DebugLocation(938, 11);
				Match(input,RPAREN,Follow._RPAREN_in_arguments3441); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 86);
			LeaveRule("arguments", 86);
			LeaveRule_arguments();
		}
		DebugLocation(939, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_arrayLiteral();
	partial void LeaveRule_arrayLiteral();
	// $ANTLR start "arrayLiteral"
	// AS3T.g:942:1: arrayLiteral : LBRACK ( elementList )? RBRACK ;
	[GrammarRule("arrayLiteral")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> arrayLiteral()
	{
		EnterRule_arrayLiteral();
		EnterRule("arrayLiteral", 87);
		TraceIn("arrayLiteral", 87);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "arrayLiteral");
		DebugLocation(942, 1);
		try
		{
			// AS3T.g:943:2: ( LBRACK ( elementList )? RBRACK )
			DebugEnterAlt(1);
			// AS3T.g:943:4: LBRACK ( elementList )? RBRACK
			{
			DebugLocation(943, 4);
			Match(input,LBRACK,Follow._LBRACK_in_arrayLiteral3453); if (state.failed) return retval;
			DebugLocation(943, 11);
			// AS3T.g:943:11: ( elementList )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_1 = input.LA(1);

			if ((LA68_1==AS||LA68_1==BNOT||LA68_1==COMMA||(LA68_1>=DEC && LA68_1<=DECIMAL_LITERAL)||(LA68_1>=DYNAMIC && LA68_1<=E4X_ATTRI)||(LA68_1>=FALSE && LA68_1<=FLOAT_LITERAL)||LA68_1==FUNCTION||LA68_1==GET||(LA68_1>=HEX_LITERAL && LA68_1<=IDENT)||LA68_1==INC||(LA68_1>=INTERNAL && LA68_1<=IS)||(LA68_1>=LBRACK && LA68_1<=LCURLY)||LA68_1==LNOT||LA68_1==LPAREN||LA68_1==MINUS||LA68_1==NAMESPACE||LA68_1==NEW||LA68_1==NULL||LA68_1==OCTAL_LITERAL||LA68_1==PLUS||LA68_1==PRIVATE||(LA68_1>=PROTECTED && LA68_1<=PUBLIC)||LA68_1==REGEX_LITERAL||LA68_1==SET||(LA68_1>=STRING_LITERAL_DOUBLE && LA68_1<=SUPER)||(LA68_1>=TRACE && LA68_1<=TRUE)||LA68_1==USE||LA68_1==XML||LA68_1==XML_LITERAL||LA68_1==244||(LA68_1>=256 && LA68_1<=258)))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:943:11: elementList
				{
				DebugLocation(943, 11);
				PushFollow(Follow._elementList_in_arrayLiteral3455);
				elementList();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(943, 24);
			Match(input,RBRACK,Follow._RBRACK_in_arrayLiteral3458); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayLiteral", 87);
			LeaveRule("arrayLiteral", 87);
			LeaveRule_arrayLiteral();
		}
		DebugLocation(944, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayLiteral"); }
		return retval;

	}
	// $ANTLR end "arrayLiteral"

	partial void EnterRule_elementList();
	partial void LeaveRule_elementList();
	// $ANTLR start "elementList"
	// AS3T.g:946:1: elementList : ( COMMA | nonemptyElementList );
	[GrammarRule("elementList")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> elementList()
	{
		EnterRule_elementList();
		EnterRule("elementList", 88);
		TraceIn("elementList", 88);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "elementList");
		DebugLocation(946, 1);
		try
		{
			// AS3T.g:947:2: ( COMMA | nonemptyElementList )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==COMMA))
			{
				alt69 = 1;
			}
			else if ((LA69_1==AS||LA69_1==BNOT||(LA69_1>=DEC && LA69_1<=DECIMAL_LITERAL)||(LA69_1>=DYNAMIC && LA69_1<=E4X_ATTRI)||(LA69_1>=FALSE && LA69_1<=FLOAT_LITERAL)||LA69_1==FUNCTION||LA69_1==GET||(LA69_1>=HEX_LITERAL && LA69_1<=IDENT)||LA69_1==INC||(LA69_1>=INTERNAL && LA69_1<=IS)||(LA69_1>=LBRACK && LA69_1<=LCURLY)||LA69_1==LNOT||LA69_1==LPAREN||LA69_1==MINUS||LA69_1==NAMESPACE||LA69_1==NEW||LA69_1==NULL||LA69_1==OCTAL_LITERAL||LA69_1==PLUS||LA69_1==PRIVATE||(LA69_1>=PROTECTED && LA69_1<=PUBLIC)||LA69_1==REGEX_LITERAL||LA69_1==SET||(LA69_1>=STRING_LITERAL_DOUBLE && LA69_1<=SUPER)||(LA69_1>=TRACE && LA69_1<=TRUE)||LA69_1==USE||LA69_1==XML||LA69_1==XML_LITERAL||LA69_1==244||(LA69_1>=256 && LA69_1<=258)))
			{
				alt69 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:947:4: COMMA
				{
				DebugLocation(947, 4);
				Match(input,COMMA,Follow._COMMA_in_elementList3471); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:948:4: nonemptyElementList
				{
				DebugLocation(948, 4);
				PushFollow(Follow._nonemptyElementList_in_elementList3476);
				nonemptyElementList();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elementList", 88);
			LeaveRule("elementList", 88);
			LeaveRule_elementList();
		}
		DebugLocation(949, 1);
		} finally { DebugExitRule(GrammarFileName, "elementList"); }
		return retval;

	}
	// $ANTLR end "elementList"

	partial void EnterRule_nonemptyElementList();
	partial void LeaveRule_nonemptyElementList();
	// $ANTLR start "nonemptyElementList"
	// AS3T.g:951:1: nonemptyElementList : assignmentExpression ( COMMA assignmentExpression )* ;
	[GrammarRule("nonemptyElementList")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> nonemptyElementList()
	{
		EnterRule_nonemptyElementList();
		EnterRule("nonemptyElementList", 89);
		TraceIn("nonemptyElementList", 89);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "nonemptyElementList");
		DebugLocation(951, 1);
		try
		{
			// AS3T.g:952:2: ( assignmentExpression ( COMMA assignmentExpression )* )
			DebugEnterAlt(1);
			// AS3T.g:952:4: assignmentExpression ( COMMA assignmentExpression )*
			{
			DebugLocation(952, 4);
			PushFollow(Follow._assignmentExpression_in_nonemptyElementList3487);
			assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(952, 25);
			// AS3T.g:952:25: ( COMMA assignmentExpression )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_1 = input.LA(1);

				if ((LA70_1==COMMA))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:952:26: COMMA assignmentExpression
					{
					DebugLocation(952, 26);
					Match(input,COMMA,Follow._COMMA_in_nonemptyElementList3490); if (state.failed) return retval;
					DebugLocation(952, 32);
					PushFollow(Follow._assignmentExpression_in_nonemptyElementList3492);
					assignmentExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("nonemptyElementList", 89);
			LeaveRule("nonemptyElementList", 89);
			LeaveRule_nonemptyElementList();
		}
		DebugLocation(953, 1);
		} finally { DebugExitRule(GrammarFileName, "nonemptyElementList"); }
		return retval;

	}
	// $ANTLR end "nonemptyElementList"

	partial void EnterRule_element();
	partial void LeaveRule_element();
	// $ANTLR start "element"
	// AS3T.g:955:1: element : assignmentExpression ;
	[GrammarRule("element")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> element()
	{
		EnterRule_element();
		EnterRule("element", 90);
		TraceIn("element", 90);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "element");
		DebugLocation(955, 1);
		try
		{
			// AS3T.g:956:2: ( assignmentExpression )
			DebugEnterAlt(1);
			// AS3T.g:956:4: assignmentExpression
			{
			DebugLocation(956, 4);
			PushFollow(Follow._assignmentExpression_in_element3505);
			assignmentExpression();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("element", 90);
			LeaveRule("element", 90);
			LeaveRule_element();
		}
		DebugLocation(957, 1);
		} finally { DebugExitRule(GrammarFileName, "element"); }
		return retval;

	}
	// $ANTLR end "element"

	partial void EnterRule_objectLiteral();
	partial void LeaveRule_objectLiteral();
	// $ANTLR start "objectLiteral"
	// AS3T.g:960:1: objectLiteral : LCURLY ( fieldList )? RCURLY ;
	[GrammarRule("objectLiteral")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> objectLiteral()
	{
		EnterRule_objectLiteral();
		EnterRule("objectLiteral", 91);
		TraceIn("objectLiteral", 91);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "objectLiteral");
		DebugLocation(960, 1);
		try
		{
			// AS3T.g:961:2: ( LCURLY ( fieldList )? RCURLY )
			DebugEnterAlt(1);
			// AS3T.g:961:4: LCURLY ( fieldList )? RCURLY
			{
			DebugLocation(961, 4);
			Match(input,LCURLY,Follow._LCURLY_in_objectLiteral3517); if (state.failed) return retval;
			DebugLocation(961, 11);
			// AS3T.g:961:11: ( fieldList )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_1 = input.LA(1);

			if ((LA71_1==AS||LA71_1==DECIMAL_LITERAL||LA71_1==DYNAMIC||LA71_1==FLOAT_LITERAL||LA71_1==GET||(LA71_1>=HEX_LITERAL && LA71_1<=IDENT)||LA71_1==IS||LA71_1==NAMESPACE||LA71_1==OCTAL_LITERAL||LA71_1==SET||LA71_1==SUPER||LA71_1==TRACE||LA71_1==USE||LA71_1==XML))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:961:11: fieldList
				{
				DebugLocation(961, 11);
				PushFollow(Follow._fieldList_in_objectLiteral3519);
				fieldList();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(961, 22);
			Match(input,RCURLY,Follow._RCURLY_in_objectLiteral3522); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("objectLiteral", 91);
			LeaveRule("objectLiteral", 91);
			LeaveRule_objectLiteral();
		}
		DebugLocation(962, 1);
		} finally { DebugExitRule(GrammarFileName, "objectLiteral"); }
		return retval;

	}
	// $ANTLR end "objectLiteral"

	partial void EnterRule_fieldList();
	partial void LeaveRule_fieldList();
	// $ANTLR start "fieldList"
	// AS3T.g:964:1: fieldList : literalField ( COMMA ( literalField )? )* ;
	[GrammarRule("fieldList")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> fieldList()
	{
		EnterRule_fieldList();
		EnterRule("fieldList", 92);
		TraceIn("fieldList", 92);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "fieldList");
		DebugLocation(964, 1);
		try
		{
			// AS3T.g:965:2: ( literalField ( COMMA ( literalField )? )* )
			DebugEnterAlt(1);
			// AS3T.g:965:4: literalField ( COMMA ( literalField )? )*
			{
			DebugLocation(965, 4);
			PushFollow(Follow._literalField_in_fieldList3534);
			literalField();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(965, 17);
			// AS3T.g:965:17: ( COMMA ( literalField )? )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_1 = input.LA(1);

				if ((LA73_1==COMMA))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:965:18: COMMA ( literalField )?
					{
					DebugLocation(965, 18);
					Match(input,COMMA,Follow._COMMA_in_fieldList3537); if (state.failed) return retval;
					DebugLocation(965, 24);
					// AS3T.g:965:24: ( literalField )?
					int alt72=2;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, false);
					int LA72_1 = input.LA(1);

					if ((LA72_1==AS||LA72_1==DECIMAL_LITERAL||LA72_1==DYNAMIC||LA72_1==FLOAT_LITERAL||LA72_1==GET||(LA72_1>=HEX_LITERAL && LA72_1<=IDENT)||LA72_1==IS||LA72_1==NAMESPACE||LA72_1==OCTAL_LITERAL||LA72_1==SET||LA72_1==SUPER||LA72_1==TRACE||LA72_1==USE||LA72_1==XML))
					{
						alt72 = 1;
					}
					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// AS3T.g:965:24: literalField
						{
						DebugLocation(965, 24);
						PushFollow(Follow._literalField_in_fieldList3539);
						literalField();
						PopFollow();
						if (state.failed) return retval;

						}
						break;

					}
					} finally { DebugExitSubRule(72); }


					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fieldList", 92);
			LeaveRule("fieldList", 92);
			LeaveRule_fieldList();
		}
		DebugLocation(966, 1);
		} finally { DebugExitRule(GrammarFileName, "fieldList"); }
		return retval;

	}
	// $ANTLR end "fieldList"

	partial void EnterRule_literalField();
	partial void LeaveRule_literalField();
	// $ANTLR start "literalField"
	// AS3T.g:968:1: literalField : fieldName COLON element ;
	[GrammarRule("literalField")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> literalField()
	{
		EnterRule_literalField();
		EnterRule("literalField", 93);
		TraceIn("literalField", 93);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "literalField");
		DebugLocation(968, 1);
		try
		{
			// AS3T.g:969:2: ( fieldName COLON element )
			DebugEnterAlt(1);
			// AS3T.g:969:5: fieldName COLON element
			{
			DebugLocation(969, 5);
			PushFollow(Follow._fieldName_in_literalField3556);
			fieldName();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(969, 15);
			Match(input,COLON,Follow._COLON_in_literalField3558); if (state.failed) return retval;
			DebugLocation(969, 21);
			PushFollow(Follow._element_in_literalField3560);
			element();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literalField", 93);
			LeaveRule("literalField", 93);
			LeaveRule_literalField();
		}
		DebugLocation(970, 1);
		} finally { DebugExitRule(GrammarFileName, "literalField"); }
		return retval;

	}
	// $ANTLR end "literalField"

	partial void EnterRule_fieldName();
	partial void LeaveRule_fieldName();
	// $ANTLR start "fieldName"
	// AS3T.g:972:1: fieldName : ( ident | number );
	[GrammarRule("fieldName")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> fieldName()
	{
		EnterRule_fieldName();
		EnterRule("fieldName", 94);
		TraceIn("fieldName", 94);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "fieldName");
		DebugLocation(972, 1);
		try
		{
			// AS3T.g:973:2: ( ident | number )
			int alt74=2;
			try { DebugEnterDecision(74, false);
			int LA74_1 = input.LA(1);

			if ((LA74_1==AS||LA74_1==DYNAMIC||LA74_1==GET||LA74_1==IDENT||LA74_1==IS||LA74_1==NAMESPACE||LA74_1==SET||LA74_1==SUPER||LA74_1==TRACE||LA74_1==USE||LA74_1==XML))
			{
				alt74 = 1;
			}
			else if ((LA74_1==DECIMAL_LITERAL||LA74_1==FLOAT_LITERAL||LA74_1==HEX_LITERAL||LA74_1==OCTAL_LITERAL))
			{
				alt74 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:973:4: ident
				{
				DebugLocation(973, 4);
				PushFollow(Follow._ident_in_fieldName3572);
				ident();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:974:4: number
				{
				DebugLocation(974, 4);
				PushFollow(Follow._number_in_fieldName3577);
				number();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fieldName", 94);
			LeaveRule("fieldName", 94);
			LeaveRule_fieldName();
		}
		DebugLocation(975, 1);
		} finally { DebugExitRule(GrammarFileName, "fieldName"); }
		return retval;

	}
	// $ANTLR end "fieldName"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// AS3T.g:978:1: expression : assignmentExpression ;
	[GrammarRule("expression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 95);
		TraceIn("expression", 95);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(978, 1);
		try
		{
			// AS3T.g:980:2: ( assignmentExpression )
			DebugEnterAlt(1);
			// AS3T.g:980:4: assignmentExpression
			{
			DebugLocation(980, 4);
			PushFollow(Follow._assignmentExpression_in_expression3594);
			assignmentExpression();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expression", 95);
			LeaveRule("expression", 95);
			LeaveRule_expression();
		}
		DebugLocation(981, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();
	// $ANTLR start "expressionList"
	// AS3T.g:984:1: expressionList : e1= assignmentExpression ( COMMA e2= assignmentExpression )* -> assign(rhs=$e1.text);
	[GrammarRule("expressionList")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 96);
		TraceIn("expressionList", 96);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> e1 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> e2 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(984, 1);
		try
		{
			// AS3T.g:986:2: (e1= assignmentExpression ( COMMA e2= assignmentExpression )* -> assign(rhs=$e1.text))
			DebugEnterAlt(1);
			// AS3T.g:986:4: e1= assignmentExpression ( COMMA e2= assignmentExpression )*
			{
			DebugLocation(986, 6);
			PushFollow(Follow._assignmentExpression_in_expressionList3613);
			e1=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(986, 28);
			// AS3T.g:986:28: ( COMMA e2= assignmentExpression )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==COMMA))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:986:29: COMMA e2= assignmentExpression
					{
					DebugLocation(986, 29);
					Match(input,COMMA,Follow._COMMA_in_expressionList3616); if (state.failed) return retval;
					DebugLocation(986, 37);
					PushFollow(Follow._assignmentExpression_in_expressionList3620);
					e2=assignmentExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 986:61: -> assign(rhs=$e1.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("assign",
					new Dictionary<string, object>() { {"rhs", (e1!=null?input.ToString(e1.Start,e1.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionList", 96);
			LeaveRule("expressionList", 96);
			LeaveRule_expressionList();
		}
		DebugLocation(987, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// AS3T.g:990:1: assignmentExpression : x1= conditionalExpression ( ( assignmentOperator )=>op1= assignmentOperator x2= assignmentExpression )* -> assignexpr(lhs=$x1.textop=$op1.textrhs=$x2.text);
	[GrammarRule("assignmentExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 97);
		TraceIn("assignmentExpression", 97);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> x1 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> op1 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> x2 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(990, 1);
		try
		{
			// AS3T.g:992:2: (x1= conditionalExpression ( ( assignmentOperator )=>op1= assignmentOperator x2= assignmentExpression )* -> assignexpr(lhs=$x1.textop=$op1.textrhs=$x2.text))
			DebugEnterAlt(1);
			// AS3T.g:992:4: x1= conditionalExpression ( ( assignmentOperator )=>op1= assignmentOperator x2= assignmentExpression )*
			{
			DebugLocation(992, 6);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression3650);
			x1=conditionalExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(992, 29);
			// AS3T.g:992:29: ( ( assignmentOperator )=>op1= assignmentOperator x2= assignmentExpression )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_1 = input.LA(1);

				if ((LA76_1==ASSIGN||LA76_1==BAND_ASSIGN||LA76_1==BOR_ASSIGN||LA76_1==BSR_ASSIGN||LA76_1==BXOR_ASSIGN||LA76_1==DIV_ASSIGN||LA76_1==LAND_ASSIGN||LA76_1==LOR_ASSIGN||LA76_1==MINUS_ASSIGN||LA76_1==MOD_ASSIGN||LA76_1==PLUS_ASSIGN||LA76_1==SL_ASSIGN||LA76_1==SR_ASSIGN||LA76_1==STAR_ASSIGN))
				{
					int LA76_2 = input.LA(2);

					if ((EvaluatePredicate(synpred16_AS3T_fragment)))
					{
						alt76 = 1;
					}


				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:992:30: ( assignmentOperator )=>op1= assignmentOperator x2= assignmentExpression
					{
					DebugLocation(992, 57);
					PushFollow(Follow._assignmentOperator_in_assignmentExpression3661);
					op1=assignmentOperator();
					PopFollow();
					if (state.failed) return retval;
					DebugLocation(992, 79);
					PushFollow(Follow._assignmentExpression_in_assignmentExpression3665);
					x2=assignmentExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 992:104: -> assignexpr(lhs=$x1.textop=$op1.textrhs=$x2.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("assignexpr",
					new Dictionary<string, object>() { {"lhs", (x1!=null?input.ToString(x1.Start,x1.Stop):default(string))}, {"op", (op1!=null?input.ToString(op1.Start,op1.Stop):default(string))}, {"rhs", (x2!=null?input.ToString(x2.Start,x2.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentExpression", 97);
			LeaveRule("assignmentExpression", 97);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(993, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();
	// $ANTLR start "assignmentOperator"
	// AS3T.g:995:1: assignmentOperator : ( ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | SL_ASSIGN | SR_ASSIGN | BSR_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN | LAND_ASSIGN | LOR_ASSIGN );
	[GrammarRule("assignmentOperator")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 98);
		TraceIn("assignmentOperator", 98);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(995, 1);
		try
		{
			// AS3T.g:997:2: ( ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | SL_ASSIGN | SR_ASSIGN | BSR_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN | LAND_ASSIGN | LOR_ASSIGN )
			DebugEnterAlt(1);
			// AS3T.g:
			{
			DebugLocation(997, 2);
			if (input.LA(1)==ASSIGN||input.LA(1)==BAND_ASSIGN||input.LA(1)==BOR_ASSIGN||input.LA(1)==BSR_ASSIGN||input.LA(1)==BXOR_ASSIGN||input.LA(1)==DIV_ASSIGN||input.LA(1)==LAND_ASSIGN||input.LA(1)==LOR_ASSIGN||input.LA(1)==MINUS_ASSIGN||input.LA(1)==MOD_ASSIGN||input.LA(1)==PLUS_ASSIGN||input.LA(1)==SL_ASSIGN||input.LA(1)==SR_ASSIGN||input.LA(1)==STAR_ASSIGN)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentOperator", 98);
			LeaveRule("assignmentOperator", 98);
			LeaveRule_assignmentOperator();
		}
		DebugLocation(1011, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return retval;

	}
	// $ANTLR end "assignmentOperator"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();
	// $ANTLR start "conditionalExpression"
	// AS3T.g:1014:1: conditionalExpression : ( logicalOrExpression ) ( QUESTION conditionalSubExpression )? ;
	[GrammarRule("conditionalExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 99);
		TraceIn("conditionalExpression", 99);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(1014, 1);
		try
		{
			// AS3T.g:1015:2: ( ( logicalOrExpression ) ( QUESTION conditionalSubExpression )? )
			DebugEnterAlt(1);
			// AS3T.g:1015:4: ( logicalOrExpression ) ( QUESTION conditionalSubExpression )?
			{
			DebugLocation(1015, 4);
			// AS3T.g:1015:4: ( logicalOrExpression )
			DebugEnterAlt(1);
			// AS3T.g:1015:5: logicalOrExpression
			{
			DebugLocation(1015, 5);
			PushFollow(Follow._logicalOrExpression_in_conditionalExpression3780);
			logicalOrExpression();
			PopFollow();
			if (state.failed) return retval;

			}

			DebugLocation(1016, 3);
			// AS3T.g:1016:3: ( QUESTION conditionalSubExpression )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			int LA77_1 = input.LA(1);

			if ((LA77_1==QUESTION))
			{
				alt77 = 1;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:1017:4: QUESTION conditionalSubExpression
				{
				DebugLocation(1017, 4);
				Match(input,QUESTION,Follow._QUESTION_in_conditionalExpression3790); if (state.failed) return retval;
				DebugLocation(1018, 4);
				PushFollow(Follow._conditionalSubExpression_in_conditionalExpression3795);
				conditionalSubExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalExpression", 99);
			LeaveRule("conditionalExpression", 99);
			LeaveRule_conditionalExpression();
		}
		DebugLocation(1021, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalSubExpression();
	partial void LeaveRule_conditionalSubExpression();
	// $ANTLR start "conditionalSubExpression"
	// AS3T.g:1023:1: conditionalSubExpression : assignmentExpression COLON assignmentExpression ;
	[GrammarRule("conditionalSubExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> conditionalSubExpression()
	{
		EnterRule_conditionalSubExpression();
		EnterRule("conditionalSubExpression", 100);
		TraceIn("conditionalSubExpression", 100);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "conditionalSubExpression");
		DebugLocation(1023, 1);
		try
		{
			// AS3T.g:1024:2: ( assignmentExpression COLON assignmentExpression )
			DebugEnterAlt(1);
			// AS3T.g:1024:4: assignmentExpression COLON assignmentExpression
			{
			DebugLocation(1024, 4);
			PushFollow(Follow._assignmentExpression_in_conditionalSubExpression3815);
			assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1024, 25);
			Match(input,COLON,Follow._COLON_in_conditionalSubExpression3817); if (state.failed) return retval;
			DebugLocation(1024, 31);
			PushFollow(Follow._assignmentExpression_in_conditionalSubExpression3819);
			assignmentExpression();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalSubExpression", 100);
			LeaveRule("conditionalSubExpression", 100);
			LeaveRule_conditionalSubExpression();
		}
		DebugLocation(1025, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalSubExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalSubExpression"

	partial void EnterRule_logicalOrExpression();
	partial void LeaveRule_logicalOrExpression();
	// $ANTLR start "logicalOrExpression"
	// AS3T.g:1030:1: logicalOrExpression : logicalAndExpression ( logicalOrOperator logicalAndExpression )* ;
	[GrammarRule("logicalOrExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> logicalOrExpression()
	{
		EnterRule_logicalOrExpression();
		EnterRule("logicalOrExpression", 101);
		TraceIn("logicalOrExpression", 101);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "logicalOrExpression");
		DebugLocation(1030, 1);
		try
		{
			// AS3T.g:1031:2: ( logicalAndExpression ( logicalOrOperator logicalAndExpression )* )
			DebugEnterAlt(1);
			// AS3T.g:1031:4: logicalAndExpression ( logicalOrOperator logicalAndExpression )*
			{
			DebugLocation(1031, 4);
			PushFollow(Follow._logicalAndExpression_in_logicalOrExpression3833);
			logicalAndExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1032, 3);
			// AS3T.g:1032:3: ( logicalOrOperator logicalAndExpression )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_1 = input.LA(1);

				if ((LA78_1==LOR||LA78_1==252))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:1032:4: logicalOrOperator logicalAndExpression
					{
					DebugLocation(1032, 4);
					PushFollow(Follow._logicalOrOperator_in_logicalOrExpression3838);
					logicalOrOperator();
					PopFollow();
					if (state.failed) return retval;
					DebugLocation(1032, 22);
					PushFollow(Follow._logicalAndExpression_in_logicalOrExpression3840);
					logicalAndExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalOrExpression", 101);
			LeaveRule("logicalOrExpression", 101);
			LeaveRule_logicalOrExpression();
		}
		DebugLocation(1033, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalOrExpression"); }
		return retval;

	}
	// $ANTLR end "logicalOrExpression"

	partial void EnterRule_logicalOrOperator();
	partial void LeaveRule_logicalOrOperator();
	// $ANTLR start "logicalOrOperator"
	// AS3T.g:1035:1: logicalOrOperator : ( LOR | 'or' );
	[GrammarRule("logicalOrOperator")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> logicalOrOperator()
	{
		EnterRule_logicalOrOperator();
		EnterRule("logicalOrOperator", 102);
		TraceIn("logicalOrOperator", 102);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "logicalOrOperator");
		DebugLocation(1035, 1);
		try
		{
			// AS3T.g:1036:2: ( LOR | 'or' )
			DebugEnterAlt(1);
			// AS3T.g:
			{
			DebugLocation(1036, 2);
			if (input.LA(1)==LOR||input.LA(1)==252)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalOrOperator", 102);
			LeaveRule("logicalOrOperator", 102);
			LeaveRule_logicalOrOperator();
		}
		DebugLocation(1037, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalOrOperator"); }
		return retval;

	}
	// $ANTLR end "logicalOrOperator"

	partial void EnterRule_logicalAndExpression();
	partial void LeaveRule_logicalAndExpression();
	// $ANTLR start "logicalAndExpression"
	// AS3T.g:1040:1: logicalAndExpression : bitwiseOrExpression ( logicalAndOperator bitwiseOrExpression )* ;
	[GrammarRule("logicalAndExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> logicalAndExpression()
	{
		EnterRule_logicalAndExpression();
		EnterRule("logicalAndExpression", 103);
		TraceIn("logicalAndExpression", 103);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "logicalAndExpression");
		DebugLocation(1040, 1);
		try
		{
			// AS3T.g:1041:2: ( bitwiseOrExpression ( logicalAndOperator bitwiseOrExpression )* )
			DebugEnterAlt(1);
			// AS3T.g:1041:4: bitwiseOrExpression ( logicalAndOperator bitwiseOrExpression )*
			{
			DebugLocation(1041, 4);
			PushFollow(Follow._bitwiseOrExpression_in_logicalAndExpression3869);
			bitwiseOrExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1042, 3);
			// AS3T.g:1042:3: ( logicalAndOperator bitwiseOrExpression )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_1 = input.LA(1);

				if ((LA79_1==LAND||LA79_1==242))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:1042:4: logicalAndOperator bitwiseOrExpression
					{
					DebugLocation(1042, 4);
					PushFollow(Follow._logicalAndOperator_in_logicalAndExpression3874);
					logicalAndOperator();
					PopFollow();
					if (state.failed) return retval;
					DebugLocation(1042, 23);
					PushFollow(Follow._bitwiseOrExpression_in_logicalAndExpression3876);
					bitwiseOrExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalAndExpression", 103);
			LeaveRule("logicalAndExpression", 103);
			LeaveRule_logicalAndExpression();
		}
		DebugLocation(1043, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalAndExpression"); }
		return retval;

	}
	// $ANTLR end "logicalAndExpression"

	partial void EnterRule_logicalAndOperator();
	partial void LeaveRule_logicalAndOperator();
	// $ANTLR start "logicalAndOperator"
	// AS3T.g:1045:1: logicalAndOperator : ( LAND | 'and' );
	[GrammarRule("logicalAndOperator")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> logicalAndOperator()
	{
		EnterRule_logicalAndOperator();
		EnterRule("logicalAndOperator", 104);
		TraceIn("logicalAndOperator", 104);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "logicalAndOperator");
		DebugLocation(1045, 1);
		try
		{
			// AS3T.g:1046:2: ( LAND | 'and' )
			DebugEnterAlt(1);
			// AS3T.g:
			{
			DebugLocation(1046, 2);
			if (input.LA(1)==LAND||input.LA(1)==242)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalAndOperator", 104);
			LeaveRule("logicalAndOperator", 104);
			LeaveRule_logicalAndOperator();
		}
		DebugLocation(1047, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalAndOperator"); }
		return retval;

	}
	// $ANTLR end "logicalAndOperator"

	partial void EnterRule_bitwiseOrExpression();
	partial void LeaveRule_bitwiseOrExpression();
	// $ANTLR start "bitwiseOrExpression"
	// AS3T.g:1050:1: bitwiseOrExpression : bitwiseXorExpression ( BOR bitwiseXorExpression )* ;
	[GrammarRule("bitwiseOrExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> bitwiseOrExpression()
	{
		EnterRule_bitwiseOrExpression();
		EnterRule("bitwiseOrExpression", 105);
		TraceIn("bitwiseOrExpression", 105);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "bitwiseOrExpression");
		DebugLocation(1050, 1);
		try
		{
			// AS3T.g:1051:2: ( bitwiseXorExpression ( BOR bitwiseXorExpression )* )
			DebugEnterAlt(1);
			// AS3T.g:1051:4: bitwiseXorExpression ( BOR bitwiseXorExpression )*
			{
			DebugLocation(1051, 4);
			PushFollow(Follow._bitwiseXorExpression_in_bitwiseOrExpression3905);
			bitwiseXorExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1052, 3);
			// AS3T.g:1052:3: ( BOR bitwiseXorExpression )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, false);
				int LA80_1 = input.LA(1);

				if ((LA80_1==BOR))
				{
					alt80 = 1;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:1052:4: BOR bitwiseXorExpression
					{
					DebugLocation(1052, 4);
					Match(input,BOR,Follow._BOR_in_bitwiseOrExpression3910); if (state.failed) return retval;
					DebugLocation(1052, 8);
					PushFollow(Follow._bitwiseXorExpression_in_bitwiseOrExpression3912);
					bitwiseXorExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseOrExpression", 105);
			LeaveRule("bitwiseOrExpression", 105);
			LeaveRule_bitwiseOrExpression();
		}
		DebugLocation(1053, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseOrExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseOrExpression"

	partial void EnterRule_bitwiseXorExpression();
	partial void LeaveRule_bitwiseXorExpression();
	// $ANTLR start "bitwiseXorExpression"
	// AS3T.g:1056:1: bitwiseXorExpression : bitwiseAndExpression ( BXOR bitwiseAndExpression )* ;
	[GrammarRule("bitwiseXorExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> bitwiseXorExpression()
	{
		EnterRule_bitwiseXorExpression();
		EnterRule("bitwiseXorExpression", 106);
		TraceIn("bitwiseXorExpression", 106);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "bitwiseXorExpression");
		DebugLocation(1056, 1);
		try
		{
			// AS3T.g:1057:2: ( bitwiseAndExpression ( BXOR bitwiseAndExpression )* )
			DebugEnterAlt(1);
			// AS3T.g:1057:4: bitwiseAndExpression ( BXOR bitwiseAndExpression )*
			{
			DebugLocation(1057, 4);
			PushFollow(Follow._bitwiseAndExpression_in_bitwiseXorExpression3926);
			bitwiseAndExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1058, 3);
			// AS3T.g:1058:3: ( BXOR bitwiseAndExpression )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_1 = input.LA(1);

				if ((LA81_1==BXOR))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:1058:4: BXOR bitwiseAndExpression
					{
					DebugLocation(1058, 4);
					Match(input,BXOR,Follow._BXOR_in_bitwiseXorExpression3931); if (state.failed) return retval;
					DebugLocation(1058, 9);
					PushFollow(Follow._bitwiseAndExpression_in_bitwiseXorExpression3933);
					bitwiseAndExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseXorExpression", 106);
			LeaveRule("bitwiseXorExpression", 106);
			LeaveRule_bitwiseXorExpression();
		}
		DebugLocation(1059, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXorExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseXorExpression"

	partial void EnterRule_bitwiseAndExpression();
	partial void LeaveRule_bitwiseAndExpression();
	// $ANTLR start "bitwiseAndExpression"
	// AS3T.g:1062:1: bitwiseAndExpression : equalityExpression ( BAND equalityExpression )* ;
	[GrammarRule("bitwiseAndExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> bitwiseAndExpression()
	{
		EnterRule_bitwiseAndExpression();
		EnterRule("bitwiseAndExpression", 107);
		TraceIn("bitwiseAndExpression", 107);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "bitwiseAndExpression");
		DebugLocation(1062, 1);
		try
		{
			// AS3T.g:1063:2: ( equalityExpression ( BAND equalityExpression )* )
			DebugEnterAlt(1);
			// AS3T.g:1063:4: equalityExpression ( BAND equalityExpression )*
			{
			DebugLocation(1063, 4);
			PushFollow(Follow._equalityExpression_in_bitwiseAndExpression3947);
			equalityExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1064, 3);
			// AS3T.g:1064:3: ( BAND equalityExpression )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_1 = input.LA(1);

				if ((LA82_1==BAND))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:1064:4: BAND equalityExpression
					{
					DebugLocation(1064, 4);
					Match(input,BAND,Follow._BAND_in_bitwiseAndExpression3952); if (state.failed) return retval;
					DebugLocation(1064, 9);
					PushFollow(Follow._equalityExpression_in_bitwiseAndExpression3954);
					equalityExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseAndExpression", 107);
			LeaveRule("bitwiseAndExpression", 107);
			LeaveRule_bitwiseAndExpression();
		}
		DebugLocation(1065, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseAndExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseAndExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();
	// $ANTLR start "equalityExpression"
	// AS3T.g:1068:1: equalityExpression : relationalExpression ( equalityOperator relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 108);
		TraceIn("equalityExpression", 108);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(1068, 1);
		try
		{
			// AS3T.g:1069:2: ( relationalExpression ( equalityOperator relationalExpression )* )
			DebugEnterAlt(1);
			// AS3T.g:1069:4: relationalExpression ( equalityOperator relationalExpression )*
			{
			DebugLocation(1069, 4);
			PushFollow(Follow._relationalExpression_in_equalityExpression3968);
			relationalExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1070, 9);
			// AS3T.g:1070:9: ( equalityOperator relationalExpression )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_1 = input.LA(1);

				if ((LA83_1==EQUAL||LA83_1==NOT_EQUAL||(LA83_1>=STRICT_EQUAL && LA83_1<=STRICT_NOT_EQUAL)))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:1070:10: equalityOperator relationalExpression
					{
					DebugLocation(1070, 10);
					PushFollow(Follow._equalityOperator_in_equalityExpression3979);
					equalityOperator();
					PopFollow();
					if (state.failed) return retval;
					DebugLocation(1070, 27);
					PushFollow(Follow._relationalExpression_in_equalityExpression3981);
					relationalExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("equalityExpression", 108);
			LeaveRule("equalityExpression", 108);
			LeaveRule_equalityExpression();
		}
		DebugLocation(1071, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_equalityOperator();
	partial void LeaveRule_equalityOperator();
	// $ANTLR start "equalityOperator"
	// AS3T.g:1073:1: equalityOperator : ( STRICT_EQUAL | STRICT_NOT_EQUAL | NOT_EQUAL | EQUAL );
	[GrammarRule("equalityOperator")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> equalityOperator()
	{
		EnterRule_equalityOperator();
		EnterRule("equalityOperator", 109);
		TraceIn("equalityOperator", 109);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "equalityOperator");
		DebugLocation(1073, 1);
		try
		{
			// AS3T.g:1074:2: ( STRICT_EQUAL | STRICT_NOT_EQUAL | NOT_EQUAL | EQUAL )
			DebugEnterAlt(1);
			// AS3T.g:
			{
			DebugLocation(1074, 2);
			if (input.LA(1)==EQUAL||input.LA(1)==NOT_EQUAL||(input.LA(1)>=STRICT_EQUAL && input.LA(1)<=STRICT_NOT_EQUAL))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("equalityOperator", 109);
			LeaveRule("equalityOperator", 109);
			LeaveRule_equalityOperator();
		}
		DebugLocation(1075, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityOperator"); }
		return retval;

	}
	// $ANTLR end "equalityOperator"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// AS3T.g:1078:1: relationalExpression : s1= shiftExpression ( relationalOperator s2= shiftExpression )* -> expr(e=$s1.textr=$relationalOperator.textc=$s2.text);
	[GrammarRule("relationalExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 110);
		TraceIn("relationalExpression", 110);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> s1 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> s2 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> relationalOperator24 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(1078, 1);
		try
		{
			// AS3T.g:1079:2: (s1= shiftExpression ( relationalOperator s2= shiftExpression )* -> expr(e=$s1.textr=$relationalOperator.textc=$s2.text))
			DebugEnterAlt(1);
			// AS3T.g:1079:4: s1= shiftExpression ( relationalOperator s2= shiftExpression )*
			{
			DebugLocation(1079, 6);
			PushFollow(Follow._shiftExpression_in_relationalExpression4021);
			s1=shiftExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1079, 23);
			// AS3T.g:1079:23: ( relationalOperator s2= shiftExpression )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_1 = input.LA(1);

				if ((LA84_1==AS||LA84_1==GE||LA84_1==GT||LA84_1==IS||LA84_1==LE||LA84_1==LT||LA84_1==250))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:1079:24: relationalOperator s2= shiftExpression
					{
					DebugLocation(1079, 24);
					PushFollow(Follow._relationalOperator_in_relationalExpression4024);
					relationalOperator24=relationalOperator();
					PopFollow();
					if (state.failed) return retval;
					DebugLocation(1079, 45);
					PushFollow(Follow._shiftExpression_in_relationalExpression4028);
					s2=shiftExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 1079:64: -> expr(e=$s1.textr=$relationalOperator.textc=$s2.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("expr",
					new Dictionary<string, object>() { {"e", (s1!=null?input.ToString(s1.Start,s1.Stop):default(string))}, {"r", (relationalOperator24!=null?input.ToString(relationalOperator24.Start,relationalOperator24.Stop):default(string))}, {"c", (s2!=null?input.ToString(s2.Start,s2.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalExpression", 110);
			LeaveRule("relationalExpression", 110);
			LeaveRule_relationalExpression();
		}
		DebugLocation(1080, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_relationalOperator();
	partial void LeaveRule_relationalOperator();
	// $ANTLR start "relationalOperator"
	// AS3T.g:1082:1: relationalOperator : ( LT -> relationalOperator(op=\"<\")| GT -> relationalOperator(op=\">\")| LE -> relationalOperator(op=\"<=\")| GE -> relationalOperator(op=\">=\")| IS -> rtti(| AS -> cast(| 'instanceof' );
	[GrammarRule("relationalOperator")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> relationalOperator()
	{
		EnterRule_relationalOperator();
		EnterRule("relationalOperator", 111);
		TraceIn("relationalOperator", 111);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "relationalOperator");
		DebugLocation(1082, 1);
		try
		{
			// AS3T.g:1084:2: ( LT -> relationalOperator(op=\"<\")| GT -> relationalOperator(op=\">\")| LE -> relationalOperator(op=\"<=\")| GE -> relationalOperator(op=\">=\")| IS -> rtti(| AS -> cast(| 'instanceof' )
			int alt85=7;
			try { DebugEnterDecision(85, false);
			switch (input.LA(1))
			{
			case LT:
				{
				alt85 = 1;
				}
				break;
			case GT:
				{
				alt85 = 2;
				}
				break;
			case LE:
				{
				alt85 = 3;
				}
				break;
			case GE:
				{
				alt85 = 4;
				}
				break;
			case IS:
				{
				alt85 = 5;
				}
				break;
			case AS:
				{
				alt85 = 6;
				}
				break;
			case 250:
				{
				alt85 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:1084:4: LT
				{
				DebugLocation(1084, 4);
				Match(input,LT,Follow._LT_in_relationalOperator4063); if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 1084:7: -> relationalOperator(op=\"<\")
					{
						retval.Template = TemplateGroup.GetInstanceOf("relationalOperator",
						new Dictionary<string, object>() { {"op", "<"} }
					);
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:1085:4: GT
				{
				DebugLocation(1085, 4);
				Match(input,GT,Follow._GT_in_relationalOperator4077); if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 1085:8: -> relationalOperator(op=\">\")
					{
						retval.Template = TemplateGroup.GetInstanceOf("relationalOperator",
						new Dictionary<string, object>() { {"op", ">"} }
					);
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:1086:4: LE
				{
				DebugLocation(1086, 4);
				Match(input,LE,Follow._LE_in_relationalOperator4092); if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 1086:8: -> relationalOperator(op=\"<=\")
					{
						retval.Template = TemplateGroup.GetInstanceOf("relationalOperator",
						new Dictionary<string, object>() { {"op", "<="} }
					);
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// AS3T.g:1087:4: GE
				{
				DebugLocation(1087, 4);
				Match(input,GE,Follow._GE_in_relationalOperator4107); if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 1087:8: -> relationalOperator(op=\">=\")
					{
						retval.Template = TemplateGroup.GetInstanceOf("relationalOperator",
						new Dictionary<string, object>() { {"op", ">="} }
					);
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// AS3T.g:1088:4: IS
				{
				DebugLocation(1088, 4);
				Match(input,IS,Follow._IS_in_relationalOperator4122); if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 1088:7: -> rtti(
					{
						retval.Template = TemplateGroup.GetInstanceOf("rtti");
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// AS3T.g:1089:4: AS
				{
				DebugLocation(1089, 4);
				Match(input,AS,Follow._AS_in_relationalOperator4133); if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 1089:7: -> cast(
					{
						retval.Template = TemplateGroup.GetInstanceOf("cast");
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// AS3T.g:1090:4: 'instanceof'
				{
				DebugLocation(1090, 4);
				Match(input,250,Follow._250_in_relationalOperator4144); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalOperator", 111);
			LeaveRule("relationalOperator", 111);
			LeaveRule_relationalOperator();
		}
		DebugLocation(1091, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalOperator"); }
		return retval;

	}
	// $ANTLR end "relationalOperator"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();
	// $ANTLR start "shiftExpression"
	// AS3T.g:1094:1: shiftExpression : additiveExpression ( shiftOperator additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 112);
		TraceIn("shiftExpression", 112);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(1094, 1);
		try
		{
			// AS3T.g:1096:2: ( additiveExpression ( shiftOperator additiveExpression )* )
			DebugEnterAlt(1);
			// AS3T.g:1096:4: additiveExpression ( shiftOperator additiveExpression )*
			{
			DebugLocation(1096, 4);
			PushFollow(Follow._additiveExpression_in_shiftExpression4161);
			additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1097, 3);
			// AS3T.g:1097:3: ( shiftOperator additiveExpression )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_1 = input.LA(1);

				if ((LA86_1==BSR||LA86_1==SL||LA86_1==SR))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:1097:4: shiftOperator additiveExpression
					{
					DebugLocation(1097, 4);
					PushFollow(Follow._shiftOperator_in_shiftExpression4166);
					shiftOperator();
					PopFollow();
					if (state.failed) return retval;
					DebugLocation(1097, 18);
					PushFollow(Follow._additiveExpression_in_shiftExpression4168);
					additiveExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("shiftExpression", 112);
			LeaveRule("shiftExpression", 112);
			LeaveRule_shiftExpression();
		}
		DebugLocation(1098, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_shiftOperator();
	partial void LeaveRule_shiftOperator();
	// $ANTLR start "shiftOperator"
	// AS3T.g:1100:1: shiftOperator : ( SL | SR | BSR );
	[GrammarRule("shiftOperator")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> shiftOperator()
	{
		EnterRule_shiftOperator();
		EnterRule("shiftOperator", 113);
		TraceIn("shiftOperator", 113);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "shiftOperator");
		DebugLocation(1100, 1);
		try
		{
			// AS3T.g:1102:2: ( SL | SR | BSR )
			DebugEnterAlt(1);
			// AS3T.g:
			{
			DebugLocation(1102, 2);
			if (input.LA(1)==BSR||input.LA(1)==SL||input.LA(1)==SR)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("shiftOperator", 113);
			LeaveRule("shiftOperator", 113);
			LeaveRule_shiftOperator();
		}
		DebugLocation(1103, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftOperator"); }
		return retval;

	}
	// $ANTLR end "shiftOperator"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// AS3T.g:1106:1: additiveExpression : multiplicativeExpression ( additiveOperator multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 114);
		TraceIn("additiveExpression", 114);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(1106, 1);
		try
		{
			// AS3T.g:1108:2: ( multiplicativeExpression ( additiveOperator multiplicativeExpression )* )
			DebugEnterAlt(1);
			// AS3T.g:1108:4: multiplicativeExpression ( additiveOperator multiplicativeExpression )*
			{
			DebugLocation(1108, 4);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression4211);
			multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1108, 29);
			// AS3T.g:1108:29: ( additiveOperator multiplicativeExpression )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, false);
				int LA87_1 = input.LA(1);

				if ((LA87_1==MINUS||LA87_1==PLUS))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:1108:30: additiveOperator multiplicativeExpression
					{
					DebugLocation(1108, 30);
					PushFollow(Follow._additiveOperator_in_additiveExpression4214);
					additiveOperator();
					PopFollow();
					if (state.failed) return retval;
					DebugLocation(1108, 47);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression4216);
					multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("additiveExpression", 114);
			LeaveRule("additiveExpression", 114);
			LeaveRule_additiveExpression();
		}
		DebugLocation(1109, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_additiveOperator();
	partial void LeaveRule_additiveOperator();
	// $ANTLR start "additiveOperator"
	// AS3T.g:1111:1: additiveOperator : ( PLUS | MINUS );
	[GrammarRule("additiveOperator")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> additiveOperator()
	{
		EnterRule_additiveOperator();
		EnterRule("additiveOperator", 115);
		TraceIn("additiveOperator", 115);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "additiveOperator");
		DebugLocation(1111, 1);
		try
		{
			// AS3T.g:1113:2: ( PLUS | MINUS )
			DebugEnterAlt(1);
			// AS3T.g:
			{
			DebugLocation(1113, 2);
			if (input.LA(1)==MINUS||input.LA(1)==PLUS)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("additiveOperator", 115);
			LeaveRule("additiveOperator", 115);
			LeaveRule_additiveOperator();
		}
		DebugLocation(1114, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveOperator"); }
		return retval;

	}
	// $ANTLR end "additiveOperator"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// AS3T.g:1117:1: multiplicativeExpression : unaryExpression ( multiplicativeOperator unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 116);
		TraceIn("multiplicativeExpression", 116);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(1117, 1);
		try
		{
			// AS3T.g:1119:2: ( unaryExpression ( multiplicativeOperator unaryExpression )* )
			DebugEnterAlt(1);
			// AS3T.g:1119:4: unaryExpression ( multiplicativeOperator unaryExpression )*
			{
			DebugLocation(1119, 4);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression4255);
			unaryExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1120, 3);
			// AS3T.g:1120:3: ( multiplicativeOperator unaryExpression )*
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=2;
				try { DebugEnterDecision(88, false);
				int LA88_1 = input.LA(1);

				if ((LA88_1==DIV||LA88_1==MOD||LA88_1==STAR))
				{
					alt88 = 1;
				}


				} finally { DebugExitDecision(88); }
				switch ( alt88 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:1120:5: multiplicativeOperator unaryExpression
					{
					DebugLocation(1120, 5);
					PushFollow(Follow._multiplicativeOperator_in_multiplicativeExpression4261);
					multiplicativeOperator();
					PopFollow();
					if (state.failed) return retval;
					DebugLocation(1121, 4);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression4266);
					unaryExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop88;
				}
			}

			loop88:
				;

			} finally { DebugExitSubRule(88); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multiplicativeExpression", 116);
			LeaveRule("multiplicativeExpression", 116);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(1123, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_multiplicativeOperator();
	partial void LeaveRule_multiplicativeOperator();
	// $ANTLR start "multiplicativeOperator"
	// AS3T.g:1125:1: multiplicativeOperator : ( STAR | DIV | MOD );
	[GrammarRule("multiplicativeOperator")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> multiplicativeOperator()
	{
		EnterRule_multiplicativeOperator();
		EnterRule("multiplicativeOperator", 117);
		TraceIn("multiplicativeOperator", 117);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "multiplicativeOperator");
		DebugLocation(1125, 1);
		try
		{
			// AS3T.g:1127:2: ( STAR | DIV | MOD )
			DebugEnterAlt(1);
			// AS3T.g:
			{
			DebugLocation(1127, 2);
			if (input.LA(1)==DIV||input.LA(1)==MOD||input.LA(1)==STAR)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multiplicativeOperator", 117);
			LeaveRule("multiplicativeOperator", 117);
			LeaveRule_multiplicativeOperator();
		}
		DebugLocation(1128, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeOperator"); }
		return retval;

	}
	// $ANTLR end "multiplicativeOperator"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();
	// $ANTLR start "unaryExpression"
	// AS3T.g:1131:1: unaryExpression : (inc= INC unaryExpression |dec= DEC unaryExpression | MINUS unaryExpression | PLUS unaryExpression | unaryExpressionNotPlusMinus );
	[GrammarRule("unaryExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 118);
		TraceIn("unaryExpression", 118);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		IToken inc = default(IToken);
		IToken dec = default(IToken);

		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(1131, 1);
		try
		{
			// AS3T.g:1133:2: (inc= INC unaryExpression |dec= DEC unaryExpression | MINUS unaryExpression | PLUS unaryExpression | unaryExpressionNotPlusMinus )
			int alt89=5;
			try { DebugEnterDecision(89, false);
			switch (input.LA(1))
			{
			case INC:
				{
				alt89 = 1;
				}
				break;
			case DEC:
				{
				alt89 = 2;
				}
				break;
			case MINUS:
				{
				alt89 = 3;
				}
				break;
			case PLUS:
				{
				alt89 = 4;
				}
				break;
			case AS:
			case BNOT:
			case DECIMAL_LITERAL:
			case DYNAMIC:
			case E4X_ATTRI:
			case FALSE:
			case FLOAT_LITERAL:
			case FUNCTION:
			case GET:
			case HEX_LITERAL:
			case IDENT:
			case INTERNAL:
			case IS:
			case LBRACK:
			case LCURLY:
			case LNOT:
			case LPAREN:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OCTAL_LITERAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case REGEX_LITERAL:
			case SET:
			case STRING_LITERAL_DOUBLE:
			case STRING_LITERAL_SINGLE:
			case SUPER:
			case TRACE:
			case TRUE:
			case USE:
			case XML:
			case XML_LITERAL:
			case 244:
			case 256:
			case 257:
			case 258:
				{
				alt89 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:1133:4: inc= INC unaryExpression
				{
				DebugLocation(1133, 7);
				inc=(IToken)Match(input,INC,Follow._INC_in_unaryExpression4314); if (state.failed) return retval;
				DebugLocation(1133, 12);
				PushFollow(Follow._unaryExpression_in_unaryExpression4316);
				unaryExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:1134:4: dec= DEC unaryExpression
				{
				DebugLocation(1134, 7);
				dec=(IToken)Match(input,DEC,Follow._DEC_in_unaryExpression4323); if (state.failed) return retval;
				DebugLocation(1134, 12);
				PushFollow(Follow._unaryExpression_in_unaryExpression4325);
				unaryExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:1135:4: MINUS unaryExpression
				{
				DebugLocation(1135, 4);
				Match(input,MINUS,Follow._MINUS_in_unaryExpression4330); if (state.failed) return retval;
				DebugLocation(1135, 10);
				PushFollow(Follow._unaryExpression_in_unaryExpression4332);
				unaryExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// AS3T.g:1136:4: PLUS unaryExpression
				{
				DebugLocation(1136, 4);
				Match(input,PLUS,Follow._PLUS_in_unaryExpression4337); if (state.failed) return retval;
				DebugLocation(1136, 9);
				PushFollow(Follow._unaryExpression_in_unaryExpression4339);
				unaryExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// AS3T.g:1137:4: unaryExpressionNotPlusMinus
				{
				DebugLocation(1137, 4);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_unaryExpression4344);
				unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExpression", 118);
			LeaveRule("unaryExpression", 118);
			LeaveRule_unaryExpression();
		}
		DebugLocation(1138, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_unaryExpressionNotPlusMinus();
	partial void LeaveRule_unaryExpressionNotPlusMinus();
	// $ANTLR start "unaryExpressionNotPlusMinus"
	// AS3T.g:1140:1: unaryExpressionNotPlusMinus : ( 'delete' postfixExpression | 'void' unaryExpression | 'typeof' unaryExpression | LNOT unaryExpression | BNOT unaryExpression | postfixExpression );
	[GrammarRule("unaryExpressionNotPlusMinus")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> unaryExpressionNotPlusMinus()
	{
		EnterRule_unaryExpressionNotPlusMinus();
		EnterRule("unaryExpressionNotPlusMinus", 119);
		TraceIn("unaryExpressionNotPlusMinus", 119);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "unaryExpressionNotPlusMinus");
		DebugLocation(1140, 1);
		try
		{
			// AS3T.g:1142:2: ( 'delete' postfixExpression | 'void' unaryExpression | 'typeof' unaryExpression | LNOT unaryExpression | BNOT unaryExpression | postfixExpression )
			int alt90=6;
			try { DebugEnterDecision(90, false);
			switch (input.LA(1))
			{
			case 244:
				{
				alt90 = 1;
				}
				break;
			case 258:
				{
				alt90 = 2;
				}
				break;
			case 256:
				{
				alt90 = 3;
				}
				break;
			case LNOT:
				{
				alt90 = 4;
				}
				break;
			case BNOT:
				{
				alt90 = 5;
				}
				break;
			case AS:
			case DECIMAL_LITERAL:
			case DYNAMIC:
			case E4X_ATTRI:
			case FALSE:
			case FLOAT_LITERAL:
			case FUNCTION:
			case GET:
			case HEX_LITERAL:
			case IDENT:
			case INTERNAL:
			case IS:
			case LBRACK:
			case LCURLY:
			case LPAREN:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OCTAL_LITERAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case REGEX_LITERAL:
			case SET:
			case STRING_LITERAL_DOUBLE:
			case STRING_LITERAL_SINGLE:
			case SUPER:
			case TRACE:
			case TRUE:
			case USE:
			case XML:
			case XML_LITERAL:
			case 257:
				{
				alt90 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:1142:4: 'delete' postfixExpression
				{
				DebugLocation(1142, 4);
				Match(input,244,Follow._244_in_unaryExpressionNotPlusMinus4360); if (state.failed) return retval;
				DebugLocation(1142, 13);
				PushFollow(Follow._postfixExpression_in_unaryExpressionNotPlusMinus4362);
				postfixExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:1143:4: 'void' unaryExpression
				{
				DebugLocation(1143, 4);
				Match(input,258,Follow._258_in_unaryExpressionNotPlusMinus4368); if (state.failed) return retval;
				DebugLocation(1143, 11);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus4370);
				unaryExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:1144:4: 'typeof' unaryExpression
				{
				DebugLocation(1144, 4);
				Match(input,256,Follow._256_in_unaryExpressionNotPlusMinus4376); if (state.failed) return retval;
				DebugLocation(1144, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus4378);
				unaryExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// AS3T.g:1145:4: LNOT unaryExpression
				{
				DebugLocation(1145, 4);
				Match(input,LNOT,Follow._LNOT_in_unaryExpressionNotPlusMinus4384); if (state.failed) return retval;
				DebugLocation(1145, 9);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus4386);
				unaryExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// AS3T.g:1146:4: BNOT unaryExpression
				{
				DebugLocation(1146, 4);
				Match(input,BNOT,Follow._BNOT_in_unaryExpressionNotPlusMinus4392); if (state.failed) return retval;
				DebugLocation(1146, 9);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus4394);
				unaryExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// AS3T.g:1147:4: postfixExpression
				{
				DebugLocation(1147, 4);
				PushFollow(Follow._postfixExpression_in_unaryExpressionNotPlusMinus4400);
				postfixExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExpressionNotPlusMinus", 119);
			LeaveRule("unaryExpressionNotPlusMinus", 119);
			LeaveRule_unaryExpressionNotPlusMinus();
		}
		DebugLocation(1148, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpressionNotPlusMinus"); }
		return retval;

	}
	// $ANTLR end "unaryExpressionNotPlusMinus"

	partial void EnterRule_postfixExpression();
	partial void LeaveRule_postfixExpression();
	// $ANTLR start "postfixExpression"
	// AS3T.g:1155:1: postfixExpression : primaryExpression ( propOrIdent | DOT e4xExpression | E4X_DESC e4xExpression | LBRACK expression RBRACK | arguments )* ( INC | DEC )? ;
	[GrammarRule("postfixExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> postfixExpression()
	{
		EnterRule_postfixExpression();
		EnterRule("postfixExpression", 120);
		TraceIn("postfixExpression", 120);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "postfixExpression");
		DebugLocation(1155, 2);
		try
		{
			// AS3T.g:1156:2: ( primaryExpression ( propOrIdent | DOT e4xExpression | E4X_DESC e4xExpression | LBRACK expression RBRACK | arguments )* ( INC | DEC )? )
			DebugEnterAlt(1);
			// AS3T.g:1156:4: primaryExpression ( propOrIdent | DOT e4xExpression | E4X_DESC e4xExpression | LBRACK expression RBRACK | arguments )* ( INC | DEC )?
			{
			DebugLocation(1156, 4);
			PushFollow(Follow._primaryExpression_in_postfixExpression4414);
			primaryExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1157, 3);
			// AS3T.g:1157:3: ( propOrIdent | DOT e4xExpression | E4X_DESC e4xExpression | LBRACK expression RBRACK | arguments )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=6;
				try { DebugEnterDecision(91, false);
				switch (input.LA(1))
				{
				case DOT:
					{
					int LA91_2 = input.LA(2);

					if ((LA91_2==AS||LA91_2==DYNAMIC||LA91_2==GET||LA91_2==IDENT||(LA91_2>=INTERNAL && LA91_2<=IS)||LA91_2==NAMESPACE||LA91_2==PRIVATE||(LA91_2>=PROTECTED && LA91_2<=PUBLIC)||LA91_2==SET||LA91_2==SUPER||LA91_2==TRACE||LA91_2==USE||LA91_2==XML))
					{
						alt91 = 1;
					}
					else if ((LA91_2==E4X_ATTRI||LA91_2==LPAREN||LA91_2==STAR))
					{
						alt91 = 2;
					}


					}
					break;
				case E4X_DESC:
					{
					alt91 = 3;
					}
					break;
				case LBRACK:
					{
					alt91 = 4;
					}
					break;
				case LPAREN:
					{
					alt91 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:1158:13: propOrIdent
					{
					DebugLocation(1158, 13);
					PushFollow(Follow._propOrIdent_in_postfixExpression4433);
					propOrIdent();
					PopFollow();
					if (state.failed) return retval;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// AS3T.g:1161:13: DOT e4xExpression
					{
					DebugLocation(1161, 13);
					Match(input,DOT,Follow._DOT_in_postfixExpression4465); if (state.failed) return retval;
					DebugLocation(1161, 17);
					PushFollow(Follow._e4xExpression_in_postfixExpression4467);
					e4xExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// AS3T.g:1164:13: E4X_DESC e4xExpression
					{
					DebugLocation(1164, 13);
					Match(input,E4X_DESC,Follow._E4X_DESC_in_postfixExpression4499); if (state.failed) return retval;
					DebugLocation(1164, 22);
					PushFollow(Follow._e4xExpression_in_postfixExpression4501);
					e4xExpression();
					PopFollow();
					if (state.failed) return retval;

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// AS3T.g:1168:13: LBRACK expression RBRACK
					{
					DebugLocation(1168, 13);
					Match(input,LBRACK,Follow._LBRACK_in_postfixExpression4546); if (state.failed) return retval;
					DebugLocation(1168, 20);
					PushFollow(Follow._expression_in_postfixExpression4548);
					expression();
					PopFollow();
					if (state.failed) return retval;
					DebugLocation(1168, 31);
					Match(input,RBRACK,Follow._RBRACK_in_postfixExpression4550); if (state.failed) return retval;

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// AS3T.g:1172:13: arguments
					{
					DebugLocation(1172, 13);
					PushFollow(Follow._arguments_in_postfixExpression4583);
					arguments();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }

			DebugLocation(1176, 3);
			// AS3T.g:1176:3: ( INC | DEC )?
			int alt92=2;
			try { DebugEnterSubRule(92);
			try { DebugEnterDecision(92, false);
			int LA92_1 = input.LA(1);

			if ((LA92_1==DEC||LA92_1==INC))
			{
				alt92 = 1;
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:
				{
				DebugLocation(1176, 3);
				if (input.LA(1)==DEC||input.LA(1)==INC)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(92); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("postfixExpression", 120);
			LeaveRule("postfixExpression", 120);
			LeaveRule_postfixExpression();
		}
		DebugLocation(1180, 2);
		} finally { DebugExitRule(GrammarFileName, "postfixExpression"); }
		return retval;

	}
	// $ANTLR end "postfixExpression"

	partial void EnterRule_e4xExpression();
	partial void LeaveRule_e4xExpression();
	// $ANTLR start "e4xExpression"
	// AS3T.g:1182:1: e4xExpression : ( STAR | e4xAttributeIdentifier | e4xFilterPredicate );
	[GrammarRule("e4xExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> e4xExpression()
	{
		EnterRule_e4xExpression();
		EnterRule("e4xExpression", 121);
		TraceIn("e4xExpression", 121);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "e4xExpression");
		DebugLocation(1182, 1);
		try
		{
			// AS3T.g:1183:2: ( STAR | e4xAttributeIdentifier | e4xFilterPredicate )
			int alt93=3;
			try { DebugEnterDecision(93, false);
			switch (input.LA(1))
			{
			case STAR:
				{
				alt93 = 1;
				}
				break;
			case E4X_ATTRI:
				{
				alt93 = 2;
				}
				break;
			case LPAREN:
				{
				alt93 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:1183:4: STAR
				{
				DebugLocation(1183, 4);
				Match(input,STAR,Follow._STAR_in_e4xExpression4644); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:1184:4: e4xAttributeIdentifier
				{
				DebugLocation(1184, 4);
				PushFollow(Follow._e4xAttributeIdentifier_in_e4xExpression4649);
				e4xAttributeIdentifier();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:1185:4: e4xFilterPredicate
				{
				DebugLocation(1185, 4);
				PushFollow(Follow._e4xFilterPredicate_in_e4xExpression4654);
				e4xFilterPredicate();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("e4xExpression", 121);
			LeaveRule("e4xExpression", 121);
			LeaveRule_e4xExpression();
		}
		DebugLocation(1186, 1);
		} finally { DebugExitRule(GrammarFileName, "e4xExpression"); }
		return retval;

	}
	// $ANTLR end "e4xExpression"

	partial void EnterRule_e4xAttributeIdentifier();
	partial void LeaveRule_e4xAttributeIdentifier();
	// $ANTLR start "e4xAttributeIdentifier"
	// AS3T.g:1188:1: e4xAttributeIdentifier : E4X_ATTRI ( qualifiedIdent | STAR | LBRACK expression RBRACK ) ;
	[GrammarRule("e4xAttributeIdentifier")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> e4xAttributeIdentifier()
	{
		EnterRule_e4xAttributeIdentifier();
		EnterRule("e4xAttributeIdentifier", 122);
		TraceIn("e4xAttributeIdentifier", 122);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "e4xAttributeIdentifier");
		DebugLocation(1188, 1);
		try
		{
			// AS3T.g:1189:2: ( E4X_ATTRI ( qualifiedIdent | STAR | LBRACK expression RBRACK ) )
			DebugEnterAlt(1);
			// AS3T.g:1189:4: E4X_ATTRI ( qualifiedIdent | STAR | LBRACK expression RBRACK )
			{
			DebugLocation(1189, 4);
			Match(input,E4X_ATTRI,Follow._E4X_ATTRI_in_e4xAttributeIdentifier4665); if (state.failed) return retval;
			DebugLocation(1190, 3);
			// AS3T.g:1190:3: ( qualifiedIdent | STAR | LBRACK expression RBRACK )
			int alt94=3;
			try { DebugEnterSubRule(94);
			try { DebugEnterDecision(94, false);
			switch (input.LA(1))
			{
			case AS:
			case DYNAMIC:
			case GET:
			case IDENT:
			case INTERNAL:
			case IS:
			case NAMESPACE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SET:
			case SUPER:
			case TRACE:
			case USE:
			case XML:
				{
				alt94 = 1;
				}
				break;
			case STAR:
				{
				alt94 = 2;
				}
				break;
			case LBRACK:
				{
				alt94 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 94, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:1190:5: qualifiedIdent
				{
				DebugLocation(1190, 5);
				PushFollow(Follow._qualifiedIdent_in_e4xAttributeIdentifier4671);
				qualifiedIdent();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:1191:5: STAR
				{
				DebugLocation(1191, 5);
				Match(input,STAR,Follow._STAR_in_e4xAttributeIdentifier4677); if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:1192:5: LBRACK expression RBRACK
				{
				DebugLocation(1192, 5);
				Match(input,LBRACK,Follow._LBRACK_in_e4xAttributeIdentifier4683); if (state.failed) return retval;
				DebugLocation(1192, 12);
				PushFollow(Follow._expression_in_e4xAttributeIdentifier4685);
				expression();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(1192, 23);
				Match(input,RBRACK,Follow._RBRACK_in_e4xAttributeIdentifier4687); if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("e4xAttributeIdentifier", 122);
			LeaveRule("e4xAttributeIdentifier", 122);
			LeaveRule_e4xAttributeIdentifier();
		}
		DebugLocation(1194, 1);
		} finally { DebugExitRule(GrammarFileName, "e4xAttributeIdentifier"); }
		return retval;

	}
	// $ANTLR end "e4xAttributeIdentifier"

	partial void EnterRule_e4xFilterPredicate();
	partial void LeaveRule_e4xFilterPredicate();
	// $ANTLR start "e4xFilterPredicate"
	// AS3T.g:1196:1: e4xFilterPredicate : LPAREN expression RPAREN ;
	[GrammarRule("e4xFilterPredicate")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> e4xFilterPredicate()
	{
		EnterRule_e4xFilterPredicate();
		EnterRule("e4xFilterPredicate", 123);
		TraceIn("e4xFilterPredicate", 123);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "e4xFilterPredicate");
		DebugLocation(1196, 1);
		try
		{
			// AS3T.g:1197:2: ( LPAREN expression RPAREN )
			DebugEnterAlt(1);
			// AS3T.g:1197:4: LPAREN expression RPAREN
			{
			DebugLocation(1197, 4);
			Match(input,LPAREN,Follow._LPAREN_in_e4xFilterPredicate4702); if (state.failed) return retval;
			DebugLocation(1198, 3);
			PushFollow(Follow._expression_in_e4xFilterPredicate4706);
			expression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1199, 3);
			Match(input,RPAREN,Follow._RPAREN_in_e4xFilterPredicate4710); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("e4xFilterPredicate", 123);
			LeaveRule("e4xFilterPredicate", 123);
			LeaveRule_e4xFilterPredicate();
		}
		DebugLocation(1200, 1);
		} finally { DebugExitRule(GrammarFileName, "e4xFilterPredicate"); }
		return retval;

	}
	// $ANTLR end "e4xFilterPredicate"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// AS3T.g:1202:1: primaryExpression : ( 'undefined' | constant | arrayLiteral | objectLiteral | functionDefinition | newExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );
	[GrammarRule("primaryExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 124);
		TraceIn("primaryExpression", 124);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(1202, 1);
		try
		{
			// AS3T.g:1204:2: ( 'undefined' | constant | arrayLiteral | objectLiteral | functionDefinition | newExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent )
			int alt95=9;
			try { DebugEnterDecision(95, false);
			switch (input.LA(1))
			{
			case 257:
				{
				alt95 = 1;
				}
				break;
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOAT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case REGEX_LITERAL:
			case STRING_LITERAL_DOUBLE:
			case STRING_LITERAL_SINGLE:
			case TRUE:
			case XML_LITERAL:
				{
				alt95 = 2;
				}
				break;
			case LBRACK:
				{
				alt95 = 3;
				}
				break;
			case LCURLY:
				{
				alt95 = 4;
				}
				break;
			case FUNCTION:
				{
				alt95 = 5;
				}
				break;
			case NEW:
				{
				alt95 = 6;
				}
				break;
			case LPAREN:
				{
				alt95 = 7;
				}
				break;
			case E4X_ATTRI:
				{
				alt95 = 8;
				}
				break;
			case AS:
			case DYNAMIC:
			case GET:
			case IDENT:
			case INTERNAL:
			case IS:
			case NAMESPACE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SET:
			case SUPER:
			case TRACE:
			case USE:
			case XML:
				{
				alt95 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 95, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:1204:4: 'undefined'
				{
				DebugLocation(1204, 4);
				Match(input,257,Follow._257_in_primaryExpression4726); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:1205:4: constant
				{
				DebugLocation(1205, 4);
				PushFollow(Follow._constant_in_primaryExpression4731);
				constant();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:1206:4: arrayLiteral
				{
				DebugLocation(1206, 4);
				PushFollow(Follow._arrayLiteral_in_primaryExpression4736);
				arrayLiteral();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// AS3T.g:1207:4: objectLiteral
				{
				DebugLocation(1207, 4);
				PushFollow(Follow._objectLiteral_in_primaryExpression4741);
				objectLiteral();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// AS3T.g:1208:4: functionDefinition
				{
				DebugLocation(1208, 4);
				PushFollow(Follow._functionDefinition_in_primaryExpression4746);
				functionDefinition();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// AS3T.g:1209:4: newExpression
				{
				DebugLocation(1209, 4);
				PushFollow(Follow._newExpression_in_primaryExpression4751);
				newExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// AS3T.g:1210:4: encapsulatedExpression
				{
				DebugLocation(1210, 4);
				PushFollow(Follow._encapsulatedExpression_in_primaryExpression4756);
				encapsulatedExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// AS3T.g:1211:4: e4xAttributeIdentifier
				{
				DebugLocation(1211, 4);
				PushFollow(Follow._e4xAttributeIdentifier_in_primaryExpression4761);
				e4xAttributeIdentifier();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// AS3T.g:1212:4: qualifiedIdent
				{
				DebugLocation(1212, 4);
				PushFollow(Follow._qualifiedIdent_in_primaryExpression4766);
				qualifiedIdent();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryExpression", 124);
			LeaveRule("primaryExpression", 124);
			LeaveRule_primaryExpression();
		}
		DebugLocation(1214, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_propOrIdent();
	partial void LeaveRule_propOrIdent();
	// $ANTLR start "propOrIdent"
	// AS3T.g:1216:1: propOrIdent : DOT qualifiedIdent -> indirect(name=$qualifiedIdent.text);
	[GrammarRule("propOrIdent")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> propOrIdent()
	{
		EnterRule_propOrIdent();
		EnterRule("propOrIdent", 125);
		TraceIn("propOrIdent", 125);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> qualifiedIdent25 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "propOrIdent");
		DebugLocation(1216, 1);
		try
		{
			// AS3T.g:1217:2: ( DOT qualifiedIdent -> indirect(name=$qualifiedIdent.text))
			DebugEnterAlt(1);
			// AS3T.g:1218:3: DOT qualifiedIdent
			{
			DebugLocation(1218, 3);
			Match(input,DOT,Follow._DOT_in_propOrIdent4781); if (state.failed) return retval;
			DebugLocation(1218, 7);
			PushFollow(Follow._qualifiedIdent_in_propOrIdent4783);
			qualifiedIdent25=qualifiedIdent();
			PopFollow();
			if (state.failed) return retval;

			// TEMPLATE REWRITE
			if (state.backtracking == 0)
			{
				// 1218:22: -> indirect(name=$qualifiedIdent.text)
				{
					retval.Template = TemplateGroup.GetInstanceOf("indirect",
					new Dictionary<string, object>() { {"name", (qualifiedIdent25!=null?input.ToString(qualifiedIdent25.Start,qualifiedIdent25.Stop):default(string))} }
				);
				}


				((TokenRewriteStream)input).Replace(
					retval.Start.TokenIndex,
					input.LT(-1).TokenIndex,
					retval.Template);

			}

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propOrIdent", 125);
			LeaveRule("propOrIdent", 125);
			LeaveRule_propOrIdent();
		}
		DebugLocation(1225, 1);
		} finally { DebugExitRule(GrammarFileName, "propOrIdent"); }
		return retval;

	}
	// $ANTLR end "propOrIdent"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// AS3T.g:1227:1: constant : ( xmlLiteral -> xml(x=$xmlLiteral.text)| regexpLiteral -> regex(x=$regexpLiteral.text)| number | stringLiteral | TRUE | FALSE | NULL -> null();
	[GrammarRule("constant")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 126);
		TraceIn("constant", 126);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		TemplateParserRuleReturnScope<StringTemplate, IToken> xmlLiteral26 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);
		TemplateParserRuleReturnScope<StringTemplate, IToken> regexpLiteral27 = default(TemplateParserRuleReturnScope<StringTemplate, IToken>);

		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(1227, 1);
		try
		{
			// AS3T.g:1228:2: ( xmlLiteral -> xml(x=$xmlLiteral.text)| regexpLiteral -> regex(x=$regexpLiteral.text)| number | stringLiteral | TRUE | FALSE | NULL -> null()
			int alt96=7;
			try { DebugEnterDecision(96, false);
			switch (input.LA(1))
			{
			case XML_LITERAL:
				{
				alt96 = 1;
				}
				break;
			case REGEX_LITERAL:
				{
				alt96 = 2;
				}
				break;
			case DECIMAL_LITERAL:
			case FLOAT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
				{
				alt96 = 3;
				}
				break;
			case STRING_LITERAL_DOUBLE:
			case STRING_LITERAL_SINGLE:
				{
				alt96 = 4;
				}
				break;
			case TRUE:
				{
				alt96 = 5;
				}
				break;
			case FALSE:
				{
				alt96 = 6;
				}
				break;
			case NULL:
				{
				alt96 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:1228:4: xmlLiteral
				{
				DebugLocation(1228, 4);
				PushFollow(Follow._xmlLiteral_in_constant4810);
				xmlLiteral26=xmlLiteral();
				PopFollow();
				if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 1228:15: -> xml(x=$xmlLiteral.text)
					{
						retval.Template = TemplateGroup.GetInstanceOf("xml",
						new Dictionary<string, object>() { {"x", (xmlLiteral26!=null?input.ToString(xmlLiteral26.Start,xmlLiteral26.Stop):default(string))} }
					);
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:1229:4: regexpLiteral
				{
				DebugLocation(1229, 4);
				PushFollow(Follow._regexpLiteral_in_constant4824);
				regexpLiteral27=regexpLiteral();
				PopFollow();
				if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 1229:19: -> regex(x=$regexpLiteral.text)
					{
						retval.Template = TemplateGroup.GetInstanceOf("regex",
						new Dictionary<string, object>() { {"x", (regexpLiteral27!=null?input.ToString(regexpLiteral27.Start,regexpLiteral27.Stop):default(string))} }
					);
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// AS3T.g:1230:4: number
				{
				DebugLocation(1230, 4);
				PushFollow(Follow._number_in_constant4839);
				number();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// AS3T.g:1231:4: stringLiteral
				{
				DebugLocation(1231, 4);
				PushFollow(Follow._stringLiteral_in_constant4845);
				stringLiteral();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// AS3T.g:1232:4: TRUE
				{
				DebugLocation(1232, 4);
				Match(input,TRUE,Follow._TRUE_in_constant4851); if (state.failed) return retval;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// AS3T.g:1233:4: FALSE
				{
				DebugLocation(1233, 4);
				Match(input,FALSE,Follow._FALSE_in_constant4856); if (state.failed) return retval;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// AS3T.g:1234:4: NULL
				{
				DebugLocation(1234, 4);
				Match(input,NULL,Follow._NULL_in_constant4861); if (state.failed) return retval;

				// TEMPLATE REWRITE
				if (state.backtracking == 0)
				{
					// 1234:9: -> null(
					{
						retval.Template = TemplateGroup.GetInstanceOf("null");
					}


					((TokenRewriteStream)input).Replace(
						retval.Start.TokenIndex,
						input.LT(-1).TokenIndex,
						retval.Template);

				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("constant", 126);
			LeaveRule("constant", 126);
			LeaveRule_constant();
		}
		DebugLocation(1235, 1);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_stringLiteral();
	partial void LeaveRule_stringLiteral();
	// $ANTLR start "stringLiteral"
	// AS3T.g:1237:1: stringLiteral : ( stringLiteralDouble | stringLiteralSingle );
	[GrammarRule("stringLiteral")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> stringLiteral()
	{
		EnterRule_stringLiteral();
		EnterRule("stringLiteral", 127);
		TraceIn("stringLiteral", 127);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "stringLiteral");
		DebugLocation(1237, 4);
		try
		{
			// AS3T.g:1238:5: ( stringLiteralDouble | stringLiteralSingle )
			int alt97=2;
			try { DebugEnterDecision(97, false);
			int LA97_1 = input.LA(1);

			if ((LA97_1==STRING_LITERAL_DOUBLE))
			{
				alt97 = 1;
			}
			else if ((LA97_1==STRING_LITERAL_SINGLE))
			{
				alt97 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 97, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:1238:7: stringLiteralDouble
				{
				DebugLocation(1238, 7);
				PushFollow(Follow._stringLiteralDouble_in_stringLiteral4881);
				stringLiteralDouble();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:1238:29: stringLiteralSingle
				{
				DebugLocation(1238, 29);
				PushFollow(Follow._stringLiteralSingle_in_stringLiteral4885);
				stringLiteralSingle();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stringLiteral", 127);
			LeaveRule("stringLiteral", 127);
			LeaveRule_stringLiteral();
		}
		DebugLocation(1239, 4);
		} finally { DebugExitRule(GrammarFileName, "stringLiteral"); }
		return retval;

	}
	// $ANTLR end "stringLiteral"

	partial void EnterRule_stringLiteralDouble();
	partial void LeaveRule_stringLiteralDouble();
	// $ANTLR start "stringLiteralDouble"
	// AS3T.g:1241:1: stringLiteralDouble : STRING_LITERAL_DOUBLE ;
	[GrammarRule("stringLiteralDouble")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> stringLiteralDouble()
	{
		EnterRule_stringLiteralDouble();
		EnterRule("stringLiteralDouble", 128);
		TraceIn("stringLiteralDouble", 128);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "stringLiteralDouble");
		DebugLocation(1241, 4);
		try
		{
			// AS3T.g:1242:5: ( STRING_LITERAL_DOUBLE )
			DebugEnterAlt(1);
			// AS3T.g:1242:7: STRING_LITERAL_DOUBLE
			{
			DebugLocation(1242, 7);
			Match(input,STRING_LITERAL_DOUBLE,Follow._STRING_LITERAL_DOUBLE_in_stringLiteralDouble4902); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stringLiteralDouble", 128);
			LeaveRule("stringLiteralDouble", 128);
			LeaveRule_stringLiteralDouble();
		}
		DebugLocation(1243, 4);
		} finally { DebugExitRule(GrammarFileName, "stringLiteralDouble"); }
		return retval;

	}
	// $ANTLR end "stringLiteralDouble"

	partial void EnterRule_stringLiteralSingle();
	partial void LeaveRule_stringLiteralSingle();
	// $ANTLR start "stringLiteralSingle"
	// AS3T.g:1245:1: stringLiteralSingle : STRING_LITERAL_SINGLE ;
	[GrammarRule("stringLiteralSingle")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> stringLiteralSingle()
	{
		EnterRule_stringLiteralSingle();
		EnterRule("stringLiteralSingle", 129);
		TraceIn("stringLiteralSingle", 129);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "stringLiteralSingle");
		DebugLocation(1245, 4);
		try
		{
			// AS3T.g:1246:5: ( STRING_LITERAL_SINGLE )
			DebugEnterAlt(1);
			// AS3T.g:1246:7: STRING_LITERAL_SINGLE
			{
			DebugLocation(1246, 7);
			Match(input,STRING_LITERAL_SINGLE,Follow._STRING_LITERAL_SINGLE_in_stringLiteralSingle4920); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stringLiteralSingle", 129);
			LeaveRule("stringLiteralSingle", 129);
			LeaveRule_stringLiteralSingle();
		}
		DebugLocation(1247, 4);
		} finally { DebugExitRule(GrammarFileName, "stringLiteralSingle"); }
		return retval;

	}
	// $ANTLR end "stringLiteralSingle"

	partial void EnterRule_number();
	partial void LeaveRule_number();
	// $ANTLR start "number"
	// AS3T.g:1250:1: number : ( HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOAT_LITERAL );
	[GrammarRule("number")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> number()
	{
		EnterRule_number();
		EnterRule("number", 130);
		TraceIn("number", 130);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(1250, 1);
		try
		{
			// AS3T.g:1250:8: ( HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOAT_LITERAL )
			DebugEnterAlt(1);
			// AS3T.g:
			{
			DebugLocation(1250, 8);
			if (input.LA(1)==DECIMAL_LITERAL||input.LA(1)==FLOAT_LITERAL||input.LA(1)==HEX_LITERAL||input.LA(1)==OCTAL_LITERAL)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("number", 130);
			LeaveRule("number", 130);
			LeaveRule_number();
		}
		DebugLocation(1254, 1);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return retval;

	}
	// $ANTLR end "number"

	partial void EnterRule_xmlLiteral();
	partial void LeaveRule_xmlLiteral();
	// $ANTLR start "xmlLiteral"
	// AS3T.g:1257:1: xmlLiteral : XML_LITERAL ;
	[GrammarRule("xmlLiteral")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> xmlLiteral()
	{
		EnterRule_xmlLiteral();
		EnterRule("xmlLiteral", 131);
		TraceIn("xmlLiteral", 131);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "xmlLiteral");
		DebugLocation(1257, 1);
		try
		{
			// AS3T.g:1259:2: ( XML_LITERAL )
			DebugEnterAlt(1);
			// AS3T.g:1259:4: XML_LITERAL
			{
			DebugLocation(1259, 4);
			Match(input,XML_LITERAL,Follow._XML_LITERAL_in_xmlLiteral4968); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0)
			{
				retval.Template = new StringTemplate(TemplateGroup,input.ToString(retval.Start,input.LT(-1)));
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("xmlLiteral", 131);
			LeaveRule("xmlLiteral", 131);
			LeaveRule_xmlLiteral();
		}
		DebugLocation(1260, 1);
		} finally { DebugExitRule(GrammarFileName, "xmlLiteral"); }
		return retval;

	}
	// $ANTLR end "xmlLiteral"

	partial void EnterRule_regexpLiteral();
	partial void LeaveRule_regexpLiteral();
	// $ANTLR start "regexpLiteral"
	// AS3T.g:1263:1: regexpLiteral : REGEX_LITERAL ;
	[GrammarRule("regexpLiteral")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> regexpLiteral()
	{
		EnterRule_regexpLiteral();
		EnterRule("regexpLiteral", 132);
		TraceIn("regexpLiteral", 132);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "regexpLiteral");
		DebugLocation(1263, 1);
		try
		{
			// AS3T.g:1264:2: ( REGEX_LITERAL )
			DebugEnterAlt(1);
			// AS3T.g:1264:4: REGEX_LITERAL
			{
			DebugLocation(1264, 4);
			Match(input,REGEX_LITERAL,Follow._REGEX_LITERAL_in_regexpLiteral4980); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("regexpLiteral", 132);
			LeaveRule("regexpLiteral", 132);
			LeaveRule_regexpLiteral();
		}
		DebugLocation(1265, 1);
		} finally { DebugExitRule(GrammarFileName, "regexpLiteral"); }
		return retval;

	}
	// $ANTLR end "regexpLiteral"

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();
	// $ANTLR start "newExpression"
	// AS3T.g:1267:1: newExpression : NEW fullNewSubexpression arguments ;
	[GrammarRule("newExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 133);
		TraceIn("newExpression", 133);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(1267, 1);
		try
		{
			// AS3T.g:1268:2: ( NEW fullNewSubexpression arguments )
			DebugEnterAlt(1);
			// AS3T.g:1268:4: NEW fullNewSubexpression arguments
			{
			DebugLocation(1268, 4);
			Match(input,NEW,Follow._NEW_in_newExpression4991); if (state.failed) return retval;
			DebugLocation(1268, 8);
			PushFollow(Follow._fullNewSubexpression_in_newExpression4993);
			fullNewSubexpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1268, 29);
			PushFollow(Follow._arguments_in_newExpression4995);
			arguments();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("newExpression", 133);
			LeaveRule("newExpression", 133);
			LeaveRule_newExpression();
		}
		DebugLocation(1269, 1);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return retval;

	}
	// $ANTLR end "newExpression"

	partial void EnterRule_fullNewSubexpression();
	partial void LeaveRule_fullNewSubexpression();
	// $ANTLR start "fullNewSubexpression"
	// AS3T.g:1271:1: fullNewSubexpression : ( primaryExpression ) (d= DOT qualifiedIdent | brackets )* ;
	[GrammarRule("fullNewSubexpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> fullNewSubexpression()
	{
		EnterRule_fullNewSubexpression();
		EnterRule("fullNewSubexpression", 134);
		TraceIn("fullNewSubexpression", 134);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		IToken d = default(IToken);

		try { DebugEnterRule(GrammarFileName, "fullNewSubexpression");
		DebugLocation(1271, 1);
		try
		{
			// AS3T.g:1272:2: ( ( primaryExpression ) (d= DOT qualifiedIdent | brackets )* )
			DebugEnterAlt(1);
			// AS3T.g:1272:4: ( primaryExpression ) (d= DOT qualifiedIdent | brackets )*
			{
			DebugLocation(1272, 4);
			// AS3T.g:1272:4: ( primaryExpression )
			DebugEnterAlt(1);
			// AS3T.g:1272:6: primaryExpression
			{
			DebugLocation(1272, 6);
			PushFollow(Follow._primaryExpression_in_fullNewSubexpression5009);
			primaryExpression();
			PopFollow();
			if (state.failed) return retval;

			}

			DebugLocation(1274, 3);
			// AS3T.g:1274:3: (d= DOT qualifiedIdent | brackets )*
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=3;
				try { DebugEnterDecision(98, false);
				int LA98_1 = input.LA(1);

				if ((LA98_1==DOT))
				{
					alt98 = 1;
				}
				else if ((LA98_1==LBRACK))
				{
					alt98 = 2;
				}


				} finally { DebugExitDecision(98); }
				switch ( alt98 )
				{
				case 1:
					DebugEnterAlt(1);
					// AS3T.g:1274:5: d= DOT qualifiedIdent
					{
					DebugLocation(1274, 6);
					d=(IToken)Match(input,DOT,Follow._DOT_in_fullNewSubexpression5022); if (state.failed) return retval;
					DebugLocation(1274, 11);
					PushFollow(Follow._qualifiedIdent_in_fullNewSubexpression5024);
					qualifiedIdent();
					PopFollow();
					if (state.failed) return retval;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// AS3T.g:1275:5: brackets
					{
					DebugLocation(1275, 5);
					PushFollow(Follow._brackets_in_fullNewSubexpression5031);
					brackets();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop98;
				}
			}

			loop98:
				;

			} finally { DebugExitSubRule(98); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fullNewSubexpression", 134);
			LeaveRule("fullNewSubexpression", 134);
			LeaveRule_fullNewSubexpression();
		}
		DebugLocation(1277, 1);
		} finally { DebugExitRule(GrammarFileName, "fullNewSubexpression"); }
		return retval;

	}
	// $ANTLR end "fullNewSubexpression"

	partial void EnterRule_propertyOperator();
	partial void LeaveRule_propertyOperator();
	// $ANTLR start "propertyOperator"
	// AS3T.g:1279:1: propertyOperator : ( DOT qualifiedIdent | brackets );
	[GrammarRule("propertyOperator")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> propertyOperator()
	{
		EnterRule_propertyOperator();
		EnterRule("propertyOperator", 135);
		TraceIn("propertyOperator", 135);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "propertyOperator");
		DebugLocation(1279, 1);
		try
		{
			// AS3T.g:1280:2: ( DOT qualifiedIdent | brackets )
			int alt99=2;
			try { DebugEnterDecision(99, false);
			int LA99_1 = input.LA(1);

			if ((LA99_1==DOT))
			{
				alt99 = 1;
			}
			else if ((LA99_1==LBRACK))
			{
				alt99 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 99, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:1280:4: DOT qualifiedIdent
				{
				DebugLocation(1280, 4);
				Match(input,DOT,Follow._DOT_in_propertyOperator5048); if (state.failed) return retval;
				DebugLocation(1280, 8);
				PushFollow(Follow._qualifiedIdent_in_propertyOperator5050);
				qualifiedIdent();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// AS3T.g:1281:4: brackets
				{
				DebugLocation(1281, 4);
				PushFollow(Follow._brackets_in_propertyOperator5055);
				brackets();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyOperator", 135);
			LeaveRule("propertyOperator", 135);
			LeaveRule_propertyOperator();
		}
		DebugLocation(1282, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyOperator"); }
		return retval;

	}
	// $ANTLR end "propertyOperator"

	partial void EnterRule_brackets();
	partial void LeaveRule_brackets();
	// $ANTLR start "brackets"
	// AS3T.g:1284:1: brackets : LBRACK expressionList RBRACK ;
	[GrammarRule("brackets")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> brackets()
	{
		EnterRule_brackets();
		EnterRule("brackets", 136);
		TraceIn("brackets", 136);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "brackets");
		DebugLocation(1284, 1);
		try
		{
			// AS3T.g:1285:2: ( LBRACK expressionList RBRACK )
			DebugEnterAlt(1);
			// AS3T.g:1285:4: LBRACK expressionList RBRACK
			{
			DebugLocation(1285, 4);
			Match(input,LBRACK,Follow._LBRACK_in_brackets5066); if (state.failed) return retval;
			DebugLocation(1285, 11);
			PushFollow(Follow._expressionList_in_brackets5068);
			expressionList();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1285, 26);
			Match(input,RBRACK,Follow._RBRACK_in_brackets5070); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("brackets", 136);
			LeaveRule("brackets", 136);
			LeaveRule_brackets();
		}
		DebugLocation(1286, 1);
		} finally { DebugExitRule(GrammarFileName, "brackets"); }
		return retval;

	}
	// $ANTLR end "brackets"

	partial void EnterRule_encapsulatedExpression();
	partial void LeaveRule_encapsulatedExpression();
	// $ANTLR start "encapsulatedExpression"
	// AS3T.g:1288:1: encapsulatedExpression : LPAREN assignmentExpression RPAREN ;
	[GrammarRule("encapsulatedExpression")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> encapsulatedExpression()
	{
		EnterRule_encapsulatedExpression();
		EnterRule("encapsulatedExpression", 137);
		TraceIn("encapsulatedExpression", 137);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "encapsulatedExpression");
		DebugLocation(1288, 1);
		try
		{
			// AS3T.g:1289:2: ( LPAREN assignmentExpression RPAREN )
			DebugEnterAlt(1);
			// AS3T.g:1289:4: LPAREN assignmentExpression RPAREN
			{
			DebugLocation(1289, 4);
			Match(input,LPAREN,Follow._LPAREN_in_encapsulatedExpression5081); if (state.failed) return retval;
			DebugLocation(1289, 11);
			PushFollow(Follow._assignmentExpression_in_encapsulatedExpression5083);
			assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1289, 32);
			Match(input,RPAREN,Follow._RPAREN_in_encapsulatedExpression5085); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("encapsulatedExpression", 137);
			LeaveRule("encapsulatedExpression", 137);
			LeaveRule_encapsulatedExpression();
		}
		DebugLocation(1291, 1);
		} finally { DebugExitRule(GrammarFileName, "encapsulatedExpression"); }
		return retval;

	}
	// $ANTLR end "encapsulatedExpression"

	partial void EnterRule_functionDefinition();
	partial void LeaveRule_functionDefinition();
	// $ANTLR start "functionDefinition"
	// AS3T.g:1296:1: functionDefinition : FUNCTION parameterDeclarationList ( typeExpression )? block ;
	[GrammarRule("functionDefinition")]
	private TemplateParserRuleReturnScope<StringTemplate, IToken> functionDefinition()
	{
		EnterRule_functionDefinition();
		EnterRule("functionDefinition", 138);
		TraceIn("functionDefinition", 138);
		TemplateParserRuleReturnScope<StringTemplate, IToken> retval = new TemplateParserRuleReturnScope<StringTemplate, IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "functionDefinition");
		DebugLocation(1296, 1);
		try
		{
			// AS3T.g:1297:2: ( FUNCTION parameterDeclarationList ( typeExpression )? block )
			DebugEnterAlt(1);
			// AS3T.g:1297:4: FUNCTION parameterDeclarationList ( typeExpression )? block
			{
			DebugLocation(1297, 4);
			Match(input,FUNCTION,Follow._FUNCTION_in_functionDefinition5102); if (state.failed) return retval;
			DebugLocation(1297, 13);
			PushFollow(Follow._parameterDeclarationList_in_functionDefinition5104);
			parameterDeclarationList();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(1297, 38);
			// AS3T.g:1297:38: ( typeExpression )?
			int alt100=2;
			try { DebugEnterSubRule(100);
			try { DebugEnterDecision(100, false);
			int LA100_1 = input.LA(1);

			if ((LA100_1==COLON||LA100_1==STAR||LA100_1==258))
			{
				alt100 = 1;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// AS3T.g:1297:38: typeExpression
				{
				DebugLocation(1297, 38);
				PushFollow(Follow._typeExpression_in_functionDefinition5106);
				typeExpression();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(100); }

			DebugLocation(1297, 54);
			PushFollow(Follow._block_in_functionDefinition5109);
			block();
			PopFollow();
			if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionDefinition", 138);
			LeaveRule("functionDefinition", 138);
			LeaveRule_functionDefinition();
		}
		DebugLocation(1298, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDefinition"); }
		return retval;

	}
	// $ANTLR end "functionDefinition"

	partial void EnterRule_synpred1_AS3T_fragment();
	partial void LeaveRule_synpred1_AS3T_fragment();

	// $ANTLR start synpred1_AS3T
	private void synpred1_AS3T_fragment()
	{
		EnterRule_synpred1_AS3T_fragment();
		EnterRule("synpred1_AS3T_fragment", 139);
		TraceIn("synpred1_AS3T_fragment", 139);
		try
		{
			// AS3T.g:348:4: ( modifiers CLASS )
			DebugEnterAlt(1);
			// AS3T.g:348:5: modifiers CLASS
			{
			DebugLocation(348, 5);
			PushFollow(Follow._modifiers_in_synpred1_AS3T536);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(348, 15);
			Match(input,CLASS,Follow._CLASS_in_synpred1_AS3T538); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_AS3T_fragment", 139);
			LeaveRule("synpred1_AS3T_fragment", 139);
			LeaveRule_synpred1_AS3T_fragment();
		}
	}
	// $ANTLR end synpred1_AS3T

	partial void EnterRule_synpred2_AS3T_fragment();
	partial void LeaveRule_synpred2_AS3T_fragment();

	// $ANTLR start synpred2_AS3T
	private void synpred2_AS3T_fragment()
	{
		EnterRule_synpred2_AS3T_fragment();
		EnterRule("synpred2_AS3T_fragment", 140);
		TraceIn("synpred2_AS3T_fragment", 140);
		try
		{
			// AS3T.g:349:4: ( modifiers INTERFACE )
			DebugEnterAlt(1);
			// AS3T.g:349:5: modifiers INTERFACE
			{
			DebugLocation(349, 5);
			PushFollow(Follow._modifiers_in_synpred2_AS3T549);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(349, 15);
			Match(input,INTERFACE,Follow._INTERFACE_in_synpred2_AS3T551); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_AS3T_fragment", 140);
			LeaveRule("synpred2_AS3T_fragment", 140);
			LeaveRule_synpred2_AS3T_fragment();
		}
	}
	// $ANTLR end synpred2_AS3T

	partial void EnterRule_synpred3_AS3T_fragment();
	partial void LeaveRule_synpred3_AS3T_fragment();

	// $ANTLR start synpred3_AS3T
	private void synpred3_AS3T_fragment()
	{
		EnterRule_synpred3_AS3T_fragment();
		EnterRule("synpred3_AS3T_fragment", 141);
		TraceIn("synpred3_AS3T_fragment", 141);
		try
		{
			// AS3T.g:374:7: ( LBRACK IDENT )
			DebugEnterAlt(1);
			// AS3T.g:374:8: LBRACK IDENT
			{
			DebugLocation(374, 8);
			Match(input,LBRACK,Follow._LBRACK_in_synpred3_AS3T697); if (state.failed) return;
			DebugLocation(374, 15);
			Match(input,IDENT,Follow._IDENT_in_synpred3_AS3T699); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_AS3T_fragment", 141);
			LeaveRule("synpred3_AS3T_fragment", 141);
			LeaveRule_synpred3_AS3T_fragment();
		}
	}
	// $ANTLR end synpred3_AS3T

	partial void EnterRule_synpred4_AS3T_fragment();
	partial void LeaveRule_synpred4_AS3T_fragment();

	// $ANTLR start synpred4_AS3T
	private void synpred4_AS3T_fragment()
	{
		EnterRule_synpred4_AS3T_fragment();
		EnterRule("synpred4_AS3T_fragment", 142);
		TraceIn("synpred4_AS3T_fragment", 142);
		try
		{
			// AS3T.g:375:7: ( modifiers NAMESPACE )
			DebugEnterAlt(1);
			// AS3T.g:375:8: modifiers NAMESPACE
			{
			DebugLocation(375, 8);
			PushFollow(Follow._modifiers_in_synpred4_AS3T713);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(375, 18);
			Match(input,NAMESPACE,Follow._NAMESPACE_in_synpred4_AS3T715); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_AS3T_fragment", 142);
			LeaveRule("synpred4_AS3T_fragment", 142);
			LeaveRule_synpred4_AS3T_fragment();
		}
	}
	// $ANTLR end synpred4_AS3T

	partial void EnterRule_synpred5_AS3T_fragment();
	partial void LeaveRule_synpred5_AS3T_fragment();

	// $ANTLR start synpred5_AS3T
	private void synpred5_AS3T_fragment()
	{
		EnterRule_synpred5_AS3T_fragment();
		EnterRule("synpred5_AS3T_fragment", 143);
		TraceIn("synpred5_AS3T_fragment", 143);
		try
		{
			// AS3T.g:376:13: ( modifiers CLASS )
			DebugEnterAlt(1);
			// AS3T.g:376:14: modifiers CLASS
			{
			DebugLocation(376, 14);
			PushFollow(Follow._modifiers_in_synpred5_AS3T735);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(376, 24);
			Match(input,CLASS,Follow._CLASS_in_synpred5_AS3T737); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_AS3T_fragment", 143);
			LeaveRule("synpred5_AS3T_fragment", 143);
			LeaveRule_synpred5_AS3T_fragment();
		}
	}
	// $ANTLR end synpred5_AS3T

	partial void EnterRule_synpred6_AS3T_fragment();
	partial void LeaveRule_synpred6_AS3T_fragment();

	// $ANTLR start synpred6_AS3T
	private void synpred6_AS3T_fragment()
	{
		EnterRule_synpred6_AS3T_fragment();
		EnterRule("synpred6_AS3T_fragment", 144);
		TraceIn("synpred6_AS3T_fragment", 144);
		try
		{
			// AS3T.g:377:7: ( modifiers INTERFACE )
			DebugEnterAlt(1);
			// AS3T.g:377:8: modifiers INTERFACE
			{
			DebugLocation(377, 8);
			PushFollow(Follow._modifiers_in_synpred6_AS3T751);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(377, 18);
			Match(input,INTERFACE,Follow._INTERFACE_in_synpred6_AS3T753); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_AS3T_fragment", 144);
			LeaveRule("synpred6_AS3T_fragment", 144);
			LeaveRule_synpred6_AS3T_fragment();
		}
	}
	// $ANTLR end synpred6_AS3T

	partial void EnterRule_synpred7_AS3T_fragment();
	partial void LeaveRule_synpred7_AS3T_fragment();

	// $ANTLR start synpred7_AS3T
	private void synpred7_AS3T_fragment()
	{
		EnterRule_synpred7_AS3T_fragment();
		EnterRule("synpred7_AS3T_fragment", 145);
		TraceIn("synpred7_AS3T_fragment", 145);
		try
		{
			// AS3T.g:378:7: ( modifiers FUNCTION )
			DebugEnterAlt(1);
			// AS3T.g:378:8: modifiers FUNCTION
			{
			DebugLocation(378, 8);
			PushFollow(Follow._modifiers_in_synpred7_AS3T767);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(378, 18);
			Match(input,FUNCTION,Follow._FUNCTION_in_synpred7_AS3T769); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred7_AS3T_fragment", 145);
			LeaveRule("synpred7_AS3T_fragment", 145);
			LeaveRule_synpred7_AS3T_fragment();
		}
	}
	// $ANTLR end synpred7_AS3T

	partial void EnterRule_synpred8_AS3T_fragment();
	partial void LeaveRule_synpred8_AS3T_fragment();

	// $ANTLR start synpred8_AS3T
	private void synpred8_AS3T_fragment()
	{
		EnterRule_synpred8_AS3T_fragment();
		EnterRule("synpred8_AS3T_fragment", 146);
		TraceIn("synpred8_AS3T_fragment", 146);
		try
		{
			// AS3T.g:379:7: ( modifiers varOrConst )
			DebugEnterAlt(1);
			// AS3T.g:379:8: modifiers varOrConst
			{
			DebugLocation(379, 8);
			PushFollow(Follow._modifiers_in_synpred8_AS3T783);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(379, 18);
			PushFollow(Follow._varOrConst_in_synpred8_AS3T785);
			varOrConst();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_AS3T_fragment", 146);
			LeaveRule("synpred8_AS3T_fragment", 146);
			LeaveRule_synpred8_AS3T_fragment();
		}
	}
	// $ANTLR end synpred8_AS3T

	partial void EnterRule_synpred9_AS3T_fragment();
	partial void LeaveRule_synpred9_AS3T_fragment();

	// $ANTLR start synpred9_AS3T
	private void synpred9_AS3T_fragment()
	{
		EnterRule_synpred9_AS3T_fragment();
		EnterRule("synpred9_AS3T_fragment", 147);
		TraceIn("synpred9_AS3T_fragment", 147);
		try
		{
			// AS3T.g:468:4: ( LBRACK IDENT )
			DebugEnterAlt(1);
			// AS3T.g:468:5: LBRACK IDENT
			{
			DebugLocation(468, 5);
			Match(input,LBRACK,Follow._LBRACK_in_synpred9_AS3T1229); if (state.failed) return;
			DebugLocation(468, 12);
			Match(input,IDENT,Follow._IDENT_in_synpred9_AS3T1231); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_AS3T_fragment", 147);
			LeaveRule("synpred9_AS3T_fragment", 147);
			LeaveRule_synpred9_AS3T_fragment();
		}
	}
	// $ANTLR end synpred9_AS3T

	partial void EnterRule_synpred10_AS3T_fragment();
	partial void LeaveRule_synpred10_AS3T_fragment();

	// $ANTLR start synpred10_AS3T
	private void synpred10_AS3T_fragment()
	{
		EnterRule_synpred10_AS3T_fragment();
		EnterRule("synpred10_AS3T_fragment", 148);
		TraceIn("synpred10_AS3T_fragment", 148);
		try
		{
			// AS3T.g:469:4: ( modifiers varOrConst )
			DebugEnterAlt(1);
			// AS3T.g:469:5: modifiers varOrConst
			{
			DebugLocation(469, 5);
			PushFollow(Follow._modifiers_in_synpred10_AS3T1242);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(469, 15);
			PushFollow(Follow._varOrConst_in_synpred10_AS3T1244);
			varOrConst();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_AS3T_fragment", 148);
			LeaveRule("synpred10_AS3T_fragment", 148);
			LeaveRule_synpred10_AS3T_fragment();
		}
	}
	// $ANTLR end synpred10_AS3T

	partial void EnterRule_synpred11_AS3T_fragment();
	partial void LeaveRule_synpred11_AS3T_fragment();

	// $ANTLR start synpred11_AS3T
	private void synpred11_AS3T_fragment()
	{
		EnterRule_synpred11_AS3T_fragment();
		EnterRule("synpred11_AS3T_fragment", 149);
		TraceIn("synpred11_AS3T_fragment", 149);
		try
		{
			// AS3T.g:470:4: ( modifiers FUNCTION )
			DebugEnterAlt(1);
			// AS3T.g:470:5: modifiers FUNCTION
			{
			DebugLocation(470, 5);
			PushFollow(Follow._modifiers_in_synpred11_AS3T1257);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(470, 15);
			Match(input,FUNCTION,Follow._FUNCTION_in_synpred11_AS3T1259); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred11_AS3T_fragment", 149);
			LeaveRule("synpred11_AS3T_fragment", 149);
			LeaveRule_synpred11_AS3T_fragment();
		}
	}
	// $ANTLR end synpred11_AS3T

	partial void EnterRule_synpred12_AS3T_fragment();
	partial void LeaveRule_synpred12_AS3T_fragment();

	// $ANTLR start synpred12_AS3T
	private void synpred12_AS3T_fragment()
	{
		EnterRule_synpred12_AS3T_fragment();
		EnterRule("synpred12_AS3T_fragment", 150);
		TraceIn("synpred12_AS3T_fragment", 150);
		try
		{
			// AS3T.g:515:5: ( LCURLY )
			DebugEnterAlt(1);
			// AS3T.g:515:6: LCURLY
			{
			DebugLocation(515, 6);
			Match(input,LCURLY,Follow._LCURLY_in_synpred12_AS3T1441); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_AS3T_fragment", 150);
			LeaveRule("synpred12_AS3T_fragment", 150);
			LeaveRule_synpred12_AS3T_fragment();
		}
	}
	// $ANTLR end synpred12_AS3T

	partial void EnterRule_synpred13_AS3T_fragment();
	partial void LeaveRule_synpred13_AS3T_fragment();

	// $ANTLR start synpred13_AS3T
	private void synpred13_AS3T_fragment()
	{
		EnterRule_synpred13_AS3T_fragment();
		EnterRule("synpred13_AS3T_fragment", 151);
		TraceIn("synpred13_AS3T_fragment", 151);
		try
		{
			// AS3T.g:648:4: ( LCURLY )
			DebugEnterAlt(1);
			// AS3T.g:648:5: LCURLY
			{
			DebugLocation(648, 5);
			Match(input,LCURLY,Follow._LCURLY_in_synpred13_AS3T2015); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_AS3T_fragment", 151);
			LeaveRule("synpred13_AS3T_fragment", 151);
			LeaveRule_synpred13_AS3T_fragment();
		}
	}
	// $ANTLR end synpred13_AS3T

	partial void EnterRule_synpred14_AS3T_fragment();
	partial void LeaveRule_synpred14_AS3T_fragment();

	// $ANTLR start synpred14_AS3T
	private void synpred14_AS3T_fragment()
	{
		EnterRule_synpred14_AS3T_fragment();
		EnterRule("synpred14_AS3T_fragment", 152);
		TraceIn("synpred14_AS3T_fragment", 152);
		try
		{
			// AS3T.g:682:4: ( ELSE )
			DebugEnterAlt(1);
			// AS3T.g:682:5: ELSE
			{
			DebugLocation(682, 5);
			Match(input,ELSE,Follow._ELSE_in_synpred14_AS3T2176); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_AS3T_fragment", 152);
			LeaveRule("synpred14_AS3T_fragment", 152);
			LeaveRule_synpred14_AS3T_fragment();
		}
	}
	// $ANTLR end synpred14_AS3T

	partial void EnterRule_synpred15_AS3T_fragment();
	partial void LeaveRule_synpred15_AS3T_fragment();

	// $ANTLR start synpred15_AS3T
	private void synpred15_AS3T_fragment()
	{
		EnterRule_synpred15_AS3T_fragment();
		EnterRule("synpred15_AS3T_fragment", 153);
		TraceIn("synpred15_AS3T_fragment", 153);
		try
		{
			// AS3T.g:850:7: ( namespaceName DBL_COLON )
			DebugEnterAlt(1);
			// AS3T.g:850:8: namespaceName DBL_COLON
			{
			DebugLocation(850, 8);
			PushFollow(Follow._namespaceName_in_synpred15_AS3T2978);
			namespaceName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(850, 22);
			Match(input,DBL_COLON,Follow._DBL_COLON_in_synpred15_AS3T2980); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_AS3T_fragment", 153);
			LeaveRule("synpred15_AS3T_fragment", 153);
			LeaveRule_synpred15_AS3T_fragment();
		}
	}
	// $ANTLR end synpred15_AS3T

	partial void EnterRule_synpred16_AS3T_fragment();
	partial void LeaveRule_synpred16_AS3T_fragment();

	// $ANTLR start synpred16_AS3T
	private void synpred16_AS3T_fragment()
	{
		EnterRule_synpred16_AS3T_fragment();
		EnterRule("synpred16_AS3T_fragment", 154);
		TraceIn("synpred16_AS3T_fragment", 154);
		try
		{
			// AS3T.g:992:30: ( assignmentOperator )
			DebugEnterAlt(1);
			// AS3T.g:992:31: assignmentOperator
			{
			DebugLocation(992, 31);
			PushFollow(Follow._assignmentOperator_in_synpred16_AS3T3654);
			assignmentOperator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_AS3T_fragment", 154);
			LeaveRule("synpred16_AS3T_fragment", 154);
			LeaveRule_synpred16_AS3T_fragment();
		}
	}
	// $ANTLR end synpred16_AS3T
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA3 dfa3;
	private DFA7 dfa7;
	private DFA17 dfa17;
	private DFA19 dfa19;
	private DFA20 dfa20;
	private DFA45 dfa45;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this, SpecialStateTransition3 );
		dfa7 = new DFA7( this, SpecialStateTransition7 );
		dfa17 = new DFA17( this, SpecialStateTransition17 );
		dfa19 = new DFA19( this );
		dfa20 = new DFA20( this, SpecialStateTransition20 );
		dfa45 = new DFA45( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x1C\xFFFF";
		private const string DFA3_eofS =
			"\x1C\xFFFF";
		private const string DFA3_minS =
			"\x1\x22\x1\xFFFF\xC\x22\x2\xFFFF\xC\x22";
		private const string DFA3_maxS =
			"\x1\xFD\x1\xFFFF\xC\xFD\x2\xFFFF\xC\xFD";
		private const string DFA3_acceptS =
			"\x1\xFFFF\x1\x1\xC\xFFFF\x1\x2\x1\x3\xC\xFFFF";
		private const string DFA3_specialS =
			"\x1\x0\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x2\xFFFF\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1"+
			"\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\xE\x19\xFFFF\x1\xC\x25\xFFFF\x1\x2\xA\xFFFF\x1\x1\x1\xF\x1\xFFFF"+
				"\x1\x6\x3B\xFFFF\x1\x4\x2\xFFFF\x1\x5\x1\x3\x17\xFFFF\x1\x7\x2C\xFFFF"+
				"\x1\x9\x1\xA\x1\x8\x3\xFFFF\x1\xD\x1\xFFFF\x1\xB",
				"",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"",
				"",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19",
				"\x1\xE\x19\xFFFF\x1\x1A\x25\xFFFF\x1\x10\xB\xFFFF\x1\xF\x1\xFFFF\x1"+
				"\x14\x3B\xFFFF\x1\x12\x2\xFFFF\x1\x13\x1\x11\x17\xFFFF\x1\x15\x2C\xFFFF"+
				"\x1\x17\x1\x18\x1\x16\x3\xFFFF\x1\x1B\x1\xFFFF\x1\x19"
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "347:2: ( as2IncludeDirective | ( modifiers CLASS )=> as2ClassDefinition | ( modifiers INTERFACE )=> as2InterfaceDefinition )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition3(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA3_1 = input.LA(1);
		int index3_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA3_1==INCLUDE_DIRECTIVE)) {s = 1;}

				else if ((LA3_1==IDENT)) {s = 2;}

				else if ((LA3_1==PUBLIC)) {s = 3;}

				else if ((LA3_1==PRIVATE)) {s = 4;}

				else if ((LA3_1==PROTECTED)) {s = 5;}

				else if ((LA3_1==INTERNAL)) {s = 6;}

				else if ((LA3_1==STATIC)) {s = 7;}

				else if ((LA3_1==247)) {s = 8;}

				else if ((LA3_1==245)) {s = 9;}

				else if ((LA3_1==246)) {s = 10;}

				else if ((LA3_1==253)) {s = 11;}

				else if ((LA3_1==DYNAMIC)) {s = 12;}

				else if ((LA3_1==251)) {s = 13;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((LA3_1==CLASS) && (EvaluatePredicate(synpred1_AS3T_fragment))) {s = 14;}

				else if ((LA3_1==IDENT)) {s = 16;}

				else if ((LA3_1==PUBLIC)) {s = 17;}

				else if ((LA3_1==PRIVATE)) {s = 18;}

				else if ((LA3_1==PROTECTED)) {s = 19;}

				else if ((LA3_1==INTERNAL)) {s = 20;}

				else if ((LA3_1==STATIC)) {s = 21;}

				else if ((LA3_1==247)) {s = 22;}

				else if ((LA3_1==245)) {s = 23;}

				else if ((LA3_1==246)) {s = 24;}

				else if ((LA3_1==253)) {s = 25;}

				else if ((LA3_1==DYNAMIC)) {s = 26;}

				else if ((LA3_1==251)) {s = 27;}

				else if ((LA3_1==INTERFACE) && (EvaluatePredicate(synpred2_AS3T_fragment))) {s = 15;}

				input.Seek(index3_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 3, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x1D4\xFFFF";
		private const string DFA7_eofS =
			"\x1D4\xFFFF";
		private const string DFA7_minS =
			"\x1\xF\x2\xFFFF\x3\xF\x9\x22\x1\xF\x1\x22\x1\xF\x2\xFFFF\x3\xF\x44\xFFFF"+
			"\xB\x0\x1E\xFFFF\xC\x0\x20\xFFFF\xC\x0\x7\xFFFF\xC\x0\x7\xFFFF\xC\x0"+
			"\x7\xFFFF\xC\x0\x7\xFFFF\xC\x0\x6\xFFFF\xC\x0\x6\xFFFF\xC\x0\x6\xFFFF"+
			"\xC\x0\x6\xFFFF\xC\x0\x6\xFFFF\xC\x0\x1F\xFFFF\xC\x0\x30\xFFFF\x16\x0"+
			"\x1\xFFFF";
		private const string DFA7_maxS =
			"\x1\x102\x2\xFFFF\x1\xFC\x1\x102\xC\xFD\x1\xFC\x2\xFFFF\x3\xE8\x44\xFFFF"+
			"\xB\x0\x1E\xFFFF\xC\x0\x20\xFFFF\xC\x0\x7\xFFFF\xC\x0\x7\xFFFF\xC\x0"+
			"\x7\xFFFF\xC\x0\x7\xFFFF\xC\x0\x6\xFFFF\xC\x0\x6\xFFFF\xC\x0\x6\xFFFF"+
			"\xC\x0\x6\xFFFF\xC\x0\x6\xFFFF\xC\x0\x1F\xFFFF\xC\x0\x30\xFFFF\x16\x0"+
			"\x1\xFFFF";
		private const string DFA7_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\xF\xFFFF\x1\x6\x1\x7\x3\xFFFF\x1\xA\x29\xFFFF\x1"+
			"\x3\x4E\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x2\x9\x26\xFFFF\x1\x5\x1\x6\x1"+
			"\x7\x1\x8\x2\x9\xD\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x2\x9\xD\xFFFF\x1\x5"+
			"\x1\x6\x1\x7\x1\x8\x2\x9\xD\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x2\x9\xD\xFFFF"+
			"\x1\x5\x1\x6\x1\x7\x1\x8\x2\x9\xC\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x2\x9"+
			"\xC\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x2\x9\xC\xFFFF\x1\x5\x1\x6\x1\x7\x1"+
			"\x8\x2\x9\xC\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x2\x9\xC\xFFFF\x1\x5\x1\x6"+
			"\x1\x7\x1\x8\x2\x9\x25\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x2\x9\x5\x5\x19"+
			"\xFFFF\xB\x8\x17\xFFFF\x1\x4";
		private const string DFA7_specialS =
			"\x1\x0\x4\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x2\xFFFF\x1\xE\x46\xFFFF\x1\xF\x1\x10\x1\x11"+
			"\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1E\xFFFF\x1"+
			"\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1"+
			"\x24\x1\x25\x20\xFFFF\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C"+
			"\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x7\xFFFF\x1\x32\x1\x33\x1\x34\x1"+
			"\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1\x3B\x1\x3C\x1\x3D\x7\xFFFF"+
			"\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\x1\x45\x1\x46\x1\x47"+
			"\x1\x48\x1\x49\x7\xFFFF\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E\x1\x4F\x1"+
			"\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x7\xFFFF\x1\x56\x1\x57\x1\x58"+
			"\x1\x59\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61\x6\xFFFF"+
			"\x1\x62\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68\x1\x69\x1\x6A\x1\x6B"+
			"\x1\x6C\x1\x6D\x6\xFFFF\x1\x6E\x1\x6F\x1\x70\x1\x71\x1\x72\x1\x73\x1"+
			"\x74\x1\x75\x1\x76\x1\x77\x1\x78\x1\x79\x6\xFFFF\x1\x7A\x1\x7B\x1\x7C"+
			"\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\x1\x82\x1\x83\x1\x84\x1\x85\x6\xFFFF"+
			"\x1\x86\x1\x87\x1\x88\x1\x89\x1\x8A\x1\x8B\x1\x8C\x1\x8D\x1\x8E\x1\x8F"+
			"\x1\x90\x1\x91\x6\xFFFF\x1\x92\x1\x93\x1\x94\x1\x95\x1\x96\x1\x97\x1"+
			"\x98\x1\x99\x1\x9A\x1\x9B\x1\x9C\x1\x9D\x1F\xFFFF\x1\x9E\x1\x9F\x1\xA0"+
			"\x1\xA1\x1\xA2\x1\xA3\x1\xA4\x1\xA5\x1\xA6\x1\xA7\x1\xA8\x1\xA9\x30\xFFFF"+
			"\x1\xAA\x1\xAB\x1\xAC\x1\xAD\x1\xAE\x1\xAF\x1\xB0\x1\xB1\x1\xB2\x1\xB3"+
			"\x1\xB4\x1\xB5\x1\xB6\x1\xB7\x1\xB8\x1\xB9\x1\xBA\x1\xBB\x1\xBC\x1\xBD"+
			"\x1\xBE\x1\xBF\x1\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x1\x17\x5\xFFFF\x1\x17\x3\xFFFF\x1\x17\x8\xFFFF\x1\x12\x7\xFFFF\x1"+
				"\x16\x1\xFFFF\x1\x17\x3\xFFFF\x2\x17\x2\xFFFF\x1\x17\x3\xFFFF\x1\x17"+
				"\x3\xFFFF\x1\xF\x1\x17\x11\xFFFF\x3\x17\x8\xFFFF\x1\x14\x3\xFFFF\x1"+
				"\x17\x2\xFFFF\x1\x17\x1\x5\x2\xFFFF\x1\x17\x3\xFFFF\x1\x1\x2\xFFFF\x1"+
				"\x17\x1\xFFFF\x1\x13\x1\xFFFF\x1\x9\x1\x17\x2\xFFFF\x1\x4\x1\x17\x7"+
				"\xFFFF\x1\x17\x2\xFFFF\x1\x17\x7\xFFFF\x1\x17\x7\xFFFF\x1\x11\x2\xFFFF"+
				"\x1\x17\x4\xFFFF\x1\x17\x3\xFFFF\x1\x17\x8\xFFFF\x1\x17\x6\xFFFF\x1"+
				"\x7\x2\xFFFF\x1\x8\x1\x6\x6\xFFFF\x1\x17\x2\xFFFF\x1\x17\x2\xFFFF\x2"+
				"\x17\x9\xFFFF\x1\xA\x2\xFFFF\x4\x17\x5\xFFFF\x2\x17\x6\xFFFF\x1\x3\x1"+
				"\x15\x6\xFFFF\x1\x17\x1\xFFFF\x1\x17\x1\xFFFF\x1\x17\x5\xFFFF\x1\x17"+
				"\x5\xFFFF\x1\x17\x1\xC\x1\xD\x1\xB\x1\xFFFF\x1\x2\x1\xFFFF\x1\x10\x1"+
				"\xFFFF\x1\xE\x5\x17",
				"",
				"",
				"\x2\x17\x1\xFFFF\x2\x17\x3\xFFFF\x2\x17\x3\xFFFF\x4\x17\x7\xFFFF\x1"+
				"\x17\x8\xFFFF\x1\x17\x5\xFFFF\x2\x17\x1\xFFFF\x1\x17\x4\xFFFF\x1\x17"+
				"\x7\xFFFF\x1\x17\x16\xFFFF\x1\x17\x1\xFFFF\x1\x17\xC\xFFFF\x1\x17\x4"+
				"\xFFFF\x4\x17\x1\xFFFF\x1\x17\x7\xFFFF\x4\x17\x6\xFFFF\x2\x17\x1\xFFFF"+
				"\x1\x17\x2\xFFFF\x1\x17\x1\xFFFF\x1\x41\x6\xFFFF\x1\x17\xD\xFFFF\x2"+
				"\x17\xB\xFFFF\x1\x17\xA\xFFFF\x1\x17\x1\xFFFF\x2\x17\x1\xFFFF\x4\x17"+
				"\x3\xFFFF\x2\x17\x27\xFFFF\x1\x17\x7\xFFFF\x1\x17\x1\xFFFF\x1\x17",
				"\x1\x62\x5\xFFFF\x1\x17\x11\xFFFF\x1\x17\x8\xFFFF\x2\x17\xA\xFFFF\x1"+
				"\x5F\x1\x17\x11\xFFFF\x2\x17\x9\xFFFF\x1\x17\x3\xFFFF\x1\x63\x2\xFFFF"+
				"\x1\x17\x1\x5B\x9\xFFFF\x1\x17\x3\xFFFF\x1\x17\x1\x61\x2\xFFFF\x2\x17"+
				"\x7\xFFFF\x1\x17\x2\xFFFF\x1\x17\x7\xFFFF\x1\x17\x7\xFFFF\x1\x60\x2"+
				"\xFFFF\x1\x17\x4\xFFFF\x1\x17\x3\xFFFF\x1\x17\x8\xFFFF\x1\x17\x6\xFFFF"+
				"\x1\x17\x2\xFFFF\x2\x17\x2\xFFFF\x1\x17\x3\xFFFF\x1\x17\x6\xFFFF\x1"+
				"\x64\xC\xFFFF\x2\x17\x1\x65\x6\xFFFF\x1\x5E\x1\x17\x6\xFFFF\x1\x5C\xB"+
				"\xFFFF\x1\x5D\x5\xFFFF\x1\x17\x5\xFFFF\x1\x17\xB\xFFFF\x3\x17",
				"\x2\x17\x1\xFFFF\x2\x17\x3\xFFFF\x2\x17\x3\xFFFF\x4\x17\x2\xFFFF\x1"+
				"\x91\x4\xFFFF\x1\x17\x2\xFFFF\x1\x95\x4\xFFFF\x2\x17\x5\xFFFF\x2\x17"+
				"\x1\xFFFF\x1\x17\x2\xFFFF\x1\x8E\x1\xFFFF\x1\x17\x7\xFFFF\x1\x17\x13"+
				"\xFFFF\x1\x93\x2\xFFFF\x1\x17\x1\xFFFF\x1\x17\x2\xFFFF\x1\x84\x9\xFFFF"+
				"\x1\x17\x1\xFFFF\x1\x92\x1\xFFFF\x1\x88\x4\x17\x1\xFFFF\x1\x17\x7\xFFFF"+
				"\x4\x17\x6\xFFFF\x2\x17\x1\xFFFF\x1\x17\x2\xFFFF\x1\x17\x1\xFFFF\x1"+
				"\x90\x6\xFFFF\x1\x17\xD\xFFFF\x2\x17\x5\xFFFF\x1\x86\x2\xFFFF\x1\x87"+
				"\x1\x85\x1\xFFFF\x1\x17\xA\xFFFF\x1\x17\x1\xFFFF\x2\x17\x1\xFFFF\x4"+
				"\x17\x2\xFFFF\x1\x89\x2\x17\x12\xFFFF\x1\x94\x14\xFFFF\x1\x17\x2\xFFFF"+
				"\x1\x8B\x1\x8C\x1\x8A\x2\xFFFF\x1\x17\x1\x8F\x1\x17\x1\x8D",
				"\x1\xBD\x7\xFFFF\x1\xC1\x4\xFFFF\x1\x17\xC\xFFFF\x1\xBA\x1D\xFFFF\x1"+
				"\xBF\x7\xFFFF\x1\xB0\xB\xFFFF\x1\xBE\x1\xFFFF\x1\xB4\x1F\xFFFF\x1\xBC"+
				"\x1B\xFFFF\x1\xB2\x2\xFFFF\x1\xB3\x1\xB1\x17\xFFFF\x1\xB5\x14\xFFFF"+
				"\x1\xC0\x17\xFFFF\x1\xB7\x1\xB8\x1\xB6\x3\xFFFF\x1\xBB\x1\xFFFF\x1\xB9",
				"\x1\xD0\x7\xFFFF\x1\xD4\x4\xFFFF\x1\x17\xC\xFFFF\x1\xCD\x1D\xFFFF\x1"+
				"\xD2\x7\xFFFF\x1\xC3\xB\xFFFF\x1\xD1\x1\xFFFF\x1\xC7\x1F\xFFFF\x1\xCF"+
				"\x1B\xFFFF\x1\xC5\x2\xFFFF\x1\xC6\x1\xC4\x17\xFFFF\x1\xC8\x14\xFFFF"+
				"\x1\xD3\x17\xFFFF\x1\xCA\x1\xCB\x1\xC9\x3\xFFFF\x1\xCE\x1\xFFFF\x1\xCC",
				"\x1\xE3\x7\xFFFF\x1\xE7\x4\xFFFF\x1\x17\xC\xFFFF\x1\xE0\x1D\xFFFF\x1"+
				"\xE5\x7\xFFFF\x1\xD6\xB\xFFFF\x1\xE4\x1\xFFFF\x1\xDA\x1F\xFFFF\x1\xE2"+
				"\x1B\xFFFF\x1\xD8\x2\xFFFF\x1\xD9\x1\xD7\x17\xFFFF\x1\xDB\x14\xFFFF"+
				"\x1\xE6\x17\xFFFF\x1\xDD\x1\xDE\x1\xDC\x3\xFFFF\x1\xE1\x1\xFFFF\x1\xDF",
				"\x1\xF6\x7\xFFFF\x1\xFA\x4\xFFFF\x1\x17\xC\xFFFF\x1\xF3\x1D\xFFFF\x1"+
				"\xF8\x7\xFFFF\x1\xE9\xB\xFFFF\x1\xF7\x1\xFFFF\x1\xED\x1F\xFFFF\x1\xF5"+
				"\x1B\xFFFF\x1\xEB\x2\xFFFF\x1\xEC\x1\xEA\x17\xFFFF\x1\xEE\x14\xFFFF"+
				"\x1\xF9\x17\xFFFF\x1\xF0\x1\xF1\x1\xEF\x3\xFFFF\x1\xF4\x1\xFFFF\x1\xF2",
				"\x1\x109\x7\xFFFF\x1\x10D\x11\xFFFF\x1\x106\x1D\xFFFF\x1\x10B\x7\xFFFF"+
				"\x1\xFC\xB\xFFFF\x1\x10A\x1\xFFFF\x1\x100\x1F\xFFFF\x1\x108\x1B\xFFFF"+
				"\x1\xFE\x2\xFFFF\x1\xFF\x1\xFD\x17\xFFFF\x1\x101\x14\xFFFF\x1\x10C\x17"+
				"\xFFFF\x1\x103\x1\x104\x1\x102\x3\xFFFF\x1\x107\x1\xFFFF\x1\x105",
				"\x1\x11B\x7\xFFFF\x1\x11F\x11\xFFFF\x1\x118\x1D\xFFFF\x1\x11D\x7\xFFFF"+
				"\x1\x10E\xB\xFFFF\x1\x11C\x1\xFFFF\x1\x112\x1F\xFFFF\x1\x11A\x1B\xFFFF"+
				"\x1\x110\x2\xFFFF\x1\x111\x1\x10F\x17\xFFFF\x1\x113\x14\xFFFF\x1\x11E"+
				"\x17\xFFFF\x1\x115\x1\x116\x1\x114\x3\xFFFF\x1\x119\x1\xFFFF\x1\x117",
				"\x1\x12D\x7\xFFFF\x1\x131\x11\xFFFF\x1\x12A\x1D\xFFFF\x1\x12F\x7\xFFFF"+
				"\x1\x120\xB\xFFFF\x1\x12E\x1\xFFFF\x1\x124\x1F\xFFFF\x1\x12C\x1B\xFFFF"+
				"\x1\x122\x2\xFFFF\x1\x123\x1\x121\x17\xFFFF\x1\x125\x14\xFFFF\x1\x130"+
				"\x17\xFFFF\x1\x127\x1\x128\x1\x126\x3\xFFFF\x1\x12B\x1\xFFFF\x1\x129",
				"\x1\x13F\x7\xFFFF\x1\x143\x11\xFFFF\x1\x13C\x1D\xFFFF\x1\x141\x7\xFFFF"+
				"\x1\x132\xB\xFFFF\x1\x140\x1\xFFFF\x1\x136\x1F\xFFFF\x1\x13E\x1B\xFFFF"+
				"\x1\x134\x2\xFFFF\x1\x135\x1\x133\x17\xFFFF\x1\x137\x14\xFFFF\x1\x142"+
				"\x17\xFFFF\x1\x139\x1\x13A\x1\x138\x3\xFFFF\x1\x13D\x1\xFFFF\x1\x13B",
				"\x1\x151\x7\xFFFF\x1\x155\x11\xFFFF\x1\x14E\x1D\xFFFF\x1\x153\x7\xFFFF"+
				"\x1\x144\xB\xFFFF\x1\x152\x1\xFFFF\x1\x148\x1F\xFFFF\x1\x150\x1B\xFFFF"+
				"\x1\x146\x2\xFFFF\x1\x147\x1\x145\x17\xFFFF\x1\x149\x14\xFFFF\x1\x154"+
				"\x17\xFFFF\x1\x14B\x1\x14C\x1\x14A\x3\xFFFF\x1\x14F\x1\xFFFF\x1\x14D",
				"\x2\x17\x1\xFFFF\x2\x17\x3\xFFFF\x2\x17\x3\xFFFF\x4\x17\x2\xFFFF\x1"+
				"\x163\x4\xFFFF\x1\x17\x2\xFFFF\x1\x167\x5\xFFFF\x1\x17\x5\xFFFF\x2\x17"+
				"\x1\xFFFF\x1\x17\x2\xFFFF\x1\x160\x1\xFFFF\x1\x17\x7\xFFFF\x1\x17\x13"+
				"\xFFFF\x1\x165\x2\xFFFF\x1\x17\x1\xFFFF\x1\x17\x2\xFFFF\x1\x156\x9\xFFFF"+
				"\x1\x17\x1\xFFFF\x1\x164\x1\xFFFF\x1\x15A\x4\x17\x1\xFFFF\x1\x17\x7"+
				"\xFFFF\x4\x17\x6\xFFFF\x2\x17\x1\xFFFF\x1\x17\x2\xFFFF\x1\x17\x1\xFFFF"+
				"\x1\x162\x6\xFFFF\x1\x17\xD\xFFFF\x2\x17\x5\xFFFF\x1\x158\x2\xFFFF\x1"+
				"\x159\x1\x157\x1\xFFFF\x1\x17\xA\xFFFF\x1\x17\x1\xFFFF\x2\x17\x1\xFFFF"+
				"\x4\x17\x2\xFFFF\x1\x15B\x2\x17\x12\xFFFF\x1\x166\x14\xFFFF\x1\x17\x2"+
				"\xFFFF\x1\x15D\x1\x15E\x1\x15C\x2\xFFFF\x1\x17\x1\x161\x1\x17\x1\x15F",
				"\x1\x18E\x7\xFFFF\x1\x192\x11\xFFFF\x1\x18B\x1D\xFFFF\x1\x190\x7\xFFFF"+
				"\x1\x181\xB\xFFFF\x1\x18F\x1\xFFFF\x1\x185\x1F\xFFFF\x1\x18D\x1B\xFFFF"+
				"\x1\x183\x2\xFFFF\x1\x184\x1\x182\x17\xFFFF\x1\x186\x14\xFFFF\x1\x191"+
				"\x17\xFFFF\x1\x188\x1\x189\x1\x187\x3\xFFFF\x1\x18C\x1\xFFFF\x1\x18A",
				"\x2\x17\x1\xFFFF\x2\x17\x3\xFFFF\x2\x17\x3\xFFFF\x4\x17\x7\xFFFF\x1"+
				"\x17\x8\xFFFF\x1\x17\x5\xFFFF\x2\x17\x1\xFFFF\x1\x17\x4\xFFFF\x1\x17"+
				"\x7\xFFFF\x1\x17\x16\xFFFF\x1\x17\x1\xFFFF\x1\x17\x2\xFFFF\x1\x193\x9"+
				"\xFFFF\x1\x17\x3\xFFFF\x1\x197\x4\x17\x1\xFFFF\x1\x17\x7\xFFFF\x4\x17"+
				"\x6\xFFFF\x2\x17\x1\xFFFF\x1\x17\x2\xFFFF\x1\x17\x8\xFFFF\x1\x17\xD"+
				"\xFFFF\x2\x17\x5\xFFFF\x1\x195\x2\xFFFF\x1\x196\x1\x194\x1\xFFFF\x1"+
				"\x17\xA\xFFFF\x1\x17\x1\xFFFF\x2\x17\x1\xFFFF\x4\x17\x3\xFFFF\x2\x17"+
				"\x27\xFFFF\x1\x17\x7\xFFFF\x1\x17\x1\xFFFF\x1\x17",
				"",
				"",
				"\x1\x1BA\x2C\xFFFF\x1\x1B7\x21\xFFFF\x1\x1B1\x3\xFFFF\x1\x1B3\xE\xFFFF"+
				"\x1\x1B9\xE\xFFFF\x1\x17\xF\xFFFF\x1\x1B8\x2D\xFFFF\x1\x1B2\xE\xFFFF"+
				"\x1\x1BB\x6\xFFFF\x1\x1B6\x7\xFFFF\x1\x1B4\xB\xFFFF\x1\x1B5",
				"\x1\x1C4\x2C\xFFFF\x1\x1C1\x21\xFFFF\x1\x1C5\x3\xFFFF\x1\x1BD\xE\xFFFF"+
				"\x1\x1C3\x1E\xFFFF\x1\x1C2\x2D\xFFFF\x1\x1C6\xE\xFFFF\x1\x1C7\x6\xFFFF"+
				"\x1\x1C0\x7\xFFFF\x1\x1BE\xB\xFFFF\x1\x1BF",
				"\x1\x1CF\x2C\xFFFF\x1\x1CC\x21\xFFFF\x1\x1D0\x3\xFFFF\x1\x1C8\xE\xFFFF"+
				"\x1\x1CE\x1E\xFFFF\x1\x1CD\x2D\xFFFF\x1\x1D1\xE\xFFFF\x1\x1D2\x6\xFFFF"+
				"\x1\x1CB\x7\xFFFF\x1\x1C9\xB\xFFFF\x1\x1CA",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "369:2: packageBlockEntry options {k=2; } : ( importDefinition | includeDirective | useNamespaceDirective | ( LBRACK IDENT )=> annotation | ( modifiers NAMESPACE )=> namespaceDefinition | ( modifiers CLASS )=> classDefinition | ( modifiers INTERFACE )=> interfaceDefinition | ( modifiers FUNCTION )=> methodDefinition | ( modifiers varOrConst )=> variableDefinition | statement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition7(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA7_1 = input.LA(1);
		int index7_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA7_1==IMPORT)) {s = 1;}

				else if ((LA7_1==249)) {s = 2;}

				else if ((LA7_1==USE)) {s = 3;}

				else if ((LA7_1==LBRACK)) {s = 4;}

				else if ((LA7_1==IDENT)) {s = 5;}

				else if ((LA7_1==PUBLIC)) {s = 6;}

				else if ((LA7_1==PRIVATE)) {s = 7;}

				else if ((LA7_1==PROTECTED)) {s = 8;}

				else if ((LA7_1==INTERNAL)) {s = 9;}

				else if ((LA7_1==STATIC)) {s = 10;}

				else if ((LA7_1==247)) {s = 11;}

				else if ((LA7_1==245)) {s = 12;}

				else if ((LA7_1==246)) {s = 13;}

				else if ((LA7_1==253)) {s = 14;}

				else if ((LA7_1==DYNAMIC)) {s = 15;}

				else if ((LA7_1==251)) {s = 16;}

				else if ((LA7_1==NAMESPACE)) {s = 17;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 18;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 19;}

				else if ((LA7_1==FUNCTION)) {s = 20;}

				else if ((LA7_1==VAR)) {s = 21;}

				else if ((LA7_1==CONST)) {s = 22;}

				else if ((LA7_1==AS||LA7_1==BNOT||LA7_1==BREAK||LA7_1==CONTINUE||(LA7_1>=DEC && LA7_1<=DECIMAL_LITERAL)||LA7_1==DEFAULT||LA7_1==DO||LA7_1==E4X_ATTRI||(LA7_1>=FALSE && LA7_1<=FOR)||LA7_1==GET||LA7_1==HEX_LITERAL||LA7_1==IF||LA7_1==INC||LA7_1==IS||LA7_1==LCURLY||LA7_1==LNOT||LA7_1==LPAREN||LA7_1==MINUS||LA7_1==NEW||LA7_1==NULL||LA7_1==OCTAL_LITERAL||LA7_1==PLUS||LA7_1==REGEX_LITERAL||LA7_1==RETURN||(LA7_1>=SEMI && LA7_1<=SET)||(LA7_1>=STRING_LITERAL_DOUBLE && LA7_1<=SWITCH)||(LA7_1>=TRACE && LA7_1<=TRUE)||LA7_1==WHILE||LA7_1==WITH||LA7_1==XML||LA7_1==XML_LITERAL||LA7_1==244||(LA7_1>=254 && LA7_1<=258))) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((LA7_1==IDENT)) {s = 132;}

				else if ((LA7_1==PUBLIC)) {s = 133;}

				else if ((LA7_1==PRIVATE)) {s = 134;}

				else if ((LA7_1==PROTECTED)) {s = 135;}

				else if ((LA7_1==INTERNAL)) {s = 136;}

				else if ((LA7_1==STATIC)) {s = 137;}

				else if ((LA7_1==247)) {s = 138;}

				else if ((LA7_1==245)) {s = 139;}

				else if ((LA7_1==246)) {s = 140;}

				else if ((LA7_1==253)) {s = 141;}

				else if ((LA7_1==DYNAMIC)) {s = 142;}

				else if ((LA7_1==251)) {s = 143;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 144;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 145;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 146;}

				else if ((LA7_1==FUNCTION) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 147;}

				else if ((LA7_1==VAR) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 148;}

				else if ((LA7_1==CONST) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 149;}

				else if (((LA7_1>=AS && LA7_1<=ASSIGN)||(LA7_1>=BAND && LA7_1<=BAND_ASSIGN)||(LA7_1>=BOR && LA7_1<=BOR_ASSIGN)||(LA7_1>=BSR && LA7_1<=BXOR_ASSIGN)||LA7_1==COMMA||(LA7_1>=DBL_COLON && LA7_1<=DEC)||(LA7_1>=DIV && LA7_1<=DIV_ASSIGN)||LA7_1==DOT||LA7_1==E4X_DESC||LA7_1==EQUAL||LA7_1==GE||LA7_1==GT||LA7_1==INC||(LA7_1>=IS && LA7_1<=LBRACK)||LA7_1==LE||(LA7_1>=LOR && LA7_1<=LT)||(LA7_1>=MINUS && LA7_1<=MINUS_ASSIGN)||LA7_1==MOD||LA7_1==MOD_ASSIGN||LA7_1==NOT_EQUAL||(LA7_1>=PLUS && LA7_1<=PLUS_ASSIGN)||LA7_1==QUESTION||LA7_1==SEMI||(LA7_1>=SL && LA7_1<=SL_ASSIGN)||(LA7_1>=SR && LA7_1<=STAR_ASSIGN)||(LA7_1>=STRICT_EQUAL && LA7_1<=STRICT_NOT_EQUAL)||LA7_1==242||LA7_1==250||LA7_1==252)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((LA7_1==IDENT)) {s = 176;}

				else if ((LA7_1==PUBLIC)) {s = 177;}

				else if ((LA7_1==PRIVATE)) {s = 178;}

				else if ((LA7_1==PROTECTED)) {s = 179;}

				else if ((LA7_1==INTERNAL)) {s = 180;}

				else if ((LA7_1==STATIC)) {s = 181;}

				else if ((LA7_1==247)) {s = 182;}

				else if ((LA7_1==245)) {s = 183;}

				else if ((LA7_1==246)) {s = 184;}

				else if ((LA7_1==253)) {s = 185;}

				else if ((LA7_1==DYNAMIC)) {s = 186;}

				else if ((LA7_1==251)) {s = 187;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 188;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 189;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 190;}

				else if ((LA7_1==FUNCTION) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 191;}

				else if ((LA7_1==VAR) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 192;}

				else if ((LA7_1==CONST) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 193;}

				else if ((LA7_1==DBL_COLON)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((LA7_1==IDENT)) {s = 195;}

				else if ((LA7_1==PUBLIC)) {s = 196;}

				else if ((LA7_1==PRIVATE)) {s = 197;}

				else if ((LA7_1==PROTECTED)) {s = 198;}

				else if ((LA7_1==INTERNAL)) {s = 199;}

				else if ((LA7_1==STATIC)) {s = 200;}

				else if ((LA7_1==247)) {s = 201;}

				else if ((LA7_1==245)) {s = 202;}

				else if ((LA7_1==246)) {s = 203;}

				else if ((LA7_1==253)) {s = 204;}

				else if ((LA7_1==DYNAMIC)) {s = 205;}

				else if ((LA7_1==251)) {s = 206;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 207;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 208;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 209;}

				else if ((LA7_1==FUNCTION) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 210;}

				else if ((LA7_1==VAR) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 211;}

				else if ((LA7_1==CONST) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 212;}

				else if ((LA7_1==DBL_COLON)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((LA7_1==IDENT)) {s = 214;}

				else if ((LA7_1==PUBLIC)) {s = 215;}

				else if ((LA7_1==PRIVATE)) {s = 216;}

				else if ((LA7_1==PROTECTED)) {s = 217;}

				else if ((LA7_1==INTERNAL)) {s = 218;}

				else if ((LA7_1==STATIC)) {s = 219;}

				else if ((LA7_1==247)) {s = 220;}

				else if ((LA7_1==245)) {s = 221;}

				else if ((LA7_1==246)) {s = 222;}

				else if ((LA7_1==253)) {s = 223;}

				else if ((LA7_1==DYNAMIC)) {s = 224;}

				else if ((LA7_1==251)) {s = 225;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 226;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 227;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 228;}

				else if ((LA7_1==FUNCTION) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 229;}

				else if ((LA7_1==VAR) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 230;}

				else if ((LA7_1==CONST) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 231;}

				else if ((LA7_1==DBL_COLON)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((LA7_1==IDENT)) {s = 233;}

				else if ((LA7_1==PUBLIC)) {s = 234;}

				else if ((LA7_1==PRIVATE)) {s = 235;}

				else if ((LA7_1==PROTECTED)) {s = 236;}

				else if ((LA7_1==INTERNAL)) {s = 237;}

				else if ((LA7_1==STATIC)) {s = 238;}

				else if ((LA7_1==247)) {s = 239;}

				else if ((LA7_1==245)) {s = 240;}

				else if ((LA7_1==246)) {s = 241;}

				else if ((LA7_1==253)) {s = 242;}

				else if ((LA7_1==DYNAMIC)) {s = 243;}

				else if ((LA7_1==251)) {s = 244;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 245;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 246;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 247;}

				else if ((LA7_1==FUNCTION) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 248;}

				else if ((LA7_1==VAR) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 249;}

				else if ((LA7_1==CONST) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 250;}

				else if ((LA7_1==DBL_COLON)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((LA7_1==IDENT)) {s = 252;}

				else if ((LA7_1==PUBLIC)) {s = 253;}

				else if ((LA7_1==PRIVATE)) {s = 254;}

				else if ((LA7_1==PROTECTED)) {s = 255;}

				else if ((LA7_1==INTERNAL)) {s = 256;}

				else if ((LA7_1==STATIC)) {s = 257;}

				else if ((LA7_1==247)) {s = 258;}

				else if ((LA7_1==245)) {s = 259;}

				else if ((LA7_1==246)) {s = 260;}

				else if ((LA7_1==253)) {s = 261;}

				else if ((LA7_1==DYNAMIC)) {s = 262;}

				else if ((LA7_1==251)) {s = 263;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 264;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 265;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 266;}

				else if ((LA7_1==FUNCTION) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 267;}

				else if ((LA7_1==VAR) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 268;}

				else if ((LA7_1==CONST) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 269;}

				input.Seek(index7_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((LA7_1==IDENT)) {s = 270;}

				else if ((LA7_1==PUBLIC)) {s = 271;}

				else if ((LA7_1==PRIVATE)) {s = 272;}

				else if ((LA7_1==PROTECTED)) {s = 273;}

				else if ((LA7_1==INTERNAL)) {s = 274;}

				else if ((LA7_1==STATIC)) {s = 275;}

				else if ((LA7_1==247)) {s = 276;}

				else if ((LA7_1==245)) {s = 277;}

				else if ((LA7_1==246)) {s = 278;}

				else if ((LA7_1==253)) {s = 279;}

				else if ((LA7_1==DYNAMIC)) {s = 280;}

				else if ((LA7_1==251)) {s = 281;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 282;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 283;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 284;}

				else if ((LA7_1==FUNCTION) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 285;}

				else if ((LA7_1==VAR) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 286;}

				else if ((LA7_1==CONST) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 287;}

				input.Seek(index7_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((LA7_1==IDENT)) {s = 288;}

				else if ((LA7_1==PUBLIC)) {s = 289;}

				else if ((LA7_1==PRIVATE)) {s = 290;}

				else if ((LA7_1==PROTECTED)) {s = 291;}

				else if ((LA7_1==INTERNAL)) {s = 292;}

				else if ((LA7_1==STATIC)) {s = 293;}

				else if ((LA7_1==247)) {s = 294;}

				else if ((LA7_1==245)) {s = 295;}

				else if ((LA7_1==246)) {s = 296;}

				else if ((LA7_1==253)) {s = 297;}

				else if ((LA7_1==DYNAMIC)) {s = 298;}

				else if ((LA7_1==251)) {s = 299;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 300;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 301;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 302;}

				else if ((LA7_1==FUNCTION) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 303;}

				else if ((LA7_1==VAR) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 304;}

				else if ((LA7_1==CONST) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 305;}

				input.Seek(index7_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((LA7_1==IDENT)) {s = 306;}

				else if ((LA7_1==PUBLIC)) {s = 307;}

				else if ((LA7_1==PRIVATE)) {s = 308;}

				else if ((LA7_1==PROTECTED)) {s = 309;}

				else if ((LA7_1==INTERNAL)) {s = 310;}

				else if ((LA7_1==STATIC)) {s = 311;}

				else if ((LA7_1==247)) {s = 312;}

				else if ((LA7_1==245)) {s = 313;}

				else if ((LA7_1==246)) {s = 314;}

				else if ((LA7_1==253)) {s = 315;}

				else if ((LA7_1==DYNAMIC)) {s = 316;}

				else if ((LA7_1==251)) {s = 317;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 318;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 319;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 320;}

				else if ((LA7_1==FUNCTION) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 321;}

				else if ((LA7_1==VAR) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 322;}

				else if ((LA7_1==CONST) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 323;}

				input.Seek(index7_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((LA7_1==IDENT)) {s = 324;}

				else if ((LA7_1==PUBLIC)) {s = 325;}

				else if ((LA7_1==PRIVATE)) {s = 326;}

				else if ((LA7_1==PROTECTED)) {s = 327;}

				else if ((LA7_1==INTERNAL)) {s = 328;}

				else if ((LA7_1==STATIC)) {s = 329;}

				else if ((LA7_1==247)) {s = 330;}

				else if ((LA7_1==245)) {s = 331;}

				else if ((LA7_1==246)) {s = 332;}

				else if ((LA7_1==253)) {s = 333;}

				else if ((LA7_1==DYNAMIC)) {s = 334;}

				else if ((LA7_1==251)) {s = 335;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 336;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 337;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 338;}

				else if ((LA7_1==FUNCTION) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 339;}

				else if ((LA7_1==VAR) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 340;}

				else if ((LA7_1==CONST) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 341;}

				input.Seek(index7_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((LA7_1==IDENT)) {s = 342;}

				else if ((LA7_1==PUBLIC)) {s = 343;}

				else if ((LA7_1==PRIVATE)) {s = 344;}

				else if ((LA7_1==PROTECTED)) {s = 345;}

				else if ((LA7_1==INTERNAL)) {s = 346;}

				else if ((LA7_1==STATIC)) {s = 347;}

				else if ((LA7_1==247)) {s = 348;}

				else if ((LA7_1==245)) {s = 349;}

				else if ((LA7_1==246)) {s = 350;}

				else if ((LA7_1==253)) {s = 351;}

				else if ((LA7_1==DYNAMIC)) {s = 352;}

				else if ((LA7_1==251)) {s = 353;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 354;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 355;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 356;}

				else if ((LA7_1==FUNCTION) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 357;}

				else if ((LA7_1==VAR) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 358;}

				else if ((LA7_1==CONST) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 359;}

				else if (((LA7_1>=AS && LA7_1<=ASSIGN)||(LA7_1>=BAND && LA7_1<=BAND_ASSIGN)||(LA7_1>=BOR && LA7_1<=BOR_ASSIGN)||(LA7_1>=BSR && LA7_1<=BXOR_ASSIGN)||LA7_1==COMMA||LA7_1==DEC||(LA7_1>=DIV && LA7_1<=DIV_ASSIGN)||LA7_1==DOT||LA7_1==E4X_DESC||LA7_1==EQUAL||LA7_1==GE||LA7_1==GT||LA7_1==INC||(LA7_1>=IS && LA7_1<=LBRACK)||LA7_1==LE||(LA7_1>=LOR && LA7_1<=LT)||(LA7_1>=MINUS && LA7_1<=MINUS_ASSIGN)||LA7_1==MOD||LA7_1==MOD_ASSIGN||LA7_1==NOT_EQUAL||(LA7_1>=PLUS && LA7_1<=PLUS_ASSIGN)||LA7_1==QUESTION||LA7_1==SEMI||(LA7_1>=SL && LA7_1<=SL_ASSIGN)||(LA7_1>=SR && LA7_1<=STAR_ASSIGN)||(LA7_1>=STRICT_EQUAL && LA7_1<=STRICT_NOT_EQUAL)||LA7_1==242||LA7_1==250||LA7_1==252)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((LA7_1==IDENT)) {s = 385;}

				else if ((LA7_1==PUBLIC)) {s = 386;}

				else if ((LA7_1==PRIVATE)) {s = 387;}

				else if ((LA7_1==PROTECTED)) {s = 388;}

				else if ((LA7_1==INTERNAL)) {s = 389;}

				else if ((LA7_1==STATIC)) {s = 390;}

				else if ((LA7_1==247)) {s = 391;}

				else if ((LA7_1==245)) {s = 392;}

				else if ((LA7_1==246)) {s = 393;}

				else if ((LA7_1==253)) {s = 394;}

				else if ((LA7_1==DYNAMIC)) {s = 395;}

				else if ((LA7_1==251)) {s = 396;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 397;}

				else if ((LA7_1==CLASS) && (EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((LA7_1==INTERFACE) && (EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((LA7_1==FUNCTION) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 400;}

				else if ((LA7_1==VAR) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 401;}

				else if ((LA7_1==CONST) && (EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((LA7_1==IDENT) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 403;}

				else if ((LA7_1==PUBLIC) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 404;}

				else if ((LA7_1==PRIVATE) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 405;}

				else if ((LA7_1==PROTECTED) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 406;}

				else if ((LA7_1==INTERNAL) && (EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if (((LA7_1>=AS && LA7_1<=ASSIGN)||(LA7_1>=BAND && LA7_1<=BAND_ASSIGN)||(LA7_1>=BOR && LA7_1<=BOR_ASSIGN)||(LA7_1>=BSR && LA7_1<=BXOR_ASSIGN)||LA7_1==COMMA||LA7_1==DEC||(LA7_1>=DIV && LA7_1<=DIV_ASSIGN)||LA7_1==DOT||LA7_1==E4X_DESC||LA7_1==EQUAL||LA7_1==GE||LA7_1==GT||LA7_1==INC||(LA7_1>=IS && LA7_1<=LBRACK)||LA7_1==LE||(LA7_1>=LOR && LA7_1<=LT)||(LA7_1>=MINUS && LA7_1<=MINUS_ASSIGN)||LA7_1==MOD||LA7_1==MOD_ASSIGN||LA7_1==NOT_EQUAL||(LA7_1>=PLUS && LA7_1<=PLUS_ASSIGN)||LA7_1==QUESTION||LA7_1==SEMI||(LA7_1>=SL && LA7_1<=SL_ASSIGN)||(LA7_1>=SR && LA7_1<=STAR_ASSIGN)||(LA7_1>=STRICT_EQUAL && LA7_1<=STRICT_NOT_EQUAL)||LA7_1==242||LA7_1==250||LA7_1==252)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((LA7_1==GET) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 433;}

				else if ((LA7_1==SET) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 434;}

				else if ((LA7_1==IDENT) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 435;}

				else if ((LA7_1==USE) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 436;}

				else if ((LA7_1==XML) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 437;}

				else if ((LA7_1==TRACE) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 438;}

				else if ((LA7_1==DYNAMIC) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 439;}

				else if ((LA7_1==NAMESPACE) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 440;}

				else if ((LA7_1==IS) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 441;}

				else if ((LA7_1==AS) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 442;}

				else if ((LA7_1==SUPER) && (EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((LA7_1==LPAREN)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_AS3T_fragment))) {s = 467;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_AS3T_fragment))) {s = 467;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_AS3T_fragment))) {s = 467;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_AS3T_fragment))) {s = 467;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_AS3T_fragment))) {s = 467;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_AS3T_fragment))) {s = 467;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_AS3T_fragment))) {s = 467;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_AS3T_fragment))) {s = 467;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_AS3T_fragment))) {s = 467;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_AS3T_fragment))) {s = 467;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_AS3T_fragment))) {s = 467;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 67:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 68:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 69:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 70:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 71:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 72:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 73:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 74:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 75:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 76:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 77:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 78:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 79:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 80:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 81:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 82:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 83:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 84:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 85:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 86:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 87:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 88:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 89:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 90:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 91:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 92:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 93:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 94:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 95:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 96:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 97:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 98:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 99:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 100:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 101:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 102:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 103:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 104:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 105:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 106:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 107:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 108:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 109:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 110:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 111:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 112:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 113:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 114:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 115:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 116:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 117:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 118:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 119:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 120:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 121:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 122:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 123:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 124:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 125:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 126:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 127:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 128:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 129:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 130:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 131:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 132:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 133:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 134:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 135:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 136:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 137:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 138:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 139:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 140:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 141:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 142:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 143:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 144:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 145:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 146:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 147:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 148:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 149:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 150:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 151:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 152:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 153:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 154:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 155:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 156:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 157:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 158:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 159:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 160:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 161:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 162:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 163:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 164:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 165:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 166:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 167:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 168:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 169:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_AS3T_fragment))) {s = 407;}

				else if ((EvaluatePredicate(synpred5_AS3T_fragment))) {s = 398;}

				else if ((EvaluatePredicate(synpred6_AS3T_fragment))) {s = 399;}

				else if ((EvaluatePredicate(synpred7_AS3T_fragment))) {s = 443;}

				else if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				input.Seek(index7_1);
				break;
			}
		case 170:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 171:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 172:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 173:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 174:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 175:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 176:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 177:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 178:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 179:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 180:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 181:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 182:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 183:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 184:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 185:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 186:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 187:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 188:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 189:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 190:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}
		case 191:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred8_AS3T_fragment))) {s = 402;}

				else if ((true)) {s = 23;}

				input.Seek(index7_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 7, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA17 : DFA
	{
		private const string DFA17_eotS =
			"\x176\xFFFF";
		private const string DFA17_eofS =
			"\x176\xFFFF";
		private const string DFA17_minS =
			"\x1\xF\x2\xFFFF\x2\xF\x9\x2A\x1\xF\x1\x2A\x3\xF\x2C\xFFFF\xB\x0\x1E\xFFFF"+
			"\xC\x0\x1D\xFFFF\xC\x0\x4\xFFFF\xC\x0\x4\xFFFF\xC\x0\x4\xFFFF\xC\x0\x4"+
			"\xFFFF\xC\x0\x3\xFFFF\xC\x0\x3\xFFFF\xC\x0\x3\xFFFF\xC\x0\x3\xFFFF\xC"+
			"\x0\x3\xFFFF\xC\x0\x1C\xFFFF\xC\x0\x3\xFFFF\x16\x0\xD\xFFFF";
		private const string DFA17_maxS =
			"\x1\x102\x2\xFFFF\x1\x102\xC\xFD\x3\xE8\x2C\xFFFF\xB\x0\x1E\xFFFF\xC"+
			"\x0\x1D\xFFFF\xC\x0\x4\xFFFF\xC\x0\x4\xFFFF\xC\x0\x4\xFFFF\xC\x0\x4\xFFFF"+
			"\xC\x0\x3\xFFFF\xC\x0\x3\xFFFF\xC\x0\x3\xFFFF\xC\x0\x3\xFFFF\xC\x0\x3"+
			"\xFFFF\xC\x0\x1C\xFFFF\xC\x0\x3\xFFFF\x16\x0\xD\xFFFF";
		private const string DFA17_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x10\xFFFF\x1\x6\x60\xFFFF\x2\x4\x1\x5\x26\xFFFF"+
			"\x2\x4\x1\x5\xD\xFFFF\x2\x4\x1\x5\xD\xFFFF\x2\x4\x1\x5\xD\xFFFF\x2\x4"+
			"\x1\x5\xD\xFFFF\x2\x4\x1\x5\xC\xFFFF\x2\x4\x1\x5\xC\xFFFF\x2\x4\x1\x5"+
			"\xC\xFFFF\x2\x4\x1\x5\xC\xFFFF\x2\x4\x1\x5\xC\xFFFF\x2\x4\x1\x5\x25\xFFFF"+
			"\x2\x4\x1\x5\x16\xFFFF\xB\x5\x1\xFFFF\x1\x3";
		private const string DFA17_specialS =
			"\x4\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x2\xFFFF\x1\xC\x2C\xFFFF\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1E\xFFFF\x1\x18\x1\x19\x1"+
			"\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1D"+
			"\xFFFF\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C"+
			"\x1\x2D\x1\x2E\x1\x2F\x4\xFFFF\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x1"+
			"\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1\x3B\x4\xFFFF\x1\x3C\x1\x3D"+
			"\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\x1\x45\x1\x46\x1\x47"+
			"\x4\xFFFF\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E\x1\x4F\x1"+
			"\x50\x1\x51\x1\x52\x1\x53\x4\xFFFF\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58"+
			"\x1\x59\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x3\xFFFF\x1\x60\x1"+
			"\x61\x1\x62\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68\x1\x69\x1\x6A\x1"+
			"\x6B\x3\xFFFF\x1\x6C\x1\x6D\x1\x6E\x1\x6F\x1\x70\x1\x71\x1\x72\x1\x73"+
			"\x1\x74\x1\x75\x1\x76\x1\x77\x3\xFFFF\x1\x78\x1\x79\x1\x7A\x1\x7B\x1"+
			"\x7C\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\x1\x82\x1\x83\x3\xFFFF\x1\x84"+
			"\x1\x85\x1\x86\x1\x87\x1\x88\x1\x89\x1\x8A\x1\x8B\x1\x8C\x1\x8D\x1\x8E"+
			"\x1\x8F\x3\xFFFF\x1\x90\x1\x91\x1\x92\x1\x93\x1\x94\x1\x95\x1\x96\x1"+
			"\x97\x1\x98\x1\x99\x1\x9A\x1\x9B\x1C\xFFFF\x1\x9C\x1\x9D\x1\x9E\x1\x9F"+
			"\x1\xA0\x1\xA1\x1\xA2\x1\xA3\x1\xA4\x1\xA5\x1\xA6\x1\xA7\x3\xFFFF\x1"+
			"\xA8\x1\xA9\x1\xAA\x1\xAB\x1\xAC\x1\xAD\x1\xAE\x1\xAF\x1\xB0\x1\xB1\x1"+
			"\xB2\x1\xB3\x1\xB4\x1\xB5\x1\xB6\x1\xB7\x1\xB8\x1\xB9\x1\xBA\x1\xBB\x1"+
			"\xBC\x1\xBD\xD\xFFFF}>";
		private static readonly string[] DFA17_transitionS =
			{
				"\x1\x13\x5\xFFFF\x1\x13\x3\xFFFF\x1\x13\x10\xFFFF\x1\x11\x1\xFFFF\x1"+
				"\x13\x3\xFFFF\x2\x13\x2\xFFFF\x1\x13\x3\xFFFF\x1\x13\x3\xFFFF\x1\xE"+
				"\x1\x13\x11\xFFFF\x3\x13\x8\xFFFF\x1\x12\x3\xFFFF\x1\x13\x2\xFFFF\x1"+
				"\x13\x1\x4\x2\xFFFF\x1\x13\x3\xFFFF\x1\x2\x2\xFFFF\x1\x13\x3\xFFFF\x1"+
				"\x8\x1\x13\x2\xFFFF\x1\x3\x1\x13\x7\xFFFF\x1\x13\x2\xFFFF\x1\x13\x7"+
				"\xFFFF\x1\x13\x7\xFFFF\x1\x13\x2\xFFFF\x1\x13\x4\xFFFF\x1\x13\x3\xFFFF"+
				"\x1\x13\x8\xFFFF\x1\x13\x6\xFFFF\x1\x6\x2\xFFFF\x1\x7\x1\x5\x6\xFFFF"+
				"\x1\x13\x2\xFFFF\x1\x13\x2\xFFFF\x2\x13\x9\xFFFF\x1\x9\x2\xFFFF\x4\x13"+
				"\x5\xFFFF\x2\x13\x6\xFFFF\x1\x13\x1\x10\x6\xFFFF\x1\x13\x1\xFFFF\x1"+
				"\x13\x1\xFFFF\x1\x13\x5\xFFFF\x1\x13\x5\xFFFF\x1\x13\x1\xB\x1\xC\x1"+
				"\xA\x1\xFFFF\x1\x1\x1\xFFFF\x1\xF\x1\xFFFF\x1\xD\x5\x13",
				"",
				"",
				"\x1\x46\x5\xFFFF\x1\x13\x11\xFFFF\x1\x13\x8\xFFFF\x2\x13\xA\xFFFF\x1"+
				"\x43\x1\x13\x11\xFFFF\x2\x13\x9\xFFFF\x1\x13\x3\xFFFF\x1\x47\x2\xFFFF"+
				"\x1\x13\x1\x3F\x9\xFFFF\x1\x13\x3\xFFFF\x1\x13\x1\x45\x2\xFFFF\x2\x13"+
				"\x7\xFFFF\x1\x13\x2\xFFFF\x1\x13\x7\xFFFF\x1\x13\x7\xFFFF\x1\x44\x2"+
				"\xFFFF\x1\x13\x4\xFFFF\x1\x13\x3\xFFFF\x1\x13\x8\xFFFF\x1\x13\x6\xFFFF"+
				"\x1\x13\x2\xFFFF\x2\x13\x2\xFFFF\x1\x13\x3\xFFFF\x1\x13\x6\xFFFF\x1"+
				"\x48\xC\xFFFF\x2\x13\x1\x49\x6\xFFFF\x1\x42\x1\x13\x6\xFFFF\x1\x40\xB"+
				"\xFFFF\x1\x41\x5\xFFFF\x1\x13\x5\xFFFF\x1\x13\xB\xFFFF\x3\x13",
				"\x2\x13\x1\xFFFF\x2\x13\x3\xFFFF\x2\x13\x3\xFFFF\x4\x13\x7\xFFFF\x1"+
				"\x13\x2\xFFFF\x1\x75\x4\xFFFF\x2\x13\x5\xFFFF\x2\x13\x1\xFFFF\x1\x13"+
				"\x2\xFFFF\x1\x72\x1\xFFFF\x1\x13\x7\xFFFF\x1\x13\x13\xFFFF\x1\x76\x2"+
				"\xFFFF\x1\x13\x1\xFFFF\x1\x13\x2\xFFFF\x1\x68\x9\xFFFF\x1\x13\x3\xFFFF"+
				"\x1\x6C\x4\x13\x1\xFFFF\x1\x13\x7\xFFFF\x4\x13\x6\xFFFF\x2\x13\x1\xFFFF"+
				"\x1\x13\x2\xFFFF\x1\x13\x8\xFFFF\x1\x13\xD\xFFFF\x2\x13\x5\xFFFF\x1"+
				"\x6A\x2\xFFFF\x1\x6B\x1\x69\x1\xFFFF\x1\x13\xA\xFFFF\x1\x13\x1\xFFFF"+
				"\x2\x13\x1\xFFFF\x4\x13\x2\xFFFF\x1\x6D\x2\x13\x12\xFFFF\x1\x74\x14"+
				"\xFFFF\x1\x13\x2\xFFFF\x1\x6F\x1\x70\x1\x6E\x2\xFFFF\x1\x13\x1\x73\x1"+
				"\x13\x1\x71",
				"\x1\x9E\x4\xFFFF\x1\x13\xC\xFFFF\x1\x9B\x1D\xFFFF\x1\x9F\x7\xFFFF\x1"+
				"\x91\xD\xFFFF\x1\x95\x3B\xFFFF\x1\x93\x2\xFFFF\x1\x94\x1\x92\x17\xFFFF"+
				"\x1\x96\x14\xFFFF\x1\x9D\x17\xFFFF\x1\x98\x1\x99\x1\x97\x3\xFFFF\x1"+
				"\x9C\x1\xFFFF\x1\x9A",
				"\x1\xAE\x4\xFFFF\x1\x13\xC\xFFFF\x1\xAB\x1D\xFFFF\x1\xAF\x7\xFFFF\x1"+
				"\xA1\xD\xFFFF\x1\xA5\x3B\xFFFF\x1\xA3\x2\xFFFF\x1\xA4\x1\xA2\x17\xFFFF"+
				"\x1\xA6\x14\xFFFF\x1\xAD\x17\xFFFF\x1\xA8\x1\xA9\x1\xA7\x3\xFFFF\x1"+
				"\xAC\x1\xFFFF\x1\xAA",
				"\x1\xBE\x4\xFFFF\x1\x13\xC\xFFFF\x1\xBB\x1D\xFFFF\x1\xBF\x7\xFFFF\x1"+
				"\xB1\xD\xFFFF\x1\xB5\x3B\xFFFF\x1\xB3\x2\xFFFF\x1\xB4\x1\xB2\x17\xFFFF"+
				"\x1\xB6\x14\xFFFF\x1\xBD\x17\xFFFF\x1\xB8\x1\xB9\x1\xB7\x3\xFFFF\x1"+
				"\xBC\x1\xFFFF\x1\xBA",
				"\x1\xCE\x4\xFFFF\x1\x13\xC\xFFFF\x1\xCB\x1D\xFFFF\x1\xCF\x7\xFFFF\x1"+
				"\xC1\xD\xFFFF\x1\xC5\x3B\xFFFF\x1\xC3\x2\xFFFF\x1\xC4\x1\xC2\x17\xFFFF"+
				"\x1\xC6\x14\xFFFF\x1\xCD\x17\xFFFF\x1\xC8\x1\xC9\x1\xC7\x3\xFFFF\x1"+
				"\xCC\x1\xFFFF\x1\xCA",
				"\x1\xDE\x11\xFFFF\x1\xDB\x1D\xFFFF\x1\xDF\x7\xFFFF\x1\xD1\xD\xFFFF\x1"+
				"\xD5\x3B\xFFFF\x1\xD3\x2\xFFFF\x1\xD4\x1\xD2\x17\xFFFF\x1\xD6\x14\xFFFF"+
				"\x1\xDD\x17\xFFFF\x1\xD8\x1\xD9\x1\xD7\x3\xFFFF\x1\xDC\x1\xFFFF\x1\xDA",
				"\x1\xED\x11\xFFFF\x1\xEA\x1D\xFFFF\x1\xEE\x7\xFFFF\x1\xE0\xD\xFFFF\x1"+
				"\xE4\x3B\xFFFF\x1\xE2\x2\xFFFF\x1\xE3\x1\xE1\x17\xFFFF\x1\xE5\x14\xFFFF"+
				"\x1\xEC\x17\xFFFF\x1\xE7\x1\xE8\x1\xE6\x3\xFFFF\x1\xEB\x1\xFFFF\x1\xE9",
				"\x1\xFC\x11\xFFFF\x1\xF9\x1D\xFFFF\x1\xFD\x7\xFFFF\x1\xEF\xD\xFFFF\x1"+
				"\xF3\x3B\xFFFF\x1\xF1\x2\xFFFF\x1\xF2\x1\xF0\x17\xFFFF\x1\xF4\x14\xFFFF"+
				"\x1\xFB\x17\xFFFF\x1\xF6\x1\xF7\x1\xF5\x3\xFFFF\x1\xFA\x1\xFFFF\x1\xF8",
				"\x1\x10B\x11\xFFFF\x1\x108\x1D\xFFFF\x1\x10C\x7\xFFFF\x1\xFE\xD\xFFFF"+
				"\x1\x102\x3B\xFFFF\x1\x100\x2\xFFFF\x1\x101\x1\xFF\x17\xFFFF\x1\x103"+
				"\x14\xFFFF\x1\x10A\x17\xFFFF\x1\x105\x1\x106\x1\x104\x3\xFFFF\x1\x109"+
				"\x1\xFFFF\x1\x107",
				"\x1\x11A\x11\xFFFF\x1\x117\x1D\xFFFF\x1\x11B\x7\xFFFF\x1\x10D\xD\xFFFF"+
				"\x1\x111\x3B\xFFFF\x1\x10F\x2\xFFFF\x1\x110\x1\x10E\x17\xFFFF\x1\x112"+
				"\x14\xFFFF\x1\x119\x17\xFFFF\x1\x114\x1\x115\x1\x113\x3\xFFFF\x1\x118"+
				"\x1\xFFFF\x1\x116",
				"\x2\x13\x1\xFFFF\x2\x13\x3\xFFFF\x2\x13\x3\xFFFF\x4\x13\x7\xFFFF\x1"+
				"\x13\x2\xFFFF\x1\x129\x5\xFFFF\x1\x13\x5\xFFFF\x2\x13\x1\xFFFF\x1\x13"+
				"\x2\xFFFF\x1\x126\x1\xFFFF\x1\x13\x7\xFFFF\x1\x13\x13\xFFFF\x1\x12A"+
				"\x2\xFFFF\x1\x13\x1\xFFFF\x1\x13\x2\xFFFF\x1\x11C\x9\xFFFF\x1\x13\x3"+
				"\xFFFF\x1\x120\x4\x13\x1\xFFFF\x1\x13\x7\xFFFF\x4\x13\x6\xFFFF\x2\x13"+
				"\x1\xFFFF\x1\x13\x2\xFFFF\x1\x13\x8\xFFFF\x1\x13\xD\xFFFF\x2\x13\x5"+
				"\xFFFF\x1\x11E\x2\xFFFF\x1\x11F\x1\x11D\x1\xFFFF\x1\x13\xA\xFFFF\x1"+
				"\x13\x1\xFFFF\x2\x13\x1\xFFFF\x4\x13\x2\xFFFF\x1\x121\x2\x13\x12\xFFFF"+
				"\x1\x128\x14\xFFFF\x1\x13\x2\xFFFF\x1\x123\x1\x124\x1\x122\x2\xFFFF"+
				"\x1\x13\x1\x127\x1\x13\x1\x125",
				"\x1\x151\x11\xFFFF\x1\x14E\x1D\xFFFF\x1\x152\x7\xFFFF\x1\x144\xD\xFFFF"+
				"\x1\x148\x3B\xFFFF\x1\x146\x2\xFFFF\x1\x147\x1\x145\x17\xFFFF\x1\x149"+
				"\x14\xFFFF\x1\x150\x17\xFFFF\x1\x14B\x1\x14C\x1\x14A\x3\xFFFF\x1\x14F"+
				"\x1\xFFFF\x1\x14D",
				"\x1\x15A\x2C\xFFFF\x1\x157\x21\xFFFF\x1\x15B\x3\xFFFF\x1\x153\xE\xFFFF"+
				"\x1\x159\x1E\xFFFF\x1\x158\x2D\xFFFF\x1\x15C\xE\xFFFF\x1\x15D\x6\xFFFF"+
				"\x1\x156\x7\xFFFF\x1\x154\xB\xFFFF\x1\x155",
				"\x1\x165\x2C\xFFFF\x1\x162\x21\xFFFF\x1\x166\x3\xFFFF\x1\x15E\xE\xFFFF"+
				"\x1\x164\x1E\xFFFF\x1\x163\x2D\xFFFF\x1\x167\xE\xFFFF\x1\x168\x6\xFFFF"+
				"\x1\x161\x7\xFFFF\x1\x15F\xB\xFFFF\x1\x160",
				"\x1\x172\x2C\xFFFF\x1\x16F\x21\xFFFF\x1\x169\x3\xFFFF\x1\x16B\xE\xFFFF"+
				"\x1\x171\xE\xFFFF\x1\x13\xF\xFFFF\x1\x170\x2D\xFFFF\x1\x16A\xE\xFFFF"+
				"\x1\x173\x6\xFFFF\x1\x16E\x7\xFFFF\x1\x16C\xB\xFFFF\x1\x16D",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA17_eot = DFA.UnpackEncodedString(DFA17_eotS);
		private static readonly short[] DFA17_eof = DFA.UnpackEncodedString(DFA17_eofS);
		private static readonly char[] DFA17_min = DFA.UnpackEncodedStringToUnsignedChars(DFA17_minS);
		private static readonly char[] DFA17_max = DFA.UnpackEncodedStringToUnsignedChars(DFA17_maxS);
		private static readonly short[] DFA17_accept = DFA.UnpackEncodedString(DFA17_acceptS);
		private static readonly short[] DFA17_special = DFA.UnpackEncodedString(DFA17_specialS);
		private static readonly short[][] DFA17_transition;

		static DFA17()
		{
			int numStates = DFA17_transitionS.Length;
			DFA17_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA17_transition[i] = DFA.UnpackEncodedString(DFA17_transitionS[i]);
			}
		}

		public DFA17( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 17;
			this.eot = DFA17_eot;
			this.eof = DFA17_eof;
			this.min = DFA17_min;
			this.max = DFA17_max;
			this.accept = DFA17_accept;
			this.special = DFA17_special;
			this.transition = DFA17_transition;
		}

		public override string Description { get { return "463:1: typeBlockEntry options {k=2; } : ( includeDirective | importDefinition | ( LBRACK IDENT )=> annotation | ( modifiers varOrConst )=> variableDefinition | ( modifiers FUNCTION )=> methodDefinition | statement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition17(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA17_1 = input.LA(1);
		int index17_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA17_1==IDENT)) {s = 104;}

				else if ((LA17_1==PUBLIC)) {s = 105;}

				else if ((LA17_1==PRIVATE)) {s = 106;}

				else if ((LA17_1==PROTECTED)) {s = 107;}

				else if ((LA17_1==INTERNAL)) {s = 108;}

				else if ((LA17_1==STATIC)) {s = 109;}

				else if ((LA17_1==247)) {s = 110;}

				else if ((LA17_1==245)) {s = 111;}

				else if ((LA17_1==246)) {s = 112;}

				else if ((LA17_1==253)) {s = 113;}

				else if ((LA17_1==DYNAMIC)) {s = 114;}

				else if ((LA17_1==251)) {s = 115;}

				else if ((LA17_1==VAR) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 116;}

				else if ((LA17_1==CONST) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 117;}

				else if ((LA17_1==FUNCTION) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 118;}

				else if (((LA17_1>=AS && LA17_1<=ASSIGN)||(LA17_1>=BAND && LA17_1<=BAND_ASSIGN)||(LA17_1>=BOR && LA17_1<=BOR_ASSIGN)||(LA17_1>=BSR && LA17_1<=BXOR_ASSIGN)||LA17_1==COMMA||(LA17_1>=DBL_COLON && LA17_1<=DEC)||(LA17_1>=DIV && LA17_1<=DIV_ASSIGN)||LA17_1==DOT||LA17_1==E4X_DESC||LA17_1==EQUAL||LA17_1==GE||LA17_1==GT||LA17_1==INC||(LA17_1>=IS && LA17_1<=LBRACK)||LA17_1==LE||(LA17_1>=LOR && LA17_1<=LT)||(LA17_1>=MINUS && LA17_1<=MINUS_ASSIGN)||LA17_1==MOD||LA17_1==MOD_ASSIGN||LA17_1==NOT_EQUAL||(LA17_1>=PLUS && LA17_1<=PLUS_ASSIGN)||LA17_1==QUESTION||LA17_1==SEMI||(LA17_1>=SL && LA17_1<=SL_ASSIGN)||(LA17_1>=SR && LA17_1<=STAR_ASSIGN)||(LA17_1>=STRICT_EQUAL && LA17_1<=STRICT_NOT_EQUAL)||LA17_1==242||LA17_1==250||LA17_1==252)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((LA17_1==IDENT)) {s = 145;}

				else if ((LA17_1==PUBLIC)) {s = 146;}

				else if ((LA17_1==PRIVATE)) {s = 147;}

				else if ((LA17_1==PROTECTED)) {s = 148;}

				else if ((LA17_1==INTERNAL)) {s = 149;}

				else if ((LA17_1==STATIC)) {s = 150;}

				else if ((LA17_1==247)) {s = 151;}

				else if ((LA17_1==245)) {s = 152;}

				else if ((LA17_1==246)) {s = 153;}

				else if ((LA17_1==253)) {s = 154;}

				else if ((LA17_1==DYNAMIC)) {s = 155;}

				else if ((LA17_1==251)) {s = 156;}

				else if ((LA17_1==VAR) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 157;}

				else if ((LA17_1==CONST) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 158;}

				else if ((LA17_1==FUNCTION) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 159;}

				else if ((LA17_1==DBL_COLON)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((LA17_1==IDENT)) {s = 161;}

				else if ((LA17_1==PUBLIC)) {s = 162;}

				else if ((LA17_1==PRIVATE)) {s = 163;}

				else if ((LA17_1==PROTECTED)) {s = 164;}

				else if ((LA17_1==INTERNAL)) {s = 165;}

				else if ((LA17_1==STATIC)) {s = 166;}

				else if ((LA17_1==247)) {s = 167;}

				else if ((LA17_1==245)) {s = 168;}

				else if ((LA17_1==246)) {s = 169;}

				else if ((LA17_1==253)) {s = 170;}

				else if ((LA17_1==DYNAMIC)) {s = 171;}

				else if ((LA17_1==251)) {s = 172;}

				else if ((LA17_1==VAR) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 173;}

				else if ((LA17_1==CONST) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 174;}

				else if ((LA17_1==FUNCTION) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 175;}

				else if ((LA17_1==DBL_COLON)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((LA17_1==IDENT)) {s = 177;}

				else if ((LA17_1==PUBLIC)) {s = 178;}

				else if ((LA17_1==PRIVATE)) {s = 179;}

				else if ((LA17_1==PROTECTED)) {s = 180;}

				else if ((LA17_1==INTERNAL)) {s = 181;}

				else if ((LA17_1==STATIC)) {s = 182;}

				else if ((LA17_1==247)) {s = 183;}

				else if ((LA17_1==245)) {s = 184;}

				else if ((LA17_1==246)) {s = 185;}

				else if ((LA17_1==253)) {s = 186;}

				else if ((LA17_1==DYNAMIC)) {s = 187;}

				else if ((LA17_1==251)) {s = 188;}

				else if ((LA17_1==VAR) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 189;}

				else if ((LA17_1==CONST) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 190;}

				else if ((LA17_1==FUNCTION) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 191;}

				else if ((LA17_1==DBL_COLON)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((LA17_1==IDENT)) {s = 193;}

				else if ((LA17_1==PUBLIC)) {s = 194;}

				else if ((LA17_1==PRIVATE)) {s = 195;}

				else if ((LA17_1==PROTECTED)) {s = 196;}

				else if ((LA17_1==INTERNAL)) {s = 197;}

				else if ((LA17_1==STATIC)) {s = 198;}

				else if ((LA17_1==247)) {s = 199;}

				else if ((LA17_1==245)) {s = 200;}

				else if ((LA17_1==246)) {s = 201;}

				else if ((LA17_1==253)) {s = 202;}

				else if ((LA17_1==DYNAMIC)) {s = 203;}

				else if ((LA17_1==251)) {s = 204;}

				else if ((LA17_1==VAR) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 205;}

				else if ((LA17_1==CONST) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 206;}

				else if ((LA17_1==FUNCTION) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 207;}

				else if ((LA17_1==DBL_COLON)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((LA17_1==IDENT)) {s = 209;}

				else if ((LA17_1==PUBLIC)) {s = 210;}

				else if ((LA17_1==PRIVATE)) {s = 211;}

				else if ((LA17_1==PROTECTED)) {s = 212;}

				else if ((LA17_1==INTERNAL)) {s = 213;}

				else if ((LA17_1==STATIC)) {s = 214;}

				else if ((LA17_1==247)) {s = 215;}

				else if ((LA17_1==245)) {s = 216;}

				else if ((LA17_1==246)) {s = 217;}

				else if ((LA17_1==253)) {s = 218;}

				else if ((LA17_1==DYNAMIC)) {s = 219;}

				else if ((LA17_1==251)) {s = 220;}

				else if ((LA17_1==VAR) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 221;}

				else if ((LA17_1==CONST) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 222;}

				else if ((LA17_1==FUNCTION) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 223;}

				input.Seek(index17_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((LA17_1==IDENT)) {s = 224;}

				else if ((LA17_1==PUBLIC)) {s = 225;}

				else if ((LA17_1==PRIVATE)) {s = 226;}

				else if ((LA17_1==PROTECTED)) {s = 227;}

				else if ((LA17_1==INTERNAL)) {s = 228;}

				else if ((LA17_1==STATIC)) {s = 229;}

				else if ((LA17_1==247)) {s = 230;}

				else if ((LA17_1==245)) {s = 231;}

				else if ((LA17_1==246)) {s = 232;}

				else if ((LA17_1==253)) {s = 233;}

				else if ((LA17_1==DYNAMIC)) {s = 234;}

				else if ((LA17_1==251)) {s = 235;}

				else if ((LA17_1==VAR) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 236;}

				else if ((LA17_1==CONST) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 237;}

				else if ((LA17_1==FUNCTION) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 238;}

				input.Seek(index17_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((LA17_1==IDENT)) {s = 239;}

				else if ((LA17_1==PUBLIC)) {s = 240;}

				else if ((LA17_1==PRIVATE)) {s = 241;}

				else if ((LA17_1==PROTECTED)) {s = 242;}

				else if ((LA17_1==INTERNAL)) {s = 243;}

				else if ((LA17_1==STATIC)) {s = 244;}

				else if ((LA17_1==247)) {s = 245;}

				else if ((LA17_1==245)) {s = 246;}

				else if ((LA17_1==246)) {s = 247;}

				else if ((LA17_1==253)) {s = 248;}

				else if ((LA17_1==DYNAMIC)) {s = 249;}

				else if ((LA17_1==251)) {s = 250;}

				else if ((LA17_1==VAR) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 251;}

				else if ((LA17_1==CONST) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 252;}

				else if ((LA17_1==FUNCTION) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 253;}

				input.Seek(index17_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((LA17_1==IDENT)) {s = 254;}

				else if ((LA17_1==PUBLIC)) {s = 255;}

				else if ((LA17_1==PRIVATE)) {s = 256;}

				else if ((LA17_1==PROTECTED)) {s = 257;}

				else if ((LA17_1==INTERNAL)) {s = 258;}

				else if ((LA17_1==STATIC)) {s = 259;}

				else if ((LA17_1==247)) {s = 260;}

				else if ((LA17_1==245)) {s = 261;}

				else if ((LA17_1==246)) {s = 262;}

				else if ((LA17_1==253)) {s = 263;}

				else if ((LA17_1==DYNAMIC)) {s = 264;}

				else if ((LA17_1==251)) {s = 265;}

				else if ((LA17_1==VAR) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 266;}

				else if ((LA17_1==CONST) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 267;}

				else if ((LA17_1==FUNCTION) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 268;}

				input.Seek(index17_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((LA17_1==IDENT)) {s = 269;}

				else if ((LA17_1==PUBLIC)) {s = 270;}

				else if ((LA17_1==PRIVATE)) {s = 271;}

				else if ((LA17_1==PROTECTED)) {s = 272;}

				else if ((LA17_1==INTERNAL)) {s = 273;}

				else if ((LA17_1==STATIC)) {s = 274;}

				else if ((LA17_1==247)) {s = 275;}

				else if ((LA17_1==245)) {s = 276;}

				else if ((LA17_1==246)) {s = 277;}

				else if ((LA17_1==253)) {s = 278;}

				else if ((LA17_1==DYNAMIC)) {s = 279;}

				else if ((LA17_1==251)) {s = 280;}

				else if ((LA17_1==VAR) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 281;}

				else if ((LA17_1==CONST) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 282;}

				else if ((LA17_1==FUNCTION) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 283;}

				input.Seek(index17_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((LA17_1==IDENT)) {s = 284;}

				else if ((LA17_1==PUBLIC)) {s = 285;}

				else if ((LA17_1==PRIVATE)) {s = 286;}

				else if ((LA17_1==PROTECTED)) {s = 287;}

				else if ((LA17_1==INTERNAL)) {s = 288;}

				else if ((LA17_1==STATIC)) {s = 289;}

				else if ((LA17_1==247)) {s = 290;}

				else if ((LA17_1==245)) {s = 291;}

				else if ((LA17_1==246)) {s = 292;}

				else if ((LA17_1==253)) {s = 293;}

				else if ((LA17_1==DYNAMIC)) {s = 294;}

				else if ((LA17_1==251)) {s = 295;}

				else if ((LA17_1==VAR) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 296;}

				else if ((LA17_1==CONST) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 297;}

				else if ((LA17_1==FUNCTION) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 298;}

				else if (((LA17_1>=AS && LA17_1<=ASSIGN)||(LA17_1>=BAND && LA17_1<=BAND_ASSIGN)||(LA17_1>=BOR && LA17_1<=BOR_ASSIGN)||(LA17_1>=BSR && LA17_1<=BXOR_ASSIGN)||LA17_1==COMMA||LA17_1==DEC||(LA17_1>=DIV && LA17_1<=DIV_ASSIGN)||LA17_1==DOT||LA17_1==E4X_DESC||LA17_1==EQUAL||LA17_1==GE||LA17_1==GT||LA17_1==INC||(LA17_1>=IS && LA17_1<=LBRACK)||LA17_1==LE||(LA17_1>=LOR && LA17_1<=LT)||(LA17_1>=MINUS && LA17_1<=MINUS_ASSIGN)||LA17_1==MOD||LA17_1==MOD_ASSIGN||LA17_1==NOT_EQUAL||(LA17_1>=PLUS && LA17_1<=PLUS_ASSIGN)||LA17_1==QUESTION||LA17_1==SEMI||(LA17_1>=SL && LA17_1<=SL_ASSIGN)||(LA17_1>=SR && LA17_1<=STAR_ASSIGN)||(LA17_1>=STRICT_EQUAL && LA17_1<=STRICT_NOT_EQUAL)||LA17_1==242||LA17_1==250||LA17_1==252)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((LA17_1==IDENT)) {s = 324;}

				else if ((LA17_1==PUBLIC)) {s = 325;}

				else if ((LA17_1==PRIVATE)) {s = 326;}

				else if ((LA17_1==PROTECTED)) {s = 327;}

				else if ((LA17_1==INTERNAL)) {s = 328;}

				else if ((LA17_1==STATIC)) {s = 329;}

				else if ((LA17_1==247)) {s = 330;}

				else if ((LA17_1==245)) {s = 331;}

				else if ((LA17_1==246)) {s = 332;}

				else if ((LA17_1==253)) {s = 333;}

				else if ((LA17_1==DYNAMIC)) {s = 334;}

				else if ((LA17_1==251)) {s = 335;}

				else if ((LA17_1==VAR) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 336;}

				else if ((LA17_1==CONST) && (EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((LA17_1==FUNCTION) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 338;}

				input.Seek(index17_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((LA17_1==GET) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 361;}

				else if ((LA17_1==SET) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 362;}

				else if ((LA17_1==IDENT) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 363;}

				else if ((LA17_1==USE) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 364;}

				else if ((LA17_1==XML) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 365;}

				else if ((LA17_1==TRACE) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 366;}

				else if ((LA17_1==DYNAMIC) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 367;}

				else if ((LA17_1==NAMESPACE) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 368;}

				else if ((LA17_1==IS) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 369;}

				else if ((LA17_1==AS) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 370;}

				else if ((LA17_1==SUPER) && (EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				else if ((LA17_1==LPAREN)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred9_AS3T_fragment))) {s = 373;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred9_AS3T_fragment))) {s = 373;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred9_AS3T_fragment))) {s = 373;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred9_AS3T_fragment))) {s = 373;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred9_AS3T_fragment))) {s = 373;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred9_AS3T_fragment))) {s = 373;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred9_AS3T_fragment))) {s = 373;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred9_AS3T_fragment))) {s = 373;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred9_AS3T_fragment))) {s = 373;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred9_AS3T_fragment))) {s = 373;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred9_AS3T_fragment))) {s = 373;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 67:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 68:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 69:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 70:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 71:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 72:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 73:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 74:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 75:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 76:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 77:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 78:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 79:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 80:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 81:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 82:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 83:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 84:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 85:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 86:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 87:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 88:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 89:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 90:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 91:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 92:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 93:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 94:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 95:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 96:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 97:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 98:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 99:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 100:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 101:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 102:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 103:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 104:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 105:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 106:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 107:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 108:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 109:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 110:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 111:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 112:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 113:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 114:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 115:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 116:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 117:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 118:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 119:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 120:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 121:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 122:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 123:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 124:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 125:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 126:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 127:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 128:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 129:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 130:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 131:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 132:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 133:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 134:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 135:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 136:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 137:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 138:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 139:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 140:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 141:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 142:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 143:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 144:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 145:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 146:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 147:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 148:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 149:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 150:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 151:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 152:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 153:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 154:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 155:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 156:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 157:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 158:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 159:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 160:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 161:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 162:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 163:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 164:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 165:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 166:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 167:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((EvaluatePredicate(synpred11_AS3T_fragment))) {s = 371;}

				input.Seek(index17_1);
				break;
			}
		case 168:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 169:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 170:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 171:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 172:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 173:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 174:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 175:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 176:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 177:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 178:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 179:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 180:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 181:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 182:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 183:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 184:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 185:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 186:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 187:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 188:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}
		case 189:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred10_AS3T_fragment))) {s = 337;}

				else if ((true)) {s = 19;}

				input.Seek(index17_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 17, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA19 : DFA
	{
		private const string DFA19_eotS =
			"\x45\xFFFF";
		private const string DFA19_eofS =
			"\x1\x4\x44\xFFFF";
		private const string DFA19_minS =
			"\x1\xF\x44\xFFFF";
		private const string DFA19_maxS =
			"\x1\x102\x44\xFFFF";
		private const string DFA19_acceptS =
			"\x1\xFFFF\x2\x1\x1\xFFFF\x1\x2\x40\xFFFF";
		private const string DFA19_specialS =
			"\x45\xFFFF}>";
		private static readonly string[] DFA19_transitionS =
			{
				"\x1\x4\x5\xFFFF\x1\x4\x3\xFFFF\x1\x4\x8\xFFFF\x1\x4\x3\xFFFF\x1\x1\x3"+
				"\xFFFF\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x2\x4\x2\xFFFF\x1\x4\x3\xFFFF\x1"+
				"\x4\x3\xFFFF\x2\x4\x11\xFFFF\x3\x4\x8\xFFFF\x1\x4\x3\xFFFF\x1\x4\x2"+
				"\xFFFF\x2\x4\x2\xFFFF\x1\x4\x3\xFFFF\x1\x4\x2\xFFFF\x1\x4\x1\xFFFF\x1"+
				"\x4\x1\xFFFF\x2\x4\x2\xFFFF\x2\x4\x7\xFFFF\x1\x4\x2\xFFFF\x1\x4\x7\xFFFF"+
				"\x1\x4\x7\xFFFF\x1\x4\x2\xFFFF\x1\x4\x4\xFFFF\x1\x4\x3\xFFFF\x1\x4\x8"+
				"\xFFFF\x1\x4\x6\xFFFF\x1\x4\x2\xFFFF\x2\x4\x3\xFFFF\x1\x4\x2\xFFFF\x1"+
				"\x4\x2\xFFFF\x1\x4\x2\xFFFF\x2\x4\x5\xFFFF\x1\x1\x3\xFFFF\x1\x4\x2\xFFFF"+
				"\x4\x4\x5\xFFFF\x2\x4\x6\xFFFF\x2\x4\x6\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1"+
				"\xFFFF\x1\x4\x5\xFFFF\x1\x4\x5\xFFFF\x4\x4\x1\xFFFF\x1\x4\x1\xFFFF\x1"+
				"\x4\x1\xFFFF\x5\x4\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
		private static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
		private static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
		private static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
		private static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
		private static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
		private static readonly short[][] DFA19_transition;

		static DFA19()
		{
			int numStates = DFA19_transitionS.Length;
			DFA19_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA19_transition[i] = DFA.UnpackEncodedString(DFA19_transitionS[i]);
			}
		}

		public DFA19( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 19;
			this.eot = DFA19_eot;
			this.eof = DFA19_eof;
			this.min = DFA19_min;
			this.max = DFA19_max;
			this.accept = DFA19_accept;
			this.special = DFA19_special;
			this.transition = DFA19_transition;
		}

		public override string Description { get { return "494:3: ( typeExpression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x44\xFFFF";
		private const string DFA20_eofS =
			"\x1\x2\x43\xFFFF";
		private const string DFA20_minS =
			"\x1\xF\x1\x0\x42\xFFFF";
		private const string DFA20_maxS =
			"\x1\x102\x1\x0\x42\xFFFF";
		private const string DFA20_acceptS =
			"\x2\xFFFF\x1\x2\x40\xFFFF\x1\x1";
		private const string DFA20_specialS =
			"\x1\xFFFF\x1\x0\x42\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x1\x2\x5\xFFFF\x1\x2\x3\xFFFF\x1\x2\x8\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x3\xFFFF\x2"+
				"\x2\x11\xFFFF\x3\x2\x8\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x2\x2\x2"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x2\xFFFF\x1\x2\x1\x1\x7\xFFFF\x1\x2\x2\xFFFF\x1\x2\x7\xFFFF\x1\x2"+
				"\x7\xFFFF\x1\x2\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2\x3\xFFFF\x1\x2\x8\xFFFF"+
				"\x1\x2\x6\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1\x2\x2\xFFFF\x4\x2\x5\xFFFF\x2"+
				"\x2\x6\xFFFF\x2\x2\x6\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\x5\xFFFF\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "513:1: maybeBlock options {k=1; } : ( ( LCURLY )=> block |);"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition20(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA20_1 = input.LA(1);
		int index20_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred12_AS3T_fragment))) {s = 67;}

				else if ((true)) {s = 2;}

				input.Seek(index20_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 20, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA45 : DFA
	{
		private const string DFA45_eotS =
			"\x45\xFFFF";
		private const string DFA45_eofS =
			"\x45\xFFFF";
		private const string DFA45_minS =
			"\xE\xF\x1\xFFFF\xB\x10\x1\xFFFF\x1\xF\xD\x10\x1\xF\x1\x10\x4\x2F\xA\x10"+
			"\x1\xF\xB\x10";
		private const string DFA45_maxS =
			"\x1\x102\x2\xE8\xB\xFC\x1\xFFFF\xB\x102\x1\xFFFF\x1\xE8\xD\xBD\x1\xE8"+
			"\x1\xBD\x4\x2F\xA\xBD\x1\xE8\xB\xBD";
		private const string DFA45_acceptS =
			"\xE\xFFFF\x1\x2\xB\xFFFF\x1\x1\x2A\xFFFF";
		private const string DFA45_specialS =
			"\x45\xFFFF}>";
		private static readonly string[] DFA45_transitionS =
			{
				"\x1\xA\x5\xFFFF\x1\xE\x14\xFFFF\x1\x2\x5\xFFFF\x2\xE\xA\xFFFF\x1\x7"+
				"\x1\xE\x11\xFFFF\x2\xE\x9\xFFFF\x1\xE\x3\xFFFF\x1\xB\x2\xFFFF\x1\xE"+
				"\x1\x3\x9\xFFFF\x1\xE\x3\xFFFF\x1\xE\x1\x9\x2\xFFFF\x2\xE\x7\xFFFF\x1"+
				"\xE\x2\xFFFF\x1\xE\x7\xFFFF\x1\xE\x7\xFFFF\x1\x8\x2\xFFFF\x1\xE\x4\xFFFF"+
				"\x1\xE\x3\xFFFF\x1\xE\x8\xFFFF\x1\xE\x6\xFFFF\x1\xE\x2\xFFFF\x2\xE\x6"+
				"\xFFFF\x1\xE\x5\xFFFF\x1\xE\x1\xC\xC\xFFFF\x2\xE\x1\xD\x6\xFFFF\x1\x6"+
				"\x1\xE\x6\xFFFF\x1\x4\x1\x1\xA\xFFFF\x1\x5\x5\xFFFF\x1\xE\x5\xFFFF\x1"+
				"\xE\xB\xFFFF\x3\xE",
				"\x1\x16\x2C\xFFFF\x1\x13\x21\xFFFF\x1\x17\x3\xFFFF\x1\xF\xE\xFFFF\x1"+
				"\x15\x1E\xFFFF\x1\x14\x2D\xFFFF\x1\x18\xE\xFFFF\x1\x19\x6\xFFFF\x1\x12"+
				"\x7\xFFFF\x1\x10\xB\xFFFF\x1\x11",
				"\x1\x16\x2C\xFFFF\x1\x13\x21\xFFFF\x1\x17\x3\xFFFF\x1\xF\xE\xFFFF\x1"+
				"\x15\x1E\xFFFF\x1\x14\x2D\xFFFF\x1\x18\xE\xFFFF\x1\x19\x6\xFFFF\x1\x12"+
				"\x7\xFFFF\x1\x10\xB\xFFFF\x1\x11",
				"\x2\xE\x1\xFFFF\x2\xE\x3\xFFFF\x2\xE\x3\xFFFF\x4\xE\x7\xFFFF\x1\xE\x7"+
				"\xFFFF\x2\xE\x5\xFFFF\x2\xE\x1\xFFFF\x1\xE\x4\xFFFF\x1\xE\x7\xFFFF\x1"+
				"\xE\x16\xFFFF\x1\xE\x1\xFFFF\x1\xE\xB\xFFFF\x1\x1A\x1\xE\x4\xFFFF\x4"+
				"\xE\x1\xFFFF\x1\xE\x7\xFFFF\x4\xE\x6\xFFFF\x2\xE\x1\xFFFF\x1\xE\x2\xFFFF"+
				"\x1\xE\x8\xFFFF\x1\xE\xD\xFFFF\x2\xE\xB\xFFFF\x1\xE\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\xE\x1\xFFFF\x4\xE\x3\xFFFF\x2\xE\x27\xFFFF\x1\xE\x7\xFFFF"+
				"\x1\xE\x1\xFFFF\x1\xE",
				"\x2\xE\x1\xFFFF\x2\xE\x3\xFFFF\x2\xE\x3\xFFFF\x4\xE\x7\xFFFF\x1\xE\x8"+
				"\xFFFF\x1\xE\x5\xFFFF\x2\xE\x1\xFFFF\x1\xE\x4\xFFFF\x1\xE\x7\xFFFF\x1"+
				"\xE\x16\xFFFF\x1\xE\x1\xFFFF\x1\xE\xB\xFFFF\x1\x1A\x1\xE\x4\xFFFF\x4"+
				"\xE\x1\xFFFF\x1\xE\x7\xFFFF\x4\xE\x6\xFFFF\x2\xE\x1\xFFFF\x1\xE\x2\xFFFF"+
				"\x1\xE\x8\xFFFF\x1\xE\xD\xFFFF\x2\xE\xB\xFFFF\x1\xE\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\xE\x1\xFFFF\x4\xE\x3\xFFFF\x2\xE\x27\xFFFF\x1\xE\x7\xFFFF"+
				"\x1\xE\x1\xFFFF\x1\xE",
				"\x2\xE\x1\xFFFF\x2\xE\x3\xFFFF\x2\xE\x3\xFFFF\x4\xE\x7\xFFFF\x1\xE\x8"+
				"\xFFFF\x1\xE\x5\xFFFF\x2\xE\x1\xFFFF\x1\xE\x4\xFFFF\x1\xE\x7\xFFFF\x1"+
				"\xE\x16\xFFFF\x1\xE\x1\xFFFF\x1\xE\xB\xFFFF\x1\x1A\x1\xE\x4\xFFFF\x4"+
				"\xE\x1\xFFFF\x1\xE\x7\xFFFF\x4\xE\x6\xFFFF\x2\xE\x1\xFFFF\x1\xE\x2\xFFFF"+
				"\x1\xE\x8\xFFFF\x1\xE\xD\xFFFF\x2\xE\xB\xFFFF\x1\xE\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\xE\x1\xFFFF\x4\xE\x3\xFFFF\x2\xE\x27\xFFFF\x1\xE\x7\xFFFF"+
				"\x1\xE\x1\xFFFF\x1\xE",
				"\x2\xE\x1\xFFFF\x2\xE\x3\xFFFF\x2\xE\x3\xFFFF\x4\xE\x7\xFFFF\x1\xE\x8"+
				"\xFFFF\x1\xE\x5\xFFFF\x2\xE\x1\xFFFF\x1\xE\x4\xFFFF\x1\xE\x7\xFFFF\x1"+
				"\xE\x16\xFFFF\x1\xE\x1\xFFFF\x1\xE\xB\xFFFF\x1\x1A\x1\xE\x4\xFFFF\x4"+
				"\xE\x1\xFFFF\x1\xE\x7\xFFFF\x4\xE\x6\xFFFF\x2\xE\x1\xFFFF\x1\xE\x2\xFFFF"+
				"\x1\xE\x8\xFFFF\x1\xE\xD\xFFFF\x2\xE\xB\xFFFF\x1\xE\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\xE\x1\xFFFF\x4\xE\x3\xFFFF\x2\xE\x27\xFFFF\x1\xE\x7\xFFFF"+
				"\x1\xE\x1\xFFFF\x1\xE",
				"\x2\xE\x1\xFFFF\x2\xE\x3\xFFFF\x2\xE\x3\xFFFF\x4\xE\x7\xFFFF\x1\xE\x8"+
				"\xFFFF\x1\xE\x5\xFFFF\x2\xE\x1\xFFFF\x1\xE\x4\xFFFF\x1\xE\x7\xFFFF\x1"+
				"\xE\x16\xFFFF\x1\xE\x1\xFFFF\x1\xE\xB\xFFFF\x1\x1A\x1\xE\x4\xFFFF\x4"+
				"\xE\x1\xFFFF\x1\xE\x7\xFFFF\x4\xE\x6\xFFFF\x2\xE\x1\xFFFF\x1\xE\x2\xFFFF"+
				"\x1\xE\x8\xFFFF\x1\xE\xD\xFFFF\x2\xE\xB\xFFFF\x1\xE\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\xE\x1\xFFFF\x4\xE\x3\xFFFF\x2\xE\x27\xFFFF\x1\xE\x7\xFFFF"+
				"\x1\xE\x1\xFFFF\x1\xE",
				"\x2\xE\x1\xFFFF\x2\xE\x3\xFFFF\x2\xE\x3\xFFFF\x4\xE\x7\xFFFF\x1\xE\x8"+
				"\xFFFF\x1\xE\x5\xFFFF\x2\xE\x1\xFFFF\x1\xE\x4\xFFFF\x1\xE\x7\xFFFF\x1"+
				"\xE\x16\xFFFF\x1\xE\x1\xFFFF\x1\xE\xB\xFFFF\x1\x1A\x1\xE\x4\xFFFF\x4"+
				"\xE\x1\xFFFF\x1\xE\x7\xFFFF\x4\xE\x6\xFFFF\x2\xE\x1\xFFFF\x1\xE\x2\xFFFF"+
				"\x1\xE\x8\xFFFF\x1\xE\xD\xFFFF\x2\xE\xB\xFFFF\x1\xE\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\xE\x1\xFFFF\x4\xE\x3\xFFFF\x2\xE\x27\xFFFF\x1\xE\x7\xFFFF"+
				"\x1\xE\x1\xFFFF\x1\xE",
				"\x2\xE\x1\xFFFF\x2\xE\x3\xFFFF\x2\xE\x3\xFFFF\x4\xE\x7\xFFFF\x1\xE\x8"+
				"\xFFFF\x1\xE\x5\xFFFF\x2\xE\x1\xFFFF\x1\xE\x4\xFFFF\x1\xE\x7\xFFFF\x1"+
				"\xE\x16\xFFFF\x1\xE\x1\xFFFF\x1\xE\xB\xFFFF\x1\x1A\x1\xE\x4\xFFFF\x4"+
				"\xE\x1\xFFFF\x1\xE\x7\xFFFF\x4\xE\x6\xFFFF\x2\xE\x1\xFFFF\x1\xE\x2\xFFFF"+
				"\x1\xE\x8\xFFFF\x1\xE\xD\xFFFF\x2\xE\xB\xFFFF\x1\xE\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\xE\x1\xFFFF\x4\xE\x3\xFFFF\x2\xE\x27\xFFFF\x1\xE\x7\xFFFF"+
				"\x1\xE\x1\xFFFF\x1\xE",
				"\x2\xE\x1\xFFFF\x2\xE\x3\xFFFF\x2\xE\x3\xFFFF\x4\xE\x7\xFFFF\x1\xE\x8"+
				"\xFFFF\x1\xE\x5\xFFFF\x2\xE\x1\xFFFF\x1\xE\x4\xFFFF\x1\xE\x7\xFFFF\x1"+
				"\xE\x16\xFFFF\x1\xE\x1\xFFFF\x1\xE\xB\xFFFF\x1\x1A\x1\xE\x4\xFFFF\x4"+
				"\xE\x1\xFFFF\x1\xE\x7\xFFFF\x4\xE\x6\xFFFF\x2\xE\x1\xFFFF\x1\xE\x2\xFFFF"+
				"\x1\xE\x8\xFFFF\x1\xE\xD\xFFFF\x2\xE\xB\xFFFF\x1\xE\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\xE\x1\xFFFF\x4\xE\x3\xFFFF\x2\xE\x27\xFFFF\x1\xE\x7\xFFFF"+
				"\x1\xE\x1\xFFFF\x1\xE",
				"\x2\xE\x1\xFFFF\x2\xE\x3\xFFFF\x2\xE\x3\xFFFF\x4\xE\x7\xFFFF\x1\xE\x8"+
				"\xFFFF\x1\xE\x5\xFFFF\x2\xE\x1\xFFFF\x1\xE\x4\xFFFF\x1\xE\x7\xFFFF\x1"+
				"\xE\x16\xFFFF\x1\xE\x1\xFFFF\x1\xE\xB\xFFFF\x1\x1A\x1\xE\x4\xFFFF\x4"+
				"\xE\x1\xFFFF\x1\xE\x7\xFFFF\x4\xE\x6\xFFFF\x2\xE\x1\xFFFF\x1\xE\x2\xFFFF"+
				"\x1\xE\x8\xFFFF\x1\xE\xD\xFFFF\x2\xE\xB\xFFFF\x1\xE\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\xE\x1\xFFFF\x4\xE\x3\xFFFF\x2\xE\x27\xFFFF\x1\xE\x7\xFFFF"+
				"\x1\xE\x1\xFFFF\x1\xE",
				"\x2\xE\x1\xFFFF\x2\xE\x3\xFFFF\x2\xE\x3\xFFFF\x4\xE\x7\xFFFF\x1\xE\x8"+
				"\xFFFF\x1\xE\x5\xFFFF\x2\xE\x1\xFFFF\x1\xE\x4\xFFFF\x1\xE\x7\xFFFF\x1"+
				"\xE\x16\xFFFF\x1\xE\x1\xFFFF\x1\xE\xB\xFFFF\x1\x1A\x1\xE\x4\xFFFF\x4"+
				"\xE\x1\xFFFF\x1\xE\x7\xFFFF\x4\xE\x6\xFFFF\x2\xE\x1\xFFFF\x1\xE\x2\xFFFF"+
				"\x1\xE\x8\xFFFF\x1\xE\xD\xFFFF\x2\xE\xB\xFFFF\x1\xE\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\xE\x1\xFFFF\x4\xE\x3\xFFFF\x2\xE\x27\xFFFF\x1\xE\x7\xFFFF"+
				"\x1\xE\x1\xFFFF\x1\xE",
				"\x2\xE\x1\xFFFF\x2\xE\x3\xFFFF\x2\xE\x3\xFFFF\x4\xE\x7\xFFFF\x1\xE\x8"+
				"\xFFFF\x1\xE\x5\xFFFF\x2\xE\x1\xFFFF\x1\xE\x4\xFFFF\x1\xE\x7\xFFFF\x1"+
				"\xE\x16\xFFFF\x1\xE\x1\xFFFF\x1\xE\xB\xFFFF\x1\x1A\x1\xE\x4\xFFFF\x4"+
				"\xE\x1\xFFFF\x1\xE\x7\xFFFF\x4\xE\x6\xFFFF\x2\xE\x1\xFFFF\x1\xE\x2\xFFFF"+
				"\x1\xE\x8\xFFFF\x1\xE\xD\xFFFF\x2\xE\xB\xFFFF\x1\xE\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\xE\x1\xFFFF\x4\xE\x3\xFFFF\x2\xE\x27\xFFFF\x1\xE\x7\xFFFF"+
				"\x1\xE\x1\xFFFF\x1\xE",
				"",
				"\x1\xE\x15\xFFFF\x1\x1B\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE\x6\xFFFF"+
				"\x1\x1D\x3D\xFFFF\x1\x1C",
				"\x1\xE\x15\xFFFF\x1\x1B\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE\x6\xFFFF"+
				"\x1\x1D\x3D\xFFFF\x1\x1C",
				"\x1\xE\x15\xFFFF\x1\x1B\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE\x6\xFFFF"+
				"\x1\x1D\x3D\xFFFF\x1\x1C",
				"\x1\xE\x15\xFFFF\x1\x1B\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE\x6\xFFFF"+
				"\x1\x1D\x3D\xFFFF\x1\x1C",
				"\x1\xE\x15\xFFFF\x1\x1B\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE\x6\xFFFF"+
				"\x1\x1D\x3D\xFFFF\x1\x1C",
				"\x1\xE\x15\xFFFF\x1\x1B\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE\x6\xFFFF"+
				"\x1\x1D\x3D\xFFFF\x1\x1C",
				"\x1\xE\x15\xFFFF\x1\x1B\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE\x6\xFFFF"+
				"\x1\x1D\x3D\xFFFF\x1\x1C",
				"\x1\xE\x15\xFFFF\x1\x1B\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE\x6\xFFFF"+
				"\x1\x1D\x3D\xFFFF\x1\x1C",
				"\x1\xE\x15\xFFFF\x1\x1B\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE\x6\xFFFF"+
				"\x1\x1D\x3D\xFFFF\x1\x1C",
				"\x1\xE\x15\xFFFF\x1\x1B\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE\x6\xFFFF"+
				"\x1\x1D\x3D\xFFFF\x1\x1C",
				"\x1\xE\x15\xFFFF\x1\x1B\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE\x6\xFFFF"+
				"\x1\x1D\x3D\xFFFF\x1\x1C",
				"",
				"\x1\x25\x2C\xFFFF\x1\x22\x21\xFFFF\x1\x26\x3\xFFFF\x1\x1E\xE\xFFFF\x1"+
				"\x24\x1E\xFFFF\x1\x23\x2D\xFFFF\x1\x27\xE\xFFFF\x1\x28\x6\xFFFF\x1\x21"+
				"\x7\xFFFF\x1\x1F\xB\xFFFF\x1\x20",
				"\x1\xE\x16\xFFFF\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x43\xFFFF\x1\x1A\x51\xFFFF\x1\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\x35\x2C\xFFFF\x1\x32\x21\xFFFF\x1\x36\x3\xFFFF\x1\x2A\xD\xFFFF\x1"+
				"\x2E\x1\x34\x1E\xFFFF\x1\x33\x1B\xFFFF\x1\x2C\x2\xFFFF\x1\x2D\x1\x2B"+
				"\xD\xFFFF\x1\x37\xE\xFFFF\x1\x38\x6\xFFFF\x1\x31\x7\xFFFF\x1\x2F\xB"+
				"\xFFFF\x1\x30",
				"\x1\xE\x16\xFFFF\x1\xE\x7\xFFFF\x1\x39\x9\xFFFF\x1\x29\x31\xFFFF\x1"+
				"\x1A\x51\xFFFF\x1\xE",
				"\x1\x39",
				"\x1\x39",
				"\x1\x39",
				"\x1\x39",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\x41\x2C\xFFFF\x1\x3E\x21\xFFFF\x1\x42\x3\xFFFF\x1\x3A\xE\xFFFF\x1"+
				"\x40\x1E\xFFFF\x1\x3F\x2D\xFFFF\x1\x43\xE\xFFFF\x1\x44\x6\xFFFF\x1\x3D"+
				"\x7\xFFFF\x1\x3B\xB\xFFFF\x1\x3C",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE",
				"\x1\xE\x16\xFFFF\x1\xE\x11\xFFFF\x1\x29\x31\xFFFF\x1\x1A\x51\xFFFF\x1"+
				"\xE"
			};

		private static readonly short[] DFA45_eot = DFA.UnpackEncodedString(DFA45_eotS);
		private static readonly short[] DFA45_eof = DFA.UnpackEncodedString(DFA45_eofS);
		private static readonly char[] DFA45_min = DFA.UnpackEncodedStringToUnsignedChars(DFA45_minS);
		private static readonly char[] DFA45_max = DFA.UnpackEncodedStringToUnsignedChars(DFA45_maxS);
		private static readonly short[] DFA45_accept = DFA.UnpackEncodedString(DFA45_acceptS);
		private static readonly short[] DFA45_special = DFA.UnpackEncodedString(DFA45_specialS);
		private static readonly short[][] DFA45_transition;

		static DFA45()
		{
			int numStates = DFA45_transitionS.Length;
			DFA45_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA45_transition[i] = DFA.UnpackEncodedString(DFA45_transitionS[i]);
			}
		}

		public DFA45( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 45;
			this.eot = DFA45_eot;
			this.eof = DFA45_eof;
			this.min = DFA45_min;
			this.max = DFA45_max;
			this.accept = DFA45_accept;
			this.special = DFA45_special;
			this.transition = DFA45_transition;
		}

		public override string Description { get { return "772:3: ( forInClause RPAREN statement | traditionalForClause RPAREN statement )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _compilationUnit_in_program475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _as2CompilationUnit_in_compilationUnit488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _as3CompilationUnit_in_compilationUnit492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _importDefinition_in_as2CompilationUnit510 = new BitSet(new ulong[]{0x1000000400000000UL,0x1620400000000UL,0x1900000000000UL,0x28E0000000000100UL});
		public static readonly BitSet _as2Type_in_as2CompilationUnit515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _as2IncludeDirective_in_as2Type530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _as2ClassDefinition_in_as2Type543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _as2InterfaceDefinition_in_as2Type556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _packageDecl_in_as3CompilationUnit575 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _packageBlockEntry_in_as3CompilationUnit579 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_as3CompilationUnit584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PACKAGE_in_packageDecl600 = new BitSet(new ulong[]{0x1000000000008000UL,0x22000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _identifierStar_in_packageDecl604 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _LCURLY_in_packageDecl611 = new BitSet(new ulong[]{0x3113140402208000UL,0x2033522644038000UL,0x6491902011090101UL,0xEAF0415030307900UL,0x7UL});
		public static readonly BitSet _packageBlockEntry_in_packageDecl622 = new BitSet(new ulong[]{0x3113140402208000UL,0x2033522644038000UL,0x6491902011090101UL,0xEAF0415030307900UL,0x7UL});
		public static readonly BitSet _RCURLY_in_packageDecl627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _importDefinition_in_packageBlockEntry672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _includeDirective_in_packageBlockEntry680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _useNamespaceDirective_in_packageBlockEntry688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_packageBlockEntry704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespaceDefinition_in_packageBlockEntry720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDefinition_in_packageBlockEntry742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDefinition_in_packageBlockEntry758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDefinition_in_packageBlockEntry774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDefinition_in_packageBlockEntry790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_packageBlockEntry804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_endOfFile820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDefinition836 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _identifierStar_in_importDefinition838 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_importDefinition842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_semi873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_classDefinition890 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _CLASS_in_classDefinition894 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _ident_in_classDefinition905 = new BitSet(new ulong[]{0x0UL,0x20008000002000UL});
		public static readonly BitSet _classExtendsClause_in_classDefinition911 = new BitSet(new ulong[]{0x0UL,0x20008000000000UL});
		public static readonly BitSet _implementsClause_in_classDefinition916 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _typeBlock_in_classDefinition921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_as2ClassDefinition949 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _CLASS_in_as2ClassDefinition953 = new BitSet(new ulong[]{0x1000000000008000UL,0x3000440000000UL,0x4001900000010000UL,0x10010102000UL});
		public static readonly BitSet _identifier_in_as2ClassDefinition955 = new BitSet(new ulong[]{0x0UL,0x20008000002000UL});
		public static readonly BitSet _classExtendsClause_in_as2ClassDefinition959 = new BitSet(new ulong[]{0x0UL,0x20008000000000UL});
		public static readonly BitSet _implementsClause_in_as2ClassDefinition964 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _typeBlock_in_as2ClassDefinition969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceDefinition988 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _INTERFACE_in_interfaceDefinition992 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _ident_in_interfaceDefinition994 = new BitSet(new ulong[]{0x0UL,0x20000000002000UL});
		public static readonly BitSet _interfaceExtendsClause_in_interfaceDefinition998 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _typeBlock_in_interfaceDefinition1003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_as2InterfaceDefinition1022 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _INTERFACE_in_as2InterfaceDefinition1026 = new BitSet(new ulong[]{0x1000000000008000UL,0x3000440000000UL,0x4001900000010000UL,0x10010102000UL});
		public static readonly BitSet _identifier_in_as2InterfaceDefinition1028 = new BitSet(new ulong[]{0x0UL,0x20000000002000UL});
		public static readonly BitSet _interfaceExtendsClause_in_as2InterfaceDefinition1032 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _typeBlock_in_as2InterfaceDefinition1037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_classExtendsClause1056 = new BitSet(new ulong[]{0x1000000000008000UL,0x3000440000000UL,0x4001900000010000UL,0x10010102000UL});
		public static readonly BitSet _identifier_in_classExtendsClause1058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_interfaceExtendsClause1085 = new BitSet(new ulong[]{0x1000000000008000UL,0x3000440000000UL,0x4001900000010000UL,0x10010102000UL});
		public static readonly BitSet _identifier_in_interfaceExtendsClause1087 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _COMMA_in_interfaceExtendsClause1091 = new BitSet(new ulong[]{0x1000000000008000UL,0x3000440000000UL,0x4001900000010000UL,0x10010102000UL});
		public static readonly BitSet _identifier_in_interfaceExtendsClause1093 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _IMPLEMENTS_in_implementsClause1120 = new BitSet(new ulong[]{0x1000000000008000UL,0x3000440000000UL,0x4001900000010000UL,0x10010102000UL});
		public static readonly BitSet _identifier_in_implementsClause1124 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _COMMA_in_implementsClause1128 = new BitSet(new ulong[]{0x1000000000008000UL,0x3000440000000UL,0x4001900000010000UL,0x10010102000UL});
		public static readonly BitSet _identifier_in_implementsClause1132 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _LCURLY_in_typeBlock1168 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033122644038000UL,0x6491902011090101UL,0xEAF0415030307900UL,0x7UL});
		public static readonly BitSet _typeBlockEntry_in_typeBlock1178 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033122644038000UL,0x6491902011090101UL,0xEAF0415030307900UL,0x7UL});
		public static readonly BitSet _RCURLY_in_typeBlock1183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _includeDirective_in_typeBlockEntry1218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _importDefinition_in_typeBlockEntry1223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_typeBlockEntry1236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDefinition_in_typeBlockEntry1250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDefinition_in_typeBlockEntry1264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_typeBlockEntry1270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCLUDE_DIRECTIVE_in_as2IncludeDirective1281 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x1800UL});
		public static readonly BitSet _stringLiteral_in_as2IncludeDirective1285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _249_in_includeDirective1296 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x1800UL});
		public static readonly BitSet _stringLiteral_in_includeDirective1298 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_includeDirective1302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodDefinition1335 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _FUNCTION_in_methodDefinition1339 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _accessorRole_in_methodDefinition1349 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _methodName_in_methodDefinition1354 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _parameterDeclarationList_in_methodDefinition1358 = new BitSet(new ulong[]{0x4000000000UL,0x20000000000000UL,0x0UL,0x10UL,0x4UL});
		public static readonly BitSet _typeExpression_in_methodDefinition1362 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _maybeBlock_in_methodDefinition1373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_maybeBlock1446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_methodName1477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GET_in_accessorRole1497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_accessorRole1504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_namespaceDefinition1517 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _NAMESPACE_in_namespaceDefinition1519 = new BitSet(new ulong[]{0x0UL,0x1000400000000UL,0x1900000000000UL});
		public static readonly BitSet _namespaceName_in_namespaceDefinition1521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_useNamespaceDirective1535 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _NAMESPACE_in_useNamespaceDirective1537 = new BitSet(new ulong[]{0x0UL,0x1000400000000UL,0x1900000000000UL});
		public static readonly BitSet _namespaceName_in_useNamespaceDirective1539 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_useNamespaceDirective1543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_variableDefinition1559 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _varOrConst_in_variableDefinition1563 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _variableDeclarator_in_variableDefinition1567 = new BitSet(new ulong[]{0x8000000000UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _COMMA_in_variableDefinition1572 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _variableDeclarator_in_variableDefinition1576 = new BitSet(new ulong[]{0x8000000000UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_variableDefinition1584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _varOrConst_in_declaration1612 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _variableDeclarator_in_declaration1614 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _declarationTail_in_declaration1616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_varOrConst1650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONST_in_varOrConst1661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_declarationTail1681 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _variableDeclarator_in_declarationTail1683 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _ASSIGN_in_variableInitializer1701 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _expression_in_variableInitializer1703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_variableDeclarator1739 = new BitSet(new ulong[]{0x4000010002UL,0x0UL,0x0UL,0x10UL,0x4UL});
		public static readonly BitSet _typeExpression_in_variableDeclarator1741 = new BitSet(new ulong[]{0x10002UL});
		public static readonly BitSet _variableInitializer_in_variableDeclarator1744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_parameterDeclarationList1789 = new BitSet(new ulong[]{0x1000040000008000UL,0x2000440000000UL,0x5200000000010000UL,0x10010102000UL});
		public static readonly BitSet _parameterDeclaration_in_parameterDeclarationList1795 = new BitSet(new ulong[]{0x8000000000UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _COMMA_in_parameterDeclarationList1801 = new BitSet(new ulong[]{0x1000040000008000UL,0x2000440000000UL,0x4200000000010000UL,0x10010102000UL});
		public static readonly BitSet _parameterDeclaration_in_parameterDeclarationList1803 = new BitSet(new ulong[]{0x8000000000UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _RPAREN_in_parameterDeclarationList1814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _basicParameterDeclaration_in_parameterDeclaration1834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameterRestDeclaration_in_parameterDeclaration1838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONST_in_basicParameterDeclaration1854 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _ident_in_basicParameterDeclaration1857 = new BitSet(new ulong[]{0x4000010002UL,0x0UL,0x0UL,0x10UL,0x4UL});
		public static readonly BitSet _typeExpression_in_basicParameterDeclaration1859 = new BitSet(new ulong[]{0x10002UL});
		public static readonly BitSet _parameterDefault_in_basicParameterDeclaration1862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_in_parameterDefault1904 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _assignmentExpression_in_parameterDefault1906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REST_in_parameterRestDeclaration1922 = new BitSet(new ulong[]{0x1000004000008002UL,0x2000440000000UL,0x4000000000010000UL,0x10010102010UL,0x4UL});
		public static readonly BitSet _ident_in_parameterRestDeclaration1924 = new BitSet(new ulong[]{0x4000000002UL,0x0UL,0x0UL,0x10UL,0x4UL});
		public static readonly BitSet _typeExpression_in_parameterRestDeclaration1927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_block1961 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033102644038000UL,0x6491902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _blockEntry_in_block1963 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033102644038000UL,0x6491902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _RCURLY_in_block1966 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockEntry1980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_condition1991 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _expression_in_condition1993 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _RPAREN_in_condition1995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_statement2020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarationStatement_in_statement2025 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_statement2031 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifStatement_in_statement2036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_statement2041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_statement2047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _doWhileStatement_in_statement2052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _withStatement_in_statement2057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_statement2062 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _breakStatement_in_statement2067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _continueStatement_in_statement2072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_statement2077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throwStatement_in_statement2082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_statement2087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defaultXMLNamespaceStatement_in_statement2092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _semi_in_statement2100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declarationStatement2116 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_declarationStatement2120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_expressionStatement2143 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_expressionStatement2147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_ifStatement2166 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _condition_in_ifStatement2168 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033102644038000UL,0x6481902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _statement_in_ifStatement2170 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _elseClause_in_ifStatement2179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_elseClause2206 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033102644038000UL,0x6481902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _statement_in_elseClause2208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _254_in_throwStatement2234 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _expression_in_throwStatement2236 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_throwStatement2240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _255_in_tryStatement2260 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _block_in_tryStatement2264 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x108000000000000UL});
		public static readonly BitSet _catchBlock_in_tryStatement2268 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x108000000000000UL});
		public static readonly BitSet _finallyBlock_in_tryStatement2273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _243_in_catchBlock2294 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _LPAREN_in_catchBlock2296 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _ident_in_catchBlock2298 = new BitSet(new ulong[]{0x4000000000UL,0x0UL,0x1000000000000000UL,0x10UL,0x4UL});
		public static readonly BitSet _typeExpression_in_catchBlock2300 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _RPAREN_in_catchBlock2303 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _block_in_catchBlock2307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _248_in_finallyBlock2336 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _block_in_finallyBlock2338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_returnStatement2354 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x6081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _expression_in_returnStatement2356 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_returnStatement2361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_continueStatement2388 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_continueStatement2392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_breakStatement2412 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_breakStatement2416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_switchStatement2436 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _condition_in_switchStatement2438 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _switchBlock_in_switchStatement2442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_switchBlock2462 = new BitSet(new ulong[]{0x10000100000000UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _caseStatement_in_switchBlock2467 = new BitSet(new ulong[]{0x10000100000000UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _defaultStatement_in_switchBlock2474 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _RCURLY_in_switchBlock2480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement2494 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _expression_in_caseStatement2496 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _COLON_in_caseStatement2498 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033102644038000UL,0x6481902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _switchStatementList_in_caseStatement2502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_defaultStatement2520 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _COLON_in_defaultStatement2522 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033102644038000UL,0x6481902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _switchStatementList_in_defaultStatement2526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_switchStatementList2538 = new BitSet(new ulong[]{0x3113140002208002UL,0x2033102644038000UL,0x6481902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _FOR_in_forEachStatement2553 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _EACH_in_forEachStatement2555 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _LPAREN_in_forEachStatement2559 = new BitSet(new ulong[]{0x1000040000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10030102000UL});
		public static readonly BitSet _forInClause_in_forEachStatement2563 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _RPAREN_in_forEachStatement2567 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033102644038000UL,0x6481902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _statement_in_forEachStatement2571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forStatement2592 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _LPAREN_in_forStatement2596 = new BitSet(new ulong[]{0x3003040000208000UL,0x2033100644018000UL,0x6081902011090101UL,0x10410030303800UL,0x7UL});
		public static readonly BitSet _forInClause_in_forStatement2602 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _RPAREN_in_forStatement2604 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033102644038000UL,0x6481902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _statement_in_forStatement2606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _traditionalForClause_in_forStatement2610 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _RPAREN_in_forStatement2612 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033102644038000UL,0x6481902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _statement_in_forStatement2614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forInit_in_traditionalForClause2628 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_traditionalForClause2631 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x6081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _forCond_in_traditionalForClause2639 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_traditionalForClause2642 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _forIter_in_traditionalForClause2649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forInClauseDecl_in_forInClause2661 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _IN_in_forInClause2663 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _forInClauseTail_in_forInClause2665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _varOrConst_in_forInClauseDecl2676 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _ident_in_forInClauseDecl2678 = new BitSet(new ulong[]{0x4000000002UL,0x0UL,0x0UL,0x10UL,0x4UL});
		public static readonly BitSet _typeExpression_in_forInClauseDecl2680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_forInClauseDecl2690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forInClauseTail2702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_forInit2720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forInit2724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forCond2743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forIter2760 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileStatement2772 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _condition_in_whileStatement2774 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033102644038000UL,0x6481902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _statement_in_whileStatement2776 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_doWhileStatement2790 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033102644038000UL,0x6481902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _statement_in_doWhileStatement2792 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _WHILE_in_doWhileStatement2794 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _condition_in_doWhileStatement2796 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_doWhileStatement2798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_withStatement2812 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _condition_in_withStatement2814 = new BitSet(new ulong[]{0x3113140002208000UL,0x2033102644038000UL,0x6481902011090101UL,0xC010415030307800UL,0x7UL});
		public static readonly BitSet _statement_in_withStatement2816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_defaultXMLNamespaceStatement2827 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _XML_in_defaultXMLNamespaceStatement2829 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _NAMESPACE_in_defaultXMLNamespaceStatement2831 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _ASSIGN_in_defaultXMLNamespaceStatement2833 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _expression_in_defaultXMLNamespaceStatement2835 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _semi_in_defaultXMLNamespaceStatement2837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_typeExpression2856 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _typeIdentifier_in_typeExpression2858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _258_in_typeExpression2872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STAR_in_typeExpression2887 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_typeIdentifier2918 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _propOrIdent_in_typeIdentifier2921 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _qualifiedIdent_in_identifier2944 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _propOrIdent_in_identifier2948 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _namespaceName_in_qualifiedIdent2985 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _DBL_COLON_in_qualifiedIdent2987 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _ident_in_qualifiedIdent2989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_qualifiedIdent2997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_namespaceName3016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _reservedNamespace_in_namespaceName3020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PUBLIC_in_reservedNamespace3036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIVATE_in_reservedNamespace3049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROTECTED_in_reservedNamespace3062 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERNAL_in_reservedNamespace3075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_identifierStar3099 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _dotIdent_in_identifierStar3103 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _DOT_in_identifierStar3109 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _STAR_in_identifierStar3111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_dotIdent3127 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _ident_in_dotIdent3129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident3157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_ident3163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _XML_in_ident3168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRACE_in_ident3173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DYNAMIC_in_ident3178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAMESPACE_in_ident3183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IS_in_ident3188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AS_in_ident3193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GET_in_ident3198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_ident3203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_ident3210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_annotation3235 = new BitSet(new ulong[]{0x1000000000008000UL,0x2000440000000UL,0x4000000000010000UL,0x10010102000UL});
		public static readonly BitSet _ident_in_annotation3239 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000001UL});
		public static readonly BitSet _annotationParamList_in_annotation3243 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _RBRACK_in_annotation3248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_annotationParamList3273 = new BitSet(new ulong[]{0x1002000000008000UL,0x2000640018000UL,0x5080000011010000UL,0x410010303800UL});
		public static readonly BitSet _annotationParam_in_annotationParamList3279 = new BitSet(new ulong[]{0x8000000000UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _COMMA_in_annotationParamList3285 = new BitSet(new ulong[]{0x1002000000008000UL,0x2000640018000UL,0x4080000011010000UL,0x410010303800UL});
		public static readonly BitSet _annotationParam_in_annotationParamList3287 = new BitSet(new ulong[]{0x8000000000UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _RPAREN_in_annotationParamList3298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_annotationParam3312 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _ASSIGN_in_annotationParam3314 = new BitSet(new ulong[]{0x2000000000000UL,0x200018000UL,0x80000011000000UL,0x400000201800UL});
		public static readonly BitSet _constant_in_annotationParam3316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_annotationParam3322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_annotationParam3328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_modifiers3347 = new BitSet(new ulong[]{0x1000000000000002UL,0x1000400000000UL,0x1900000000000UL,0x28E0000000000100UL});
		public static readonly BitSet _modifier_in_modifiers3350 = new BitSet(new ulong[]{0x1000000000000002UL,0x1000400000000UL,0x1900000000000UL,0x28E0000000000100UL});
		public static readonly BitSet _namespaceName_in_modifier3371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_modifier3376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _247_in_modifier3389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _245_in_modifier3394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _246_in_modifier3399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _253_in_modifier3404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DYNAMIC_in_modifier3409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _251_in_modifier3414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments3430 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _expressionList_in_arguments3432 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _RPAREN_in_arguments3434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments3439 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _RPAREN_in_arguments3441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_arrayLiteral3453 = new BitSet(new ulong[]{0x3003008000208000UL,0x2033100644018000UL,0x4089902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _elementList_in_arrayLiteral3455 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _RBRACK_in_arrayLiteral3458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_elementList3471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonemptyElementList_in_elementList3476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_nonemptyElementList3487 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _COMMA_in_nonemptyElementList3490 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _assignmentExpression_in_nonemptyElementList3492 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _assignmentExpression_in_element3505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_objectLiteral3517 = new BitSet(new ulong[]{0x1002000000008000UL,0x2000640010000UL,0x4010000010010000UL,0x10010102000UL});
		public static readonly BitSet _fieldList_in_objectLiteral3519 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _RCURLY_in_objectLiteral3522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literalField_in_fieldList3534 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _COMMA_in_fieldList3537 = new BitSet(new ulong[]{0x1002008000008002UL,0x2000640010000UL,0x4000000010010000UL,0x10010102000UL});
		public static readonly BitSet _literalField_in_fieldList3539 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _fieldName_in_literalField3556 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _COLON_in_literalField3558 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _element_in_literalField3560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_fieldName3572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _number_in_fieldName3577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression3594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expressionList3613 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _COMMA_in_expressionList3616 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _assignmentExpression_in_expressionList3620 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression3650 = new BitSet(new ulong[]{0x800000A1090002UL,0x8008000000000000UL,0x4000004200UL,0x29UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpression3661 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _assignmentExpression_in_assignmentExpression3665 = new BitSet(new ulong[]{0x800000A1090002UL,0x8008000000000000UL,0x4000004200UL,0x29UL});
		public static readonly BitSet _logicalOrExpression_in_conditionalExpression3780 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _QUESTION_in_conditionalExpression3790 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _conditionalSubExpression_in_conditionalExpression3795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_conditionalSubExpression3815 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _COLON_in_conditionalSubExpression3817 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _assignmentExpression_in_conditionalSubExpression3819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression3833 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _logicalOrOperator_in_logicalOrExpression3838 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression3840 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _bitwiseOrExpression_in_logicalAndExpression3869 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _logicalAndOperator_in_logicalAndExpression3874 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _bitwiseOrExpression_in_logicalAndExpression3876 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _bitwiseXorExpression_in_bitwiseOrExpression3905 = new BitSet(new ulong[]{0x800002UL});
		public static readonly BitSet _BOR_in_bitwiseOrExpression3910 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _bitwiseXorExpression_in_bitwiseOrExpression3912 = new BitSet(new ulong[]{0x800002UL});
		public static readonly BitSet _bitwiseAndExpression_in_bitwiseXorExpression3926 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _BXOR_in_bitwiseXorExpression3931 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _bitwiseAndExpression_in_bitwiseXorExpression3933 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _equalityExpression_in_bitwiseAndExpression3947 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _BAND_in_bitwiseAndExpression3952 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _equalityExpression_in_bitwiseAndExpression3954 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression3968 = new BitSet(new ulong[]{0x2UL,0x40UL,0x800000UL,0x600UL});
		public static readonly BitSet _equalityOperator_in_equalityExpression3979 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression3981 = new BitSet(new ulong[]{0x2UL,0x40UL,0x800000UL,0x600UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression4021 = new BitSet(new ulong[]{0x8002UL,0x420000A0000000UL,0x2UL,0x400000000000000UL});
		public static readonly BitSet _relationalOperator_in_relationalExpression4024 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression4028 = new BitSet(new ulong[]{0x8002UL,0x420000A0000000UL,0x2UL,0x400000000000000UL});
		public static readonly BitSet _LT_in_relationalOperator4063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_relationalOperator4077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LE_in_relationalOperator4092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GE_in_relationalOperator4107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IS_in_relationalOperator4122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AS_in_relationalOperator4133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _250_in_relationalOperator4144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression4161 = new BitSet(new ulong[]{0x10000002UL,0x0UL,0x8000000000000000UL,0x4UL});
		public static readonly BitSet _shiftOperator_in_shiftExpression4166 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression4168 = new BitSet(new ulong[]{0x10000002UL,0x0UL,0x8000000000000000UL,0x4UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression4211 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000100UL});
		public static readonly BitSet _additiveOperator_in_additiveExpression4214 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression4216 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000100UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression4255 = new BitSet(new ulong[]{0x40000000000002UL,0x0UL,0x800UL,0x10UL});
		public static readonly BitSet _multiplicativeOperator_in_multiplicativeExpression4261 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression4266 = new BitSet(new ulong[]{0x40000000000002UL,0x0UL,0x800UL,0x10UL});
		public static readonly BitSet _INC_in_unaryExpression4314 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression4316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_unaryExpression4323 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression4325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_unaryExpression4330 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression4332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_unaryExpression4337 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression4339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_unaryExpression4344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _244_in_unaryExpressionNotPlusMinus4360 = new BitSet(new ulong[]{0x3002000000008000UL,0x33000644018000UL,0x4081900011090001UL,0x410010303800UL,0x2UL});
		public static readonly BitSet _postfixExpression_in_unaryExpressionNotPlusMinus4362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _258_in_unaryExpressionNotPlusMinus4368 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus4370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _256_in_unaryExpressionNotPlusMinus4376 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus4378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LNOT_in_unaryExpressionNotPlusMinus4384 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus4386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BNOT_in_unaryExpressionNotPlusMinus4392 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus4394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfixExpression_in_unaryExpressionNotPlusMinus4400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_postfixExpression4414 = new BitSet(new ulong[]{0x4201000000000002UL,0x10100000000000UL,0x1UL});
		public static readonly BitSet _propOrIdent_in_postfixExpression4433 = new BitSet(new ulong[]{0x4201000000000002UL,0x10100000000000UL,0x1UL});
		public static readonly BitSet _DOT_in_postfixExpression4465 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x1UL,0x10UL});
		public static readonly BitSet _e4xExpression_in_postfixExpression4467 = new BitSet(new ulong[]{0x4201000000000002UL,0x10100000000000UL,0x1UL});
		public static readonly BitSet _E4X_DESC_in_postfixExpression4499 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x1UL,0x10UL});
		public static readonly BitSet _e4xExpression_in_postfixExpression4501 = new BitSet(new ulong[]{0x4201000000000002UL,0x10100000000000UL,0x1UL});
		public static readonly BitSet _LBRACK_in_postfixExpression4546 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _expression_in_postfixExpression4548 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _RBRACK_in_postfixExpression4550 = new BitSet(new ulong[]{0x4201000000000002UL,0x10100000000000UL,0x1UL});
		public static readonly BitSet _arguments_in_postfixExpression4583 = new BitSet(new ulong[]{0x4201000000000002UL,0x10100000000000UL,0x1UL});
		public static readonly BitSet _STAR_in_e4xExpression4644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _e4xAttributeIdentifier_in_e4xExpression4649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _e4xFilterPredicate_in_e4xExpression4654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _E4X_ATTRI_in_e4xAttributeIdentifier4665 = new BitSet(new ulong[]{0x1000000000008000UL,0x13000440000000UL,0x4001900000010000UL,0x10010102010UL});
		public static readonly BitSet _qualifiedIdent_in_e4xAttributeIdentifier4671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STAR_in_e4xAttributeIdentifier4677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_e4xAttributeIdentifier4683 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _expression_in_e4xAttributeIdentifier4685 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _RBRACK_in_e4xAttributeIdentifier4687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_e4xFilterPredicate4702 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _expression_in_e4xFilterPredicate4706 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _RPAREN_in_e4xFilterPredicate4710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _257_in_primaryExpression4726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_primaryExpression4731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayLiteral_in_primaryExpression4736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectLiteral_in_primaryExpression4741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDefinition_in_primaryExpression4746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_primaryExpression4751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _encapsulatedExpression_in_primaryExpression4756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _e4xAttributeIdentifier_in_primaryExpression4761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdent_in_primaryExpression4766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_propOrIdent4781 = new BitSet(new ulong[]{0x1000000000008000UL,0x3000440000000UL,0x4001900000010000UL,0x10010102000UL});
		public static readonly BitSet _qualifiedIdent_in_propOrIdent4783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _xmlLiteral_in_constant4810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _regexpLiteral_in_constant4824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _number_in_constant4839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stringLiteral_in_constant4845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_constant4851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_constant4856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_constant4861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stringLiteralDouble_in_stringLiteral4881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stringLiteralSingle_in_stringLiteral4885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_DOUBLE_in_stringLiteralDouble4902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_SINGLE_in_stringLiteralSingle4920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _XML_LITERAL_in_xmlLiteral4968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REGEX_LITERAL_in_regexpLiteral4980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_newExpression4991 = new BitSet(new ulong[]{0x3002000000008000UL,0x33000644018000UL,0x4081900011090001UL,0x410010303800UL,0x2UL});
		public static readonly BitSet _fullNewSubexpression_in_newExpression4993 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _arguments_in_newExpression4995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_fullNewSubexpression5009 = new BitSet(new ulong[]{0x200000000000002UL,0x10000000000000UL});
		public static readonly BitSet _DOT_in_fullNewSubexpression5022 = new BitSet(new ulong[]{0x1000000000008000UL,0x3000440000000UL,0x4001900000010000UL,0x10010102000UL});
		public static readonly BitSet _qualifiedIdent_in_fullNewSubexpression5024 = new BitSet(new ulong[]{0x200000000000002UL,0x10000000000000UL});
		public static readonly BitSet _brackets_in_fullNewSubexpression5031 = new BitSet(new ulong[]{0x200000000000002UL,0x10000000000000UL});
		public static readonly BitSet _DOT_in_propertyOperator5048 = new BitSet(new ulong[]{0x1000000000008000UL,0x3000440000000UL,0x4001900000010000UL,0x10010102000UL});
		public static readonly BitSet _qualifiedIdent_in_propertyOperator5050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brackets_in_propertyOperator5055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_brackets5066 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _expressionList_in_brackets5068 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _RBRACK_in_brackets5070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_encapsulatedExpression5081 = new BitSet(new ulong[]{0x3003000000208000UL,0x2033100644018000UL,0x4081902011090101UL,0x10410010303800UL,0x7UL});
		public static readonly BitSet _assignmentExpression_in_encapsulatedExpression5083 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _RPAREN_in_encapsulatedExpression5085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_functionDefinition5102 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _parameterDeclarationList_in_functionDefinition5104 = new BitSet(new ulong[]{0x4000000000UL,0x20000000000000UL,0x0UL,0x10UL,0x4UL});
		public static readonly BitSet _typeExpression_in_functionDefinition5106 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _block_in_functionDefinition5109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred1_AS3T536 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _CLASS_in_synpred1_AS3T538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred2_AS3T549 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _INTERFACE_in_synpred2_AS3T551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_synpred3_AS3T697 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _IDENT_in_synpred3_AS3T699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred4_AS3T713 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _NAMESPACE_in_synpred4_AS3T715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred5_AS3T735 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _CLASS_in_synpred5_AS3T737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred6_AS3T751 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _INTERFACE_in_synpred6_AS3T753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred7_AS3T767 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _FUNCTION_in_synpred7_AS3T769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred8_AS3T783 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _varOrConst_in_synpred8_AS3T785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_synpred9_AS3T1229 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _IDENT_in_synpred9_AS3T1231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred10_AS3T1242 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _varOrConst_in_synpred10_AS3T1244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred11_AS3T1257 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _FUNCTION_in_synpred11_AS3T1259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_synpred12_AS3T1441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_synpred13_AS3T2015 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_synpred14_AS3T2176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespaceName_in_synpred15_AS3T2978 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _DBL_COLON_in_synpred15_AS3T2980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentOperator_in_synpred16_AS3T3654 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
