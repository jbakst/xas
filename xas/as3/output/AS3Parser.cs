//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Library\\hg\\xas\\xas\\as3\\AS3.g 2011-10-16 16:04:37

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class AS3Parser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "BooleanLiteral", "CharacterEscapeSequence", "Comment", "DecimalDigit", "DecimalLiteral", "DoubleStringCharacter", "EscapeCharacter", "EscapeSequence", "ExponentPart", "HexDigit", "HexEscapeSequence", "HexIntegerLiteral", "Identifier", "IdentifierPart", "IdentifierStart", "LineTerminator", "MultiLineComment", "NonEscapeCharacter", "NullLiteral", "NumericLiteral", "SingleEscapeCharacter", "SingleLineComment", "SingleStringCharacter", "StringLiteral", "UnicodeCombiningMark", "UnicodeConnectorPunctuation", "UnicodeDigit", "UnicodeEscapeSequence", "UnicodeLetter", "WhiteSpace", "'!'", "'!='", "'!=='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'.'", "'.*'", "'...'", "'.<'", "'/'", "'/='", "':'", "'::'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'==='", "'>'", "'>='", "'>>'", "'>>='", "'>>>'", "'>>>='", "'?'", "'['", "']'", "'^'", "'^='", "'as'", "'break'", "'case'", "'catch'", "'class'", "'const'", "'continue'", "'default'", "'delete'", "'do'", "'else'", "'extends'", "'final'", "'finally'", "'for'", "'function'", "'get'", "'if'", "'implements'", "'import'", "'in'", "'include'", "'instanceof'", "'interface'", "'internal'", "'is'", "'namespace'", "'new'", "'override'", "'package'", "'private'", "'protected'", "'public'", "'return'", "'set'", "'static'", "'super'", "'switch'", "'this'", "'throw'", "'try'", "'typeof'", "'use'", "'var'", "'void'", "'while'", "'with'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public const int EOF=-1;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int BooleanLiteral=4;
	public const int CharacterEscapeSequence=5;
	public const int Comment=6;
	public const int DecimalDigit=7;
	public const int DecimalLiteral=8;
	public const int DoubleStringCharacter=9;
	public const int EscapeCharacter=10;
	public const int EscapeSequence=11;
	public const int ExponentPart=12;
	public const int HexDigit=13;
	public const int HexEscapeSequence=14;
	public const int HexIntegerLiteral=15;
	public const int Identifier=16;
	public const int IdentifierPart=17;
	public const int IdentifierStart=18;
	public const int LineTerminator=19;
	public const int MultiLineComment=20;
	public const int NonEscapeCharacter=21;
	public const int NullLiteral=22;
	public const int NumericLiteral=23;
	public const int SingleEscapeCharacter=24;
	public const int SingleLineComment=25;
	public const int SingleStringCharacter=26;
	public const int StringLiteral=27;
	public const int UnicodeCombiningMark=28;
	public const int UnicodeConnectorPunctuation=29;
	public const int UnicodeDigit=30;
	public const int UnicodeEscapeSequence=31;
	public const int UnicodeLetter=32;
	public const int WhiteSpace=33;

	public AS3Parser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public AS3Parser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[540+1];


		OnCreated();
	}

	public override string[] TokenNames { get { return AS3Parser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Library\\hg\\xas\\xas\\as3\\AS3.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_compilationUnit();
	partial void LeaveRule_compilationUnit();

	// $ANTLR start "compilationUnit"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:31:1: compilationUnit : ( LineTerminator )* packageDeclaration ( LineTerminator )* ( normalClassDeclaration | normalInterfaceDeclaration )* ( LineTerminator )* EOF ;
	[GrammarRule("compilationUnit")]
	private void compilationUnit()
	{
		EnterRule_compilationUnit();
		EnterRule("compilationUnit", 1);
		TraceIn("compilationUnit", 1);
		int compilationUnit_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "compilationUnit");
		DebugLocation(31, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:2: ( ( LineTerminator )* packageDeclaration ( LineTerminator )* ( normalClassDeclaration | normalInterfaceDeclaration )* ( LineTerminator )* EOF )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:4: ( LineTerminator )* packageDeclaration ( LineTerminator )* ( normalClassDeclaration | normalInterfaceDeclaration )* ( LineTerminator )* EOF
			{
			DebugLocation(32, 4);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:4: ( LineTerminator )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==LineTerminator))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:4: LineTerminator
					{
					DebugLocation(32, 4);
					Match(input,LineTerminator,Follow._LineTerminator_in_compilationUnit36); if (state.failed) return;

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(32, 20);
			PushFollow(Follow._packageDeclaration_in_compilationUnit39);
			packageDeclaration();
			PopFollow();
			if (state.failed) return;
			DebugLocation(32, 39);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:39: ( LineTerminator )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==LineTerminator))
				{
					int LA2_2 = input.LA(2);

					if ((EvaluatePredicate(synpred2_AS3_fragment)))
					{
						alt2 = 1;
					}


				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:39: LineTerminator
					{
					DebugLocation(32, 39);
					Match(input,LineTerminator,Follow._LineTerminator_in_compilationUnit41); if (state.failed) return;

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(32, 55);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:55: ( normalClassDeclaration | normalInterfaceDeclaration )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=3;
				try { DebugEnterDecision(3, false);
				try
				{
					alt3 = dfa3.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:56: normalClassDeclaration
					{
					DebugLocation(32, 56);
					PushFollow(Follow._normalClassDeclaration_in_compilationUnit45);
					normalClassDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:79: normalInterfaceDeclaration
					{
					DebugLocation(32, 79);
					PushFollow(Follow._normalInterfaceDeclaration_in_compilationUnit47);
					normalInterfaceDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(32, 108);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:108: ( LineTerminator )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==LineTerminator))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:108: LineTerminator
					{
					DebugLocation(32, 108);
					Match(input,LineTerminator,Follow._LineTerminator_in_compilationUnit51); if (state.failed) return;

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(32, 124);
			Match(input,EOF,Follow._EOF_in_compilationUnit54); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("compilationUnit", 1);
			LeaveRule("compilationUnit", 1);
			LeaveRule_compilationUnit();
			if (state.backtracking > 0) { Memoize(input, 1, compilationUnit_StartIndex); }

		}
		DebugLocation(33, 1);
		} finally { DebugExitRule(GrammarFileName, "compilationUnit"); }
		return;

	}
	// $ANTLR end "compilationUnit"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:586:1: literal : ( NullLiteral | BooleanLiteral | NumericLiteral | StringLiteral );
	[GrammarRule("literal")]
	private void literal()
	{
		EnterRule_literal();
		EnterRule("literal", 2);
		TraceIn("literal", 2);
		int literal_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(586, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:587:2: ( NullLiteral | BooleanLiteral | NumericLiteral | StringLiteral )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:
			{
			DebugLocation(587, 2);
			if (input.LA(1)==BooleanLiteral||(input.LA(1)>=NullLiteral && input.LA(1)<=NumericLiteral)||input.LA(1)==StringLiteral)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 2);
			LeaveRule("literal", 2);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 2, literal_StartIndex); }

		}
		DebugLocation(591, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return;

	}
	// $ANTLR end "literal"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();

	// $ANTLR start "primaryExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:686:1: primaryExpression : ( 'this' | 'super' | Identifier | qualifiedName | literal | arrayLiteral | objectLiteral | '(' ( LineTerminator )* expression ( LineTerminator )* ')' );
	[GrammarRule("primaryExpression")]
	private void primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 3);
		TraceIn("primaryExpression", 3);
		int primaryExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(686, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:687:2: ( 'this' | 'super' | Identifier | qualifiedName | literal | arrayLiteral | objectLiteral | '(' ( LineTerminator )* expression ( LineTerminator )* ')' )
			int alt7=8;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case 118:
				{
				alt7 = 1;
				}
				break;
			case 116:
				{
				alt7 = 2;
				}
				break;
			case Identifier:
				{
				int LA7_3 = input.LA(2);

				if ((EvaluatePredicate(synpred11_AS3_fragment)))
				{
					alt7 = 3;
				}
				else if ((EvaluatePredicate(synpred12_AS3_fragment)))
				{
					alt7 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 7, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BooleanLiteral:
			case NullLiteral:
			case NumericLiteral:
			case StringLiteral:
				{
				alt7 = 5;
				}
				break;
			case 76:
				{
				alt7 = 6;
				}
				break;
			case 127:
				{
				alt7 = 7;
				}
				break;
			case 42:
				{
				alt7 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:687:4: 'this'
				{
				DebugLocation(687, 4);
				Match(input,118,Follow._118_in_primaryExpression3512); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:688:4: 'super'
				{
				DebugLocation(688, 4);
				Match(input,116,Follow._116_in_primaryExpression3517); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:689:4: Identifier
				{
				DebugLocation(689, 4);
				Match(input,Identifier,Follow._Identifier_in_primaryExpression3522); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:690:4: qualifiedName
				{
				DebugLocation(690, 4);
				PushFollow(Follow._qualifiedName_in_primaryExpression3527);
				qualifiedName();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:691:4: literal
				{
				DebugLocation(691, 4);
				PushFollow(Follow._literal_in_primaryExpression3532);
				literal();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:692:4: arrayLiteral
				{
				DebugLocation(692, 4);
				PushFollow(Follow._arrayLiteral_in_primaryExpression3537);
				arrayLiteral();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:693:4: objectLiteral
				{
				DebugLocation(693, 4);
				PushFollow(Follow._objectLiteral_in_primaryExpression3542);
				objectLiteral();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:694:4: '(' ( LineTerminator )* expression ( LineTerminator )* ')'
				{
				DebugLocation(694, 4);
				Match(input,42,Follow._42_in_primaryExpression3547); if (state.failed) return;
				DebugLocation(694, 9);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:694:9: ( LineTerminator )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if ((LA5_0==LineTerminator))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:694:9: LineTerminator
						{
						DebugLocation(694, 9);
						Match(input,LineTerminator,Follow._LineTerminator_in_primaryExpression3550); if (state.failed) return;

						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(694, 25);
				PushFollow(Follow._expression_in_primaryExpression3553);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(694, 36);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:694:36: ( LineTerminator )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==LineTerminator))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:694:36: LineTerminator
						{
						DebugLocation(694, 36);
						Match(input,LineTerminator,Follow._LineTerminator_in_primaryExpression3555); if (state.failed) return;

						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(694, 52);
				Match(input,43,Follow._43_in_primaryExpression3558); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryExpression", 3);
			LeaveRule("primaryExpression", 3);
			LeaveRule_primaryExpression();
			if (state.backtracking > 0) { Memoize(input, 3, primaryExpression_StartIndex); }

		}
		DebugLocation(695, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_arrayLiteral();
	partial void LeaveRule_arrayLiteral();

	// $ANTLR start "arrayLiteral"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:697:1: arrayLiteral : '[' ( LineTerminator )* ( assignmentExpression )? ( ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )? )* ( LineTerminator )* ']' ;
	[GrammarRule("arrayLiteral")]
	private void arrayLiteral()
	{
		EnterRule_arrayLiteral();
		EnterRule("arrayLiteral", 4);
		TraceIn("arrayLiteral", 4);
		int arrayLiteral_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayLiteral");
		DebugLocation(697, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:2: ( '[' ( LineTerminator )* ( assignmentExpression )? ( ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )? )* ( LineTerminator )* ']' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:4: '[' ( LineTerminator )* ( assignmentExpression )? ( ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )? )* ( LineTerminator )* ']'
			{
			DebugLocation(698, 4);
			Match(input,76,Follow._76_in_arrayLiteral3570); if (state.failed) return;
			DebugLocation(698, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:8: ( LineTerminator )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==LineTerminator))
				{
					int LA8_2 = input.LA(2);

					if ((EvaluatePredicate(synpred18_AS3_fragment)))
					{
						alt8 = 1;
					}


				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:8: LineTerminator
					{
					DebugLocation(698, 8);
					Match(input,LineTerminator,Follow._LineTerminator_in_arrayLiteral3572); if (state.failed) return;

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(698, 24);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:24: ( assignmentExpression )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==BooleanLiteral||LA9_0==Identifier||(LA9_0>=NullLiteral && LA9_0<=NumericLiteral)||LA9_0==StringLiteral||LA9_0==34||LA9_0==42||(LA9_0>=46 && LA9_0<=47)||(LA9_0>=50 && LA9_0<=51)||LA9_0==76||LA9_0==80||LA9_0==88||LA9_0==95||LA9_0==107||LA9_0==116||LA9_0==118||LA9_0==121||LA9_0==124||LA9_0==127||LA9_0==132))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:24: assignmentExpression
				{
				DebugLocation(698, 24);
				PushFollow(Follow._assignmentExpression_in_arrayLiteral3575);
				assignmentExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(698, 46);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:46: ( ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )? )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				try
				{
					alt13 = dfa13.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:47: ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )?
					{
					DebugLocation(698, 47);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:47: ( LineTerminator )*
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_0 = input.LA(1);

						if ((LA10_0==LineTerminator))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch ( alt10 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:47: LineTerminator
							{
							DebugLocation(698, 47);
							Match(input,LineTerminator,Follow._LineTerminator_in_arrayLiteral3579); if (state.failed) return;

							}
							break;

						default:
							goto loop10;
						}
					}

					loop10:
						;

					} finally { DebugExitSubRule(10); }

					DebugLocation(698, 63);
					Match(input,49,Follow._49_in_arrayLiteral3582); if (state.failed) return;
					DebugLocation(698, 67);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:67: ( ( LineTerminator )* assignmentExpression )?
					int alt12=2;
					try { DebugEnterSubRule(12);
					try { DebugEnterDecision(12, false);
					try
					{
						alt12 = dfa12.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:68: ( LineTerminator )* assignmentExpression
						{
						DebugLocation(698, 68);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:68: ( LineTerminator )*
						try { DebugEnterSubRule(11);
						while (true)
						{
							int alt11=2;
							try { DebugEnterDecision(11, false);
							int LA11_0 = input.LA(1);

							if ((LA11_0==LineTerminator))
							{
								alt11 = 1;
							}


							} finally { DebugExitDecision(11); }
							switch ( alt11 )
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:68: LineTerminator
								{
								DebugLocation(698, 68);
								Match(input,LineTerminator,Follow._LineTerminator_in_arrayLiteral3585); if (state.failed) return;

								}
								break;

							default:
								goto loop11;
							}
						}

						loop11:
							;

						} finally { DebugExitSubRule(11); }

						DebugLocation(698, 84);
						PushFollow(Follow._assignmentExpression_in_arrayLiteral3588);
						assignmentExpression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(698, 109);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:109: ( LineTerminator )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==LineTerminator))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:109: LineTerminator
					{
					DebugLocation(698, 109);
					Match(input,LineTerminator,Follow._LineTerminator_in_arrayLiteral3594); if (state.failed) return;

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(698, 125);
			Match(input,77,Follow._77_in_arrayLiteral3597); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayLiteral", 4);
			LeaveRule("arrayLiteral", 4);
			LeaveRule_arrayLiteral();
			if (state.backtracking > 0) { Memoize(input, 4, arrayLiteral_StartIndex); }

		}
		DebugLocation(699, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayLiteral"); }
		return;

	}
	// $ANTLR end "arrayLiteral"

	partial void EnterRule_objectLiteral();
	partial void LeaveRule_objectLiteral();

	// $ANTLR start "objectLiteral"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:701:1: objectLiteral : '{' ( LineTerminator )* ( propertyNameAndValue ( ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue )* ( LineTerminator )* )? '}' ;
	[GrammarRule("objectLiteral")]
	private void objectLiteral()
	{
		EnterRule_objectLiteral();
		EnterRule("objectLiteral", 5);
		TraceIn("objectLiteral", 5);
		int objectLiteral_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "objectLiteral");
		DebugLocation(701, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:2: ( '{' ( LineTerminator )* ( propertyNameAndValue ( ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue )* ( LineTerminator )* )? '}' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:4: '{' ( LineTerminator )* ( propertyNameAndValue ( ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue )* ( LineTerminator )* )? '}'
			{
			DebugLocation(702, 4);
			Match(input,127,Follow._127_in_objectLiteral3609); if (state.failed) return;
			DebugLocation(702, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:8: ( LineTerminator )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==LineTerminator))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:8: LineTerminator
					{
					DebugLocation(702, 8);
					Match(input,LineTerminator,Follow._LineTerminator_in_objectLiteral3611); if (state.failed) return;

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }

			DebugLocation(702, 24);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:24: ( propertyNameAndValue ( ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue )* ( LineTerminator )* )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==Identifier||LA20_0==NumericLiteral||LA20_0==StringLiteral))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:25: propertyNameAndValue ( ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue )* ( LineTerminator )*
				{
				DebugLocation(702, 25);
				PushFollow(Follow._propertyNameAndValue_in_objectLiteral3615);
				propertyNameAndValue();
				PopFollow();
				if (state.failed) return;
				DebugLocation(702, 46);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:46: ( ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					try
					{
						alt18 = dfa18.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:47: ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue
						{
						DebugLocation(702, 47);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:47: ( LineTerminator )*
						try { DebugEnterSubRule(16);
						while (true)
						{
							int alt16=2;
							try { DebugEnterDecision(16, false);
							int LA16_0 = input.LA(1);

							if ((LA16_0==LineTerminator))
							{
								alt16 = 1;
							}


							} finally { DebugExitDecision(16); }
							switch ( alt16 )
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:47: LineTerminator
								{
								DebugLocation(702, 47);
								Match(input,LineTerminator,Follow._LineTerminator_in_objectLiteral3618); if (state.failed) return;

								}
								break;

							default:
								goto loop16;
							}
						}

						loop16:
							;

						} finally { DebugExitSubRule(16); }

						DebugLocation(702, 63);
						Match(input,49,Follow._49_in_objectLiteral3621); if (state.failed) return;
						DebugLocation(702, 67);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:67: ( LineTerminator )*
						try { DebugEnterSubRule(17);
						while (true)
						{
							int alt17=2;
							try { DebugEnterDecision(17, false);
							int LA17_0 = input.LA(1);

							if ((LA17_0==LineTerminator))
							{
								alt17 = 1;
							}


							} finally { DebugExitDecision(17); }
							switch ( alt17 )
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:67: LineTerminator
								{
								DebugLocation(702, 67);
								Match(input,LineTerminator,Follow._LineTerminator_in_objectLiteral3623); if (state.failed) return;

								}
								break;

							default:
								goto loop17;
							}
						}

						loop17:
							;

						} finally { DebugExitSubRule(17); }

						DebugLocation(702, 83);
						PushFollow(Follow._propertyNameAndValue_in_objectLiteral3626);
						propertyNameAndValue();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(702, 106);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:106: ( LineTerminator )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==LineTerminator))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:702:106: LineTerminator
						{
						DebugLocation(702, 106);
						Match(input,LineTerminator,Follow._LineTerminator_in_objectLiteral3630); if (state.failed) return;

						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(702, 124);
			Match(input,131,Follow._131_in_objectLiteral3635); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("objectLiteral", 5);
			LeaveRule("objectLiteral", 5);
			LeaveRule_objectLiteral();
			if (state.backtracking > 0) { Memoize(input, 5, objectLiteral_StartIndex); }

		}
		DebugLocation(703, 1);
		} finally { DebugExitRule(GrammarFileName, "objectLiteral"); }
		return;

	}
	// $ANTLR end "objectLiteral"

	partial void EnterRule_propertyNameAndValue();
	partial void LeaveRule_propertyNameAndValue();

	// $ANTLR start "propertyNameAndValue"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:705:1: propertyNameAndValue : propertyName ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression ;
	[GrammarRule("propertyNameAndValue")]
	private void propertyNameAndValue()
	{
		EnterRule_propertyNameAndValue();
		EnterRule("propertyNameAndValue", 6);
		TraceIn("propertyNameAndValue", 6);
		int propertyNameAndValue_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "propertyNameAndValue");
		DebugLocation(705, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:706:2: ( propertyName ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:706:4: propertyName ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression
			{
			DebugLocation(706, 4);
			PushFollow(Follow._propertyName_in_propertyNameAndValue3646);
			propertyName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(706, 17);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:706:17: ( LineTerminator )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==LineTerminator))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:706:17: LineTerminator
					{
					DebugLocation(706, 17);
					Match(input,LineTerminator,Follow._LineTerminator_in_propertyNameAndValue3648); if (state.failed) return;

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }

			DebugLocation(706, 33);
			Match(input,59,Follow._59_in_propertyNameAndValue3651); if (state.failed) return;
			DebugLocation(706, 37);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:706:37: ( LineTerminator )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==LineTerminator))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:706:37: LineTerminator
					{
					DebugLocation(706, 37);
					Match(input,LineTerminator,Follow._LineTerminator_in_propertyNameAndValue3653); if (state.failed) return;

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }

			DebugLocation(706, 53);
			PushFollow(Follow._assignmentExpression_in_propertyNameAndValue3656);
			assignmentExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyNameAndValue", 6);
			LeaveRule("propertyNameAndValue", 6);
			LeaveRule_propertyNameAndValue();
			if (state.backtracking > 0) { Memoize(input, 6, propertyNameAndValue_StartIndex); }

		}
		DebugLocation(707, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyNameAndValue"); }
		return;

	}
	// $ANTLR end "propertyNameAndValue"

	partial void EnterRule_propertyName();
	partial void LeaveRule_propertyName();

	// $ANTLR start "propertyName"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:709:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
	[GrammarRule("propertyName")]
	private void propertyName()
	{
		EnterRule_propertyName();
		EnterRule("propertyName", 7);
		TraceIn("propertyName", 7);
		int propertyName_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "propertyName");
		DebugLocation(709, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:710:2: ( Identifier | StringLiteral | NumericLiteral )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:
			{
			DebugLocation(710, 2);
			if (input.LA(1)==Identifier||input.LA(1)==NumericLiteral||input.LA(1)==StringLiteral)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyName", 7);
			LeaveRule("propertyName", 7);
			LeaveRule_propertyName();
			if (state.backtracking > 0) { Memoize(input, 7, propertyName_StartIndex); }

		}
		DebugLocation(713, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyName"); }
		return;

	}
	// $ANTLR end "propertyName"

	partial void EnterRule_memberExpression();
	partial void LeaveRule_memberExpression();

	// $ANTLR start "memberExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:715:1: memberExpression : ( primaryExpression | functionExpression | 'new' ( LineTerminator )* memberExpression ( LineTerminator )* argumentList ) ( ( LineTerminator )* memberExpressionSuffix )* ;
	[GrammarRule("memberExpression")]
	private void memberExpression()
	{
		EnterRule_memberExpression();
		EnterRule("memberExpression", 8);
		TraceIn("memberExpression", 8);
		int memberExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "memberExpression");
		DebugLocation(715, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:2: ( ( primaryExpression | functionExpression | 'new' ( LineTerminator )* memberExpression ( LineTerminator )* argumentList ) ( ( LineTerminator )* memberExpressionSuffix )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:4: ( primaryExpression | functionExpression | 'new' ( LineTerminator )* memberExpression ( LineTerminator )* argumentList ) ( ( LineTerminator )* memberExpressionSuffix )*
			{
			DebugLocation(716, 4);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:4: ( primaryExpression | functionExpression | 'new' ( LineTerminator )* memberExpression ( LineTerminator )* argumentList )
			int alt25=3;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case BooleanLiteral:
			case Identifier:
			case NullLiteral:
			case NumericLiteral:
			case StringLiteral:
			case 42:
			case 76:
			case 116:
			case 118:
			case 127:
				{
				alt25 = 1;
				}
				break;
			case 95:
				{
				alt25 = 2;
				}
				break;
			case 107:
				{
				alt25 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:5: primaryExpression
				{
				DebugLocation(716, 5);
				PushFollow(Follow._primaryExpression_in_memberExpression3690);
				primaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:25: functionExpression
				{
				DebugLocation(716, 25);
				PushFollow(Follow._functionExpression_in_memberExpression3694);
				functionExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:46: 'new' ( LineTerminator )* memberExpression ( LineTerminator )* argumentList
				{
				DebugLocation(716, 46);
				Match(input,107,Follow._107_in_memberExpression3698); if (state.failed) return;
				DebugLocation(716, 52);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:52: ( LineTerminator )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==LineTerminator))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:52: LineTerminator
						{
						DebugLocation(716, 52);
						Match(input,LineTerminator,Follow._LineTerminator_in_memberExpression3700); if (state.failed) return;

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }

				DebugLocation(716, 68);
				PushFollow(Follow._memberExpression_in_memberExpression3703);
				memberExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(716, 85);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:85: ( LineTerminator )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==LineTerminator))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:85: LineTerminator
						{
						DebugLocation(716, 85);
						Match(input,LineTerminator,Follow._LineTerminator_in_memberExpression3705); if (state.failed) return;

						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(716, 101);
				PushFollow(Follow._argumentList_in_memberExpression3708);
				argumentList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(716, 115);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:115: ( ( LineTerminator )* memberExpressionSuffix )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				try
				{
					alt27 = dfa27.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:116: ( LineTerminator )* memberExpressionSuffix
					{
					DebugLocation(716, 116);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:116: ( LineTerminator )*
					try { DebugEnterSubRule(26);
					while (true)
					{
						int alt26=2;
						try { DebugEnterDecision(26, false);
						int LA26_0 = input.LA(1);

						if ((LA26_0==LineTerminator))
						{
							alt26 = 1;
						}


						} finally { DebugExitDecision(26); }
						switch ( alt26 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:116: LineTerminator
							{
							DebugLocation(716, 116);
							Match(input,LineTerminator,Follow._LineTerminator_in_memberExpression3712); if (state.failed) return;

							}
							break;

						default:
							goto loop26;
						}
					}

					loop26:
						;

					} finally { DebugExitSubRule(26); }

					DebugLocation(716, 132);
					PushFollow(Follow._memberExpressionSuffix_in_memberExpression3715);
					memberExpressionSuffix();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("memberExpression", 8);
			LeaveRule("memberExpression", 8);
			LeaveRule_memberExpression();
			if (state.backtracking > 0) { Memoize(input, 8, memberExpression_StartIndex); }

		}
		DebugLocation(717, 1);
		} finally { DebugExitRule(GrammarFileName, "memberExpression"); }
		return;

	}
	// $ANTLR end "memberExpression"

	partial void EnterRule_memberExpressionSuffix();
	partial void LeaveRule_memberExpressionSuffix();

	// $ANTLR start "memberExpressionSuffix"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:719:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix );
	[GrammarRule("memberExpressionSuffix")]
	private void memberExpressionSuffix()
	{
		EnterRule_memberExpressionSuffix();
		EnterRule("memberExpressionSuffix", 9);
		TraceIn("memberExpressionSuffix", 9);
		int memberExpressionSuffix_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "memberExpressionSuffix");
		DebugLocation(719, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:720:2: ( indexSuffix | propertyReferenceSuffix )
			int alt28=2;
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==76))
			{
				alt28 = 1;
			}
			else if ((LA28_0==53))
			{
				alt28 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:720:4: indexSuffix
				{
				DebugLocation(720, 4);
				PushFollow(Follow._indexSuffix_in_memberExpressionSuffix3729);
				indexSuffix();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:721:4: propertyReferenceSuffix
				{
				DebugLocation(721, 4);
				PushFollow(Follow._propertyReferenceSuffix_in_memberExpressionSuffix3734);
				propertyReferenceSuffix();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("memberExpressionSuffix", 9);
			LeaveRule("memberExpressionSuffix", 9);
			LeaveRule_memberExpressionSuffix();
			if (state.backtracking > 0) { Memoize(input, 9, memberExpressionSuffix_StartIndex); }

		}
		DebugLocation(722, 1);
		} finally { DebugExitRule(GrammarFileName, "memberExpressionSuffix"); }
		return;

	}
	// $ANTLR end "memberExpressionSuffix"

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();

	// $ANTLR start "newExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:724:1: newExpression : ( memberExpression | 'new' ( LineTerminator )* newExpression );
	[GrammarRule("newExpression")]
	private void newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 10);
		TraceIn("newExpression", 10);
		int newExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(724, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:725:2: ( memberExpression | 'new' ( LineTerminator )* newExpression )
			int alt30=2;
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==BooleanLiteral||LA30_0==Identifier||(LA30_0>=NullLiteral && LA30_0<=NumericLiteral)||LA30_0==StringLiteral||LA30_0==42||LA30_0==76||LA30_0==95||LA30_0==116||LA30_0==118||LA30_0==127))
			{
				alt30 = 1;
			}
			else if ((LA30_0==107))
			{
				int LA30_9 = input.LA(2);

				if ((EvaluatePredicate(synpred42_AS3_fragment)))
				{
					alt30 = 1;
				}
				else if ((true))
				{
					alt30 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 30, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:725:4: memberExpression
				{
				DebugLocation(725, 4);
				PushFollow(Follow._memberExpression_in_newExpression3746);
				memberExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:726:4: 'new' ( LineTerminator )* newExpression
				{
				DebugLocation(726, 4);
				Match(input,107,Follow._107_in_newExpression3751); if (state.failed) return;
				DebugLocation(726, 10);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:726:10: ( LineTerminator )*
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, false);
					int LA29_0 = input.LA(1);

					if ((LA29_0==LineTerminator))
					{
						alt29 = 1;
					}


					} finally { DebugExitDecision(29); }
					switch ( alt29 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:726:10: LineTerminator
						{
						DebugLocation(726, 10);
						Match(input,LineTerminator,Follow._LineTerminator_in_newExpression3753); if (state.failed) return;

						}
						break;

					default:
						goto loop29;
					}
				}

				loop29:
					;

				} finally { DebugExitSubRule(29); }

				DebugLocation(726, 26);
				PushFollow(Follow._newExpression_in_newExpression3756);
				newExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("newExpression", 10);
			LeaveRule("newExpression", 10);
			LeaveRule_newExpression();
			if (state.backtracking > 0) { Memoize(input, 10, newExpression_StartIndex); }

		}
		DebugLocation(727, 1);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return;

	}
	// $ANTLR end "newExpression"

	partial void EnterRule_callExpression();
	partial void LeaveRule_callExpression();

	// $ANTLR start "callExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:729:1: callExpression : memberExpression ( LineTerminator )* argumentList ( ( LineTerminator )* callExpressionSuffix )* ;
	[GrammarRule("callExpression")]
	private void callExpression()
	{
		EnterRule_callExpression();
		EnterRule("callExpression", 11);
		TraceIn("callExpression", 11);
		int callExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "callExpression");
		DebugLocation(729, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:730:2: ( memberExpression ( LineTerminator )* argumentList ( ( LineTerminator )* callExpressionSuffix )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:730:4: memberExpression ( LineTerminator )* argumentList ( ( LineTerminator )* callExpressionSuffix )*
			{
			DebugLocation(730, 4);
			PushFollow(Follow._memberExpression_in_callExpression3768);
			memberExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(730, 21);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:730:21: ( LineTerminator )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==LineTerminator))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:730:21: LineTerminator
					{
					DebugLocation(730, 21);
					Match(input,LineTerminator,Follow._LineTerminator_in_callExpression3770); if (state.failed) return;

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }

			DebugLocation(730, 37);
			PushFollow(Follow._argumentList_in_callExpression3773);
			argumentList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(730, 50);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:730:50: ( ( LineTerminator )* callExpressionSuffix )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				try
				{
					alt33 = dfa33.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:730:51: ( LineTerminator )* callExpressionSuffix
					{
					DebugLocation(730, 51);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:730:51: ( LineTerminator )*
					try { DebugEnterSubRule(32);
					while (true)
					{
						int alt32=2;
						try { DebugEnterDecision(32, false);
						int LA32_0 = input.LA(1);

						if ((LA32_0==LineTerminator))
						{
							alt32 = 1;
						}


						} finally { DebugExitDecision(32); }
						switch ( alt32 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:730:51: LineTerminator
							{
							DebugLocation(730, 51);
							Match(input,LineTerminator,Follow._LineTerminator_in_callExpression3776); if (state.failed) return;

							}
							break;

						default:
							goto loop32;
						}
					}

					loop32:
						;

					} finally { DebugExitSubRule(32); }

					DebugLocation(730, 67);
					PushFollow(Follow._callExpressionSuffix_in_callExpression3779);
					callExpressionSuffix();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("callExpression", 11);
			LeaveRule("callExpression", 11);
			LeaveRule_callExpression();
			if (state.backtracking > 0) { Memoize(input, 11, callExpression_StartIndex); }

		}
		DebugLocation(731, 1);
		} finally { DebugExitRule(GrammarFileName, "callExpression"); }
		return;

	}
	// $ANTLR end "callExpression"

	partial void EnterRule_callExpressionSuffix();
	partial void LeaveRule_callExpressionSuffix();

	// $ANTLR start "callExpressionSuffix"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:733:1: callExpressionSuffix : ( argumentList | indexSuffix | propertyReferenceSuffix );
	[GrammarRule("callExpressionSuffix")]
	private void callExpressionSuffix()
	{
		EnterRule_callExpressionSuffix();
		EnterRule("callExpressionSuffix", 12);
		TraceIn("callExpressionSuffix", 12);
		int callExpressionSuffix_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "callExpressionSuffix");
		DebugLocation(733, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:734:2: ( argumentList | indexSuffix | propertyReferenceSuffix )
			int alt34=3;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case 42:
				{
				alt34 = 1;
				}
				break;
			case 76:
				{
				alt34 = 2;
				}
				break;
			case 53:
				{
				alt34 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:734:4: argumentList
				{
				DebugLocation(734, 4);
				PushFollow(Follow._argumentList_in_callExpressionSuffix3793);
				argumentList();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:735:4: indexSuffix
				{
				DebugLocation(735, 4);
				PushFollow(Follow._indexSuffix_in_callExpressionSuffix3798);
				indexSuffix();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:736:4: propertyReferenceSuffix
				{
				DebugLocation(736, 4);
				PushFollow(Follow._propertyReferenceSuffix_in_callExpressionSuffix3803);
				propertyReferenceSuffix();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("callExpressionSuffix", 12);
			LeaveRule("callExpressionSuffix", 12);
			LeaveRule_callExpressionSuffix();
			if (state.backtracking > 0) { Memoize(input, 12, callExpressionSuffix_StartIndex); }

		}
		DebugLocation(737, 1);
		} finally { DebugExitRule(GrammarFileName, "callExpressionSuffix"); }
		return;

	}
	// $ANTLR end "callExpressionSuffix"

	partial void EnterRule_indexSuffix();
	partial void LeaveRule_indexSuffix();

	// $ANTLR start "indexSuffix"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:739:1: indexSuffix : '[' ( LineTerminator )* expression ( LineTerminator )* ']' ;
	[GrammarRule("indexSuffix")]
	private void indexSuffix()
	{
		EnterRule_indexSuffix();
		EnterRule("indexSuffix", 13);
		TraceIn("indexSuffix", 13);
		int indexSuffix_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "indexSuffix");
		DebugLocation(739, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:740:2: ( '[' ( LineTerminator )* expression ( LineTerminator )* ']' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:740:4: '[' ( LineTerminator )* expression ( LineTerminator )* ']'
			{
			DebugLocation(740, 4);
			Match(input,76,Follow._76_in_indexSuffix3814); if (state.failed) return;
			DebugLocation(740, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:740:8: ( LineTerminator )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==LineTerminator))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:740:8: LineTerminator
					{
					DebugLocation(740, 8);
					Match(input,LineTerminator,Follow._LineTerminator_in_indexSuffix3816); if (state.failed) return;

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }

			DebugLocation(740, 24);
			PushFollow(Follow._expression_in_indexSuffix3819);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(740, 35);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:740:35: ( LineTerminator )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==LineTerminator))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:740:35: LineTerminator
					{
					DebugLocation(740, 35);
					Match(input,LineTerminator,Follow._LineTerminator_in_indexSuffix3821); if (state.failed) return;

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }

			DebugLocation(740, 51);
			Match(input,77,Follow._77_in_indexSuffix3824); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("indexSuffix", 13);
			LeaveRule("indexSuffix", 13);
			LeaveRule_indexSuffix();
			if (state.backtracking > 0) { Memoize(input, 13, indexSuffix_StartIndex); }

		}
		DebugLocation(741, 1);
		} finally { DebugExitRule(GrammarFileName, "indexSuffix"); }
		return;

	}
	// $ANTLR end "indexSuffix"

	partial void EnterRule_propertyReferenceSuffix();
	partial void LeaveRule_propertyReferenceSuffix();

	// $ANTLR start "propertyReferenceSuffix"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:743:1: propertyReferenceSuffix : '.' ( LineTerminator )* ( Identifier '::' ( LineTerminator )* )? Identifier ;
	[GrammarRule("propertyReferenceSuffix")]
	private void propertyReferenceSuffix()
	{
		EnterRule_propertyReferenceSuffix();
		EnterRule("propertyReferenceSuffix", 14);
		TraceIn("propertyReferenceSuffix", 14);
		int propertyReferenceSuffix_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "propertyReferenceSuffix");
		DebugLocation(743, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:744:2: ( '.' ( LineTerminator )* ( Identifier '::' ( LineTerminator )* )? Identifier )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:744:4: '.' ( LineTerminator )* ( Identifier '::' ( LineTerminator )* )? Identifier
			{
			DebugLocation(744, 4);
			Match(input,53,Follow._53_in_propertyReferenceSuffix3837); if (state.failed) return;
			DebugLocation(744, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:744:8: ( LineTerminator )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==LineTerminator))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:744:8: LineTerminator
					{
					DebugLocation(744, 8);
					Match(input,LineTerminator,Follow._LineTerminator_in_propertyReferenceSuffix3839); if (state.failed) return;

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }

			DebugLocation(744, 24);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:744:24: ( Identifier '::' ( LineTerminator )* )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==Identifier))
			{
				int LA39_1 = input.LA(2);

				if ((LA39_1==60))
				{
					alt39 = 1;
				}
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:744:25: Identifier '::' ( LineTerminator )*
				{
				DebugLocation(744, 25);
				Match(input,Identifier,Follow._Identifier_in_propertyReferenceSuffix3843); if (state.failed) return;
				DebugLocation(744, 36);
				Match(input,60,Follow._60_in_propertyReferenceSuffix3845); if (state.failed) return;
				DebugLocation(744, 41);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:744:41: ( LineTerminator )*
				try { DebugEnterSubRule(38);
				while (true)
				{
					int alt38=2;
					try { DebugEnterDecision(38, false);
					int LA38_0 = input.LA(1);

					if ((LA38_0==LineTerminator))
					{
						alt38 = 1;
					}


					} finally { DebugExitDecision(38); }
					switch ( alt38 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:744:41: LineTerminator
						{
						DebugLocation(744, 41);
						Match(input,LineTerminator,Follow._LineTerminator_in_propertyReferenceSuffix3847); if (state.failed) return;

						}
						break;

					default:
						goto loop38;
					}
				}

				loop38:
					;

				} finally { DebugExitSubRule(38); }


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(744, 59);
			Match(input,Identifier,Follow._Identifier_in_propertyReferenceSuffix3852); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyReferenceSuffix", 14);
			LeaveRule("propertyReferenceSuffix", 14);
			LeaveRule_propertyReferenceSuffix();
			if (state.backtracking > 0) { Memoize(input, 14, propertyReferenceSuffix_StartIndex); }

		}
		DebugLocation(745, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyReferenceSuffix"); }
		return;

	}
	// $ANTLR end "propertyReferenceSuffix"

	partial void EnterRule_argumentList();
	partial void LeaveRule_argumentList();

	// $ANTLR start "argumentList"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:747:1: argumentList : '(' ( ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )? ( LineTerminator )* ')' ;
	[GrammarRule("argumentList")]
	private void argumentList()
	{
		EnterRule_argumentList();
		EnterRule("argumentList", 15);
		TraceIn("argumentList", 15);
		int argumentList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "argumentList");
		DebugLocation(747, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:2: ( '(' ( ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )? ( LineTerminator )* ')' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:4: '(' ( ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )? ( LineTerminator )* ')'
			{
			DebugLocation(748, 4);
			Match(input,42,Follow._42_in_argumentList3864); if (state.failed) return;
			DebugLocation(748, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:8: ( ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			try
			{
				alt44 = dfa44.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:9: ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*
				{
				DebugLocation(748, 9);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:9: ( LineTerminator )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==LineTerminator))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:9: LineTerminator
						{
						DebugLocation(748, 9);
						Match(input,LineTerminator,Follow._LineTerminator_in_argumentList3867); if (state.failed) return;

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }

				DebugLocation(748, 25);
				PushFollow(Follow._assignmentExpression_in_argumentList3870);
				assignmentExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(748, 46);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:46: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					try
					{
						alt43 = dfa43.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:47: ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression
						{
						DebugLocation(748, 47);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:47: ( LineTerminator )*
						try { DebugEnterSubRule(41);
						while (true)
						{
							int alt41=2;
							try { DebugEnterDecision(41, false);
							int LA41_0 = input.LA(1);

							if ((LA41_0==LineTerminator))
							{
								alt41 = 1;
							}


							} finally { DebugExitDecision(41); }
							switch ( alt41 )
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:47: LineTerminator
								{
								DebugLocation(748, 47);
								Match(input,LineTerminator,Follow._LineTerminator_in_argumentList3873); if (state.failed) return;

								}
								break;

							default:
								goto loop41;
							}
						}

						loop41:
							;

						} finally { DebugExitSubRule(41); }

						DebugLocation(748, 63);
						Match(input,49,Follow._49_in_argumentList3876); if (state.failed) return;
						DebugLocation(748, 67);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:67: ( LineTerminator )*
						try { DebugEnterSubRule(42);
						while (true)
						{
							int alt42=2;
							try { DebugEnterDecision(42, false);
							int LA42_0 = input.LA(1);

							if ((LA42_0==LineTerminator))
							{
								alt42 = 1;
							}


							} finally { DebugExitDecision(42); }
							switch ( alt42 )
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:67: LineTerminator
								{
								DebugLocation(748, 67);
								Match(input,LineTerminator,Follow._LineTerminator_in_argumentList3878); if (state.failed) return;

								}
								break;

							default:
								goto loop42;
							}
						}

						loop42:
							;

						} finally { DebugExitSubRule(42); }

						DebugLocation(748, 83);
						PushFollow(Follow._assignmentExpression_in_argumentList3881);
						assignmentExpression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(748, 108);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:108: ( LineTerminator )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==LineTerminator))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:748:108: LineTerminator
					{
					DebugLocation(748, 108);
					Match(input,LineTerminator,Follow._LineTerminator_in_argumentList3887); if (state.failed) return;

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }

			DebugLocation(748, 124);
			Match(input,43,Follow._43_in_argumentList3890); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("argumentList", 15);
			LeaveRule("argumentList", 15);
			LeaveRule_argumentList();
			if (state.backtracking > 0) { Memoize(input, 15, argumentList_StartIndex); }

		}
		DebugLocation(749, 1);
		} finally { DebugExitRule(GrammarFileName, "argumentList"); }
		return;

	}
	// $ANTLR end "argumentList"

	partial void EnterRule_leftHandSideExpression();
	partial void LeaveRule_leftHandSideExpression();

	// $ANTLR start "leftHandSideExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:751:1: leftHandSideExpression : ( callExpression | newExpression );
	[GrammarRule("leftHandSideExpression")]
	private void leftHandSideExpression()
	{
		EnterRule_leftHandSideExpression();
		EnterRule("leftHandSideExpression", 16);
		TraceIn("leftHandSideExpression", 16);
		int leftHandSideExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "leftHandSideExpression");
		DebugLocation(751, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:752:2: ( callExpression | newExpression )
			int alt46=2;
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case 118:
				{
				int LA46_1 = input.LA(2);

				if ((EvaluatePredicate(synpred60_AS3_fragment)))
				{
					alt46 = 1;
				}
				else if ((true))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 46, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 116:
				{
				int LA46_2 = input.LA(2);

				if ((EvaluatePredicate(synpred60_AS3_fragment)))
				{
					alt46 = 1;
				}
				else if ((true))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 46, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA46_3 = input.LA(2);

				if ((EvaluatePredicate(synpred60_AS3_fragment)))
				{
					alt46 = 1;
				}
				else if ((true))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 46, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BooleanLiteral:
			case NullLiteral:
			case NumericLiteral:
			case StringLiteral:
				{
				int LA46_4 = input.LA(2);

				if ((EvaluatePredicate(synpred60_AS3_fragment)))
				{
					alt46 = 1;
				}
				else if ((true))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 46, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 76:
				{
				int LA46_5 = input.LA(2);

				if ((EvaluatePredicate(synpred60_AS3_fragment)))
				{
					alt46 = 1;
				}
				else if ((true))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 46, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 127:
				{
				int LA46_6 = input.LA(2);

				if ((EvaluatePredicate(synpred60_AS3_fragment)))
				{
					alt46 = 1;
				}
				else if ((true))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 46, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 42:
				{
				int LA46_7 = input.LA(2);

				if ((EvaluatePredicate(synpred60_AS3_fragment)))
				{
					alt46 = 1;
				}
				else if ((true))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 46, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 95:
				{
				int LA46_8 = input.LA(2);

				if ((EvaluatePredicate(synpred60_AS3_fragment)))
				{
					alt46 = 1;
				}
				else if ((true))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 46, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 107:
				{
				int LA46_9 = input.LA(2);

				if ((EvaluatePredicate(synpred60_AS3_fragment)))
				{
					alt46 = 1;
				}
				else if ((true))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 46, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:752:4: callExpression
				{
				DebugLocation(752, 4);
				PushFollow(Follow._callExpression_in_leftHandSideExpression3902);
				callExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:753:4: newExpression
				{
				DebugLocation(753, 4);
				PushFollow(Follow._newExpression_in_leftHandSideExpression3907);
				newExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("leftHandSideExpression", 16);
			LeaveRule("leftHandSideExpression", 16);
			LeaveRule_leftHandSideExpression();
			if (state.backtracking > 0) { Memoize(input, 16, leftHandSideExpression_StartIndex); }

		}
		DebugLocation(754, 1);
		} finally { DebugExitRule(GrammarFileName, "leftHandSideExpression"); }
		return;

	}
	// $ANTLR end "leftHandSideExpression"

	partial void EnterRule_postfixExpression();
	partial void LeaveRule_postfixExpression();

	// $ANTLR start "postfixExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:756:1: postfixExpression : ( leftHandSideExpression '++' | leftHandSideExpression '--' | leftHandSideExpression );
	[GrammarRule("postfixExpression")]
	private void postfixExpression()
	{
		EnterRule_postfixExpression();
		EnterRule("postfixExpression", 17);
		TraceIn("postfixExpression", 17);
		int postfixExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "postfixExpression");
		DebugLocation(756, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:757:2: ( leftHandSideExpression '++' | leftHandSideExpression '--' | leftHandSideExpression )
			int alt47=3;
			try { DebugEnterDecision(47, false);
			switch (input.LA(1))
			{
			case 118:
				{
				int LA47_1 = input.LA(2);

				if ((EvaluatePredicate(synpred61_AS3_fragment)))
				{
					alt47 = 1;
				}
				else if ((EvaluatePredicate(synpred62_AS3_fragment)))
				{
					alt47 = 2;
				}
				else if ((true))
				{
					alt47 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 47, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 116:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred61_AS3_fragment)))
				{
					alt47 = 1;
				}
				else if ((EvaluatePredicate(synpred62_AS3_fragment)))
				{
					alt47 = 2;
				}
				else if ((true))
				{
					alt47 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 47, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA47_3 = input.LA(2);

				if ((EvaluatePredicate(synpred61_AS3_fragment)))
				{
					alt47 = 1;
				}
				else if ((EvaluatePredicate(synpred62_AS3_fragment)))
				{
					alt47 = 2;
				}
				else if ((true))
				{
					alt47 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 47, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BooleanLiteral:
			case NullLiteral:
			case NumericLiteral:
			case StringLiteral:
				{
				int LA47_4 = input.LA(2);

				if ((EvaluatePredicate(synpred61_AS3_fragment)))
				{
					alt47 = 1;
				}
				else if ((EvaluatePredicate(synpred62_AS3_fragment)))
				{
					alt47 = 2;
				}
				else if ((true))
				{
					alt47 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 47, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 76:
				{
				int LA47_5 = input.LA(2);

				if ((EvaluatePredicate(synpred61_AS3_fragment)))
				{
					alt47 = 1;
				}
				else if ((EvaluatePredicate(synpred62_AS3_fragment)))
				{
					alt47 = 2;
				}
				else if ((true))
				{
					alt47 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 47, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 127:
				{
				int LA47_6 = input.LA(2);

				if ((EvaluatePredicate(synpred61_AS3_fragment)))
				{
					alt47 = 1;
				}
				else if ((EvaluatePredicate(synpred62_AS3_fragment)))
				{
					alt47 = 2;
				}
				else if ((true))
				{
					alt47 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 47, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 42:
				{
				int LA47_7 = input.LA(2);

				if ((EvaluatePredicate(synpred61_AS3_fragment)))
				{
					alt47 = 1;
				}
				else if ((EvaluatePredicate(synpred62_AS3_fragment)))
				{
					alt47 = 2;
				}
				else if ((true))
				{
					alt47 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 47, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 95:
				{
				int LA47_8 = input.LA(2);

				if ((EvaluatePredicate(synpred61_AS3_fragment)))
				{
					alt47 = 1;
				}
				else if ((EvaluatePredicate(synpred62_AS3_fragment)))
				{
					alt47 = 2;
				}
				else if ((true))
				{
					alt47 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 47, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 107:
				{
				int LA47_9 = input.LA(2);

				if ((EvaluatePredicate(synpred61_AS3_fragment)))
				{
					alt47 = 1;
				}
				else if ((EvaluatePredicate(synpred62_AS3_fragment)))
				{
					alt47 = 2;
				}
				else if ((true))
				{
					alt47 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 47, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:757:4: leftHandSideExpression '++'
				{
				DebugLocation(757, 4);
				PushFollow(Follow._leftHandSideExpression_in_postfixExpression3918);
				leftHandSideExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(757, 27);
				Match(input,47,Follow._47_in_postfixExpression3920); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:758:4: leftHandSideExpression '--'
				{
				DebugLocation(758, 4);
				PushFollow(Follow._leftHandSideExpression_in_postfixExpression3925);
				leftHandSideExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(758, 27);
				Match(input,51,Follow._51_in_postfixExpression3927); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:759:4: leftHandSideExpression
				{
				DebugLocation(759, 4);
				PushFollow(Follow._leftHandSideExpression_in_postfixExpression3932);
				leftHandSideExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("postfixExpression", 17);
			LeaveRule("postfixExpression", 17);
			LeaveRule_postfixExpression();
			if (state.backtracking > 0) { Memoize(input, 17, postfixExpression_StartIndex); }

		}
		DebugLocation(760, 1);
		} finally { DebugExitRule(GrammarFileName, "postfixExpression"); }
		return;

	}
	// $ANTLR end "postfixExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:762:1: unaryExpression : ( postfixExpression | ( 'delete' | 'void' | 'typeof' | 'as' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression );
	[GrammarRule("unaryExpression")]
	private void unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 18);
		TraceIn("unaryExpression", 18);
		int unaryExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(762, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:763:2: ( postfixExpression | ( 'delete' | 'void' | 'typeof' | 'as' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression )
			int alt48=2;
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==BooleanLiteral||LA48_0==Identifier||(LA48_0>=NullLiteral && LA48_0<=NumericLiteral)||LA48_0==StringLiteral||LA48_0==42||LA48_0==76||LA48_0==95||LA48_0==107||LA48_0==116||LA48_0==118||LA48_0==127))
			{
				alt48 = 1;
			}
			else if ((LA48_0==34||(LA48_0>=46 && LA48_0<=47)||(LA48_0>=50 && LA48_0<=51)||LA48_0==80||LA48_0==88||LA48_0==121||LA48_0==124||LA48_0==132))
			{
				alt48 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:763:4: postfixExpression
				{
				DebugLocation(763, 4);
				PushFollow(Follow._postfixExpression_in_unaryExpression3943);
				postfixExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:764:4: ( 'delete' | 'void' | 'typeof' | 'as' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression
				{
				DebugLocation(764, 4);
				if (input.LA(1)==34||(input.LA(1)>=46 && input.LA(1)<=47)||(input.LA(1)>=50 && input.LA(1)<=51)||input.LA(1)==80||input.LA(1)==88||input.LA(1)==121||input.LA(1)==124||input.LA(1)==132)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(764, 80);
				PushFollow(Follow._unaryExpression_in_unaryExpression3988);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExpression", 18);
			LeaveRule("unaryExpression", 18);
			LeaveRule_unaryExpression();
			if (state.backtracking > 0) { Memoize(input, 18, unaryExpression_StartIndex); }

		}
		DebugLocation(765, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:767:1: multiplicativeExpression : unaryExpression ( ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private void multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 19);
		TraceIn("multiplicativeExpression", 19);
		int multiplicativeExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(767, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:768:2: ( unaryExpression ( ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:768:4: unaryExpression ( ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression )*
			{
			DebugLocation(768, 4);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression3999);
			unaryExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(768, 20);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:768:20: ( ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				try
				{
					alt51 = dfa51.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:768:21: ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression
					{
					DebugLocation(768, 21);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:768:21: ( LineTerminator )*
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_0 = input.LA(1);

						if ((LA49_0==LineTerminator))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch ( alt49 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:768:21: LineTerminator
							{
							DebugLocation(768, 21);
							Match(input,LineTerminator,Follow._LineTerminator_in_multiplicativeExpression4002); if (state.failed) return;

							}
							break;

						default:
							goto loop49;
						}
					}

					loop49:
						;

					} finally { DebugExitSubRule(49); }

					DebugLocation(768, 37);
					if (input.LA(1)==37||input.LA(1)==44||input.LA(1)==57)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(768, 55);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:768:55: ( LineTerminator )*
					try { DebugEnterSubRule(50);
					while (true)
					{
						int alt50=2;
						try { DebugEnterDecision(50, false);
						int LA50_0 = input.LA(1);

						if ((LA50_0==LineTerminator))
						{
							alt50 = 1;
						}


						} finally { DebugExitDecision(50); }
						switch ( alt50 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:768:55: LineTerminator
							{
							DebugLocation(768, 55);
							Match(input,LineTerminator,Follow._LineTerminator_in_multiplicativeExpression4017); if (state.failed) return;

							}
							break;

						default:
							goto loop50;
						}
					}

					loop50:
						;

					} finally { DebugExitSubRule(50); }

					DebugLocation(768, 71);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression4020);
					unaryExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multiplicativeExpression", 19);
			LeaveRule("multiplicativeExpression", 19);
			LeaveRule_multiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 19, multiplicativeExpression_StartIndex); }

		}
		DebugLocation(769, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:771:1: additiveExpression : multiplicativeExpression ( ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private void additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 20);
		TraceIn("additiveExpression", 20);
		int additiveExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(771, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:2: ( multiplicativeExpression ( ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:4: multiplicativeExpression ( ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression )*
			{
			DebugLocation(772, 4);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression4033);
			multiplicativeExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(772, 29);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:29: ( ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==LineTerminator))
				{
					int LA54_1 = input.LA(2);

					if ((EvaluatePredicate(synpred81_AS3_fragment)))
					{
						alt54 = 1;
					}


				}
				else if ((LA54_0==46||LA54_0==50))
				{
					int LA54_31 = input.LA(2);

					if ((EvaluatePredicate(synpred81_AS3_fragment)))
					{
						alt54 = 1;
					}


				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:30: ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression
					{
					DebugLocation(772, 30);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:30: ( LineTerminator )*
					try { DebugEnterSubRule(52);
					while (true)
					{
						int alt52=2;
						try { DebugEnterDecision(52, false);
						int LA52_0 = input.LA(1);

						if ((LA52_0==LineTerminator))
						{
							alt52 = 1;
						}


						} finally { DebugExitDecision(52); }
						switch ( alt52 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:30: LineTerminator
							{
							DebugLocation(772, 30);
							Match(input,LineTerminator,Follow._LineTerminator_in_additiveExpression4036); if (state.failed) return;

							}
							break;

						default:
							goto loop52;
						}
					}

					loop52:
						;

					} finally { DebugExitSubRule(52); }

					DebugLocation(772, 46);
					if (input.LA(1)==46||input.LA(1)==50)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(772, 58);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:58: ( LineTerminator )*
					try { DebugEnterSubRule(53);
					while (true)
					{
						int alt53=2;
						try { DebugEnterDecision(53, false);
						int LA53_0 = input.LA(1);

						if ((LA53_0==LineTerminator))
						{
							alt53 = 1;
						}


						} finally { DebugExitDecision(53); }
						switch ( alt53 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:58: LineTerminator
							{
							DebugLocation(772, 58);
							Match(input,LineTerminator,Follow._LineTerminator_in_additiveExpression4047); if (state.failed) return;

							}
							break;

						default:
							goto loop53;
						}
					}

					loop53:
						;

					} finally { DebugExitSubRule(53); }

					DebugLocation(772, 74);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression4050);
					multiplicativeExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("additiveExpression", 20);
			LeaveRule("additiveExpression", 20);
			LeaveRule_additiveExpression();
			if (state.backtracking > 0) { Memoize(input, 20, additiveExpression_StartIndex); }

		}
		DebugLocation(773, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();

	// $ANTLR start "shiftExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:775:1: shiftExpression : additiveExpression ( ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private void shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 21);
		TraceIn("shiftExpression", 21);
		int shiftExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(775, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:776:2: ( additiveExpression ( ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:776:4: additiveExpression ( ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression )*
			{
			DebugLocation(776, 4);
			PushFollow(Follow._additiveExpression_in_shiftExpression4063);
			additiveExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(776, 23);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:776:23: ( ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				try
				{
					alt57 = dfa57.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:776:24: ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression
					{
					DebugLocation(776, 24);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:776:24: ( LineTerminator )*
					try { DebugEnterSubRule(55);
					while (true)
					{
						int alt55=2;
						try { DebugEnterDecision(55, false);
						int LA55_0 = input.LA(1);

						if ((LA55_0==LineTerminator))
						{
							alt55 = 1;
						}


						} finally { DebugExitDecision(55); }
						switch ( alt55 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:776:24: LineTerminator
							{
							DebugLocation(776, 24);
							Match(input,LineTerminator,Follow._LineTerminator_in_shiftExpression4066); if (state.failed) return;

							}
							break;

						default:
							goto loop55;
						}
					}

					loop55:
						;

					} finally { DebugExitSubRule(55); }

					DebugLocation(776, 40);
					if (input.LA(1)==63||input.LA(1)==71||input.LA(1)==73)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(776, 62);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:776:62: ( LineTerminator )*
					try { DebugEnterSubRule(56);
					while (true)
					{
						int alt56=2;
						try { DebugEnterDecision(56, false);
						int LA56_0 = input.LA(1);

						if ((LA56_0==LineTerminator))
						{
							alt56 = 1;
						}


						} finally { DebugExitDecision(56); }
						switch ( alt56 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:776:62: LineTerminator
							{
							DebugLocation(776, 62);
							Match(input,LineTerminator,Follow._LineTerminator_in_shiftExpression4081); if (state.failed) return;

							}
							break;

						default:
							goto loop56;
						}
					}

					loop56:
						;

					} finally { DebugExitSubRule(56); }

					DebugLocation(776, 78);
					PushFollow(Follow._additiveExpression_in_shiftExpression4084);
					additiveExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("shiftExpression", 21);
			LeaveRule("shiftExpression", 21);
			LeaveRule_shiftExpression();
			if (state.backtracking > 0) { Memoize(input, 21, shiftExpression_StartIndex); }

		}
		DebugLocation(777, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();

	// $ANTLR start "relationalExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:779:1: relationalExpression : shiftExpression ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' | 'in' ) ( LineTerminator )* shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private void relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 22);
		TraceIn("relationalExpression", 22);
		int relationalExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(779, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:2: ( shiftExpression ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' | 'in' ) ( LineTerminator )* shiftExpression )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:4: shiftExpression ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' | 'in' ) ( LineTerminator )* shiftExpression )*
			{
			DebugLocation(780, 4);
			PushFollow(Follow._shiftExpression_in_relationalExpression4097);
			shiftExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(780, 20);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:20: ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' | 'in' ) ( LineTerminator )* shiftExpression )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				switch (input.LA(1))
				{
				case LineTerminator:
					{
					int LA60_1 = input.LA(2);

					if ((EvaluatePredicate(synpred95_AS3_fragment)))
					{
						alt60 = 1;
					}


					}
					break;
				case 100:
					{
					int LA60_16 = input.LA(2);

					if ((EvaluatePredicate(synpred95_AS3_fragment)))
					{
						alt60 = 1;
					}


					}
					break;
				case 62:
				case 65:
				case 69:
				case 70:
				case 102:
				case 105:
					{
					alt60 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:21: ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' | 'in' ) ( LineTerminator )* shiftExpression
					{
					DebugLocation(780, 21);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:21: ( LineTerminator )*
					try { DebugEnterSubRule(58);
					while (true)
					{
						int alt58=2;
						try { DebugEnterDecision(58, false);
						int LA58_0 = input.LA(1);

						if ((LA58_0==LineTerminator))
						{
							alt58 = 1;
						}


						} finally { DebugExitDecision(58); }
						switch ( alt58 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:21: LineTerminator
							{
							DebugLocation(780, 21);
							Match(input,LineTerminator,Follow._LineTerminator_in_relationalExpression4100); if (state.failed) return;

							}
							break;

						default:
							goto loop58;
						}
					}

					loop58:
						;

					} finally { DebugExitSubRule(58); }

					DebugLocation(780, 37);
					if (input.LA(1)==62||input.LA(1)==65||(input.LA(1)>=69 && input.LA(1)<=70)||input.LA(1)==100||input.LA(1)==102||input.LA(1)==105)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(780, 92);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:92: ( LineTerminator )*
					try { DebugEnterSubRule(59);
					while (true)
					{
						int alt59=2;
						try { DebugEnterDecision(59, false);
						int LA59_0 = input.LA(1);

						if ((LA59_0==LineTerminator))
						{
							alt59 = 1;
						}


						} finally { DebugExitDecision(59); }
						switch ( alt59 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:92: LineTerminator
							{
							DebugLocation(780, 92);
							Match(input,LineTerminator,Follow._LineTerminator_in_relationalExpression4131); if (state.failed) return;

							}
							break;

						default:
							goto loop59;
						}
					}

					loop59:
						;

					} finally { DebugExitSubRule(59); }

					DebugLocation(780, 108);
					PushFollow(Follow._shiftExpression_in_relationalExpression4134);
					shiftExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalExpression", 22);
			LeaveRule("relationalExpression", 22);
			LeaveRule_relationalExpression();
			if (state.backtracking > 0) { Memoize(input, 22, relationalExpression_StartIndex); }

		}
		DebugLocation(781, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_relationalExpressionNoIn();
	partial void LeaveRule_relationalExpressionNoIn();

	// $ANTLR start "relationalExpressionNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:783:1: relationalExpressionNoIn : shiftExpression ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' ) ( LineTerminator )* shiftExpression )* ;
	[GrammarRule("relationalExpressionNoIn")]
	private void relationalExpressionNoIn()
	{
		EnterRule_relationalExpressionNoIn();
		EnterRule("relationalExpressionNoIn", 23);
		TraceIn("relationalExpressionNoIn", 23);
		int relationalExpressionNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "relationalExpressionNoIn");
		DebugLocation(783, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:784:2: ( shiftExpression ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' ) ( LineTerminator )* shiftExpression )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:784:4: shiftExpression ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' ) ( LineTerminator )* shiftExpression )*
			{
			DebugLocation(784, 4);
			PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn4148);
			shiftExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(784, 20);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:784:20: ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' ) ( LineTerminator )* shiftExpression )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				try
				{
					alt63 = dfa63.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:784:21: ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' ) ( LineTerminator )* shiftExpression
					{
					DebugLocation(784, 21);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:784:21: ( LineTerminator )*
					try { DebugEnterSubRule(61);
					while (true)
					{
						int alt61=2;
						try { DebugEnterDecision(61, false);
						int LA61_0 = input.LA(1);

						if ((LA61_0==LineTerminator))
						{
							alt61 = 1;
						}


						} finally { DebugExitDecision(61); }
						switch ( alt61 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:784:21: LineTerminator
							{
							DebugLocation(784, 21);
							Match(input,LineTerminator,Follow._LineTerminator_in_relationalExpressionNoIn4151); if (state.failed) return;

							}
							break;

						default:
							goto loop61;
						}
					}

					loop61:
						;

					} finally { DebugExitSubRule(61); }

					DebugLocation(784, 37);
					if (input.LA(1)==62||input.LA(1)==65||(input.LA(1)>=69 && input.LA(1)<=70)||input.LA(1)==102||input.LA(1)==105)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(784, 85);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:784:85: ( LineTerminator )*
					try { DebugEnterSubRule(62);
					while (true)
					{
						int alt62=2;
						try { DebugEnterDecision(62, false);
						int LA62_0 = input.LA(1);

						if ((LA62_0==LineTerminator))
						{
							alt62 = 1;
						}


						} finally { DebugExitDecision(62); }
						switch ( alt62 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:784:85: LineTerminator
							{
							DebugLocation(784, 85);
							Match(input,LineTerminator,Follow._LineTerminator_in_relationalExpressionNoIn4178); if (state.failed) return;

							}
							break;

						default:
							goto loop62;
						}
					}

					loop62:
						;

					} finally { DebugExitSubRule(62); }

					DebugLocation(784, 101);
					PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn4181);
					shiftExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalExpressionNoIn", 23);
			LeaveRule("relationalExpressionNoIn", 23);
			LeaveRule_relationalExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 23, relationalExpressionNoIn_StartIndex); }

		}
		DebugLocation(785, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpressionNoIn"); }
		return;

	}
	// $ANTLR end "relationalExpressionNoIn"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();

	// $ANTLR start "equalityExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:787:1: equalityExpression : relationalExpression ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private void equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 24);
		TraceIn("equalityExpression", 24);
		int equalityExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(787, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:788:2: ( relationalExpression ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:788:4: relationalExpression ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression )*
			{
			DebugLocation(788, 4);
			PushFollow(Follow._relationalExpression_in_equalityExpression4195);
			relationalExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(788, 25);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:788:25: ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				try
				{
					alt66 = dfa66.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:788:26: ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression
					{
					DebugLocation(788, 26);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:788:26: ( LineTerminator )*
					try { DebugEnterSubRule(64);
					while (true)
					{
						int alt64=2;
						try { DebugEnterDecision(64, false);
						int LA64_0 = input.LA(1);

						if ((LA64_0==LineTerminator))
						{
							alt64 = 1;
						}


						} finally { DebugExitDecision(64); }
						switch ( alt64 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:788:26: LineTerminator
							{
							DebugLocation(788, 26);
							Match(input,LineTerminator,Follow._LineTerminator_in_equalityExpression4198); if (state.failed) return;

							}
							break;

						default:
							goto loop64;
						}
					}

					loop64:
						;

					} finally { DebugExitSubRule(64); }

					DebugLocation(788, 42);
					if ((input.LA(1)>=35 && input.LA(1)<=36)||(input.LA(1)>=67 && input.LA(1)<=68))
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(788, 72);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:788:72: ( LineTerminator )*
					try { DebugEnterSubRule(65);
					while (true)
					{
						int alt65=2;
						try { DebugEnterDecision(65, false);
						int LA65_0 = input.LA(1);

						if ((LA65_0==LineTerminator))
						{
							alt65 = 1;
						}


						} finally { DebugExitDecision(65); }
						switch ( alt65 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:788:72: LineTerminator
							{
							DebugLocation(788, 72);
							Match(input,LineTerminator,Follow._LineTerminator_in_equalityExpression4217); if (state.failed) return;

							}
							break;

						default:
							goto loop65;
						}
					}

					loop65:
						;

					} finally { DebugExitSubRule(65); }

					DebugLocation(788, 88);
					PushFollow(Follow._relationalExpression_in_equalityExpression4220);
					relationalExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("equalityExpression", 24);
			LeaveRule("equalityExpression", 24);
			LeaveRule_equalityExpression();
			if (state.backtracking > 0) { Memoize(input, 24, equalityExpression_StartIndex); }

		}
		DebugLocation(789, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_equalityExpressionNoIn();
	partial void LeaveRule_equalityExpressionNoIn();

	// $ANTLR start "equalityExpressionNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:791:1: equalityExpressionNoIn : relationalExpressionNoIn ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn )* ;
	[GrammarRule("equalityExpressionNoIn")]
	private void equalityExpressionNoIn()
	{
		EnterRule_equalityExpressionNoIn();
		EnterRule("equalityExpressionNoIn", 25);
		TraceIn("equalityExpressionNoIn", 25);
		int equalityExpressionNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "equalityExpressionNoIn");
		DebugLocation(791, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:792:2: ( relationalExpressionNoIn ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:792:4: relationalExpressionNoIn ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn )*
			{
			DebugLocation(792, 4);
			PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn4233);
			relationalExpressionNoIn();
			PopFollow();
			if (state.failed) return;
			DebugLocation(792, 29);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:792:29: ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, false);
				try
				{
					alt69 = dfa69.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:792:30: ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn
					{
					DebugLocation(792, 30);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:792:30: ( LineTerminator )*
					try { DebugEnterSubRule(67);
					while (true)
					{
						int alt67=2;
						try { DebugEnterDecision(67, false);
						int LA67_0 = input.LA(1);

						if ((LA67_0==LineTerminator))
						{
							alt67 = 1;
						}


						} finally { DebugExitDecision(67); }
						switch ( alt67 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:792:30: LineTerminator
							{
							DebugLocation(792, 30);
							Match(input,LineTerminator,Follow._LineTerminator_in_equalityExpressionNoIn4236); if (state.failed) return;

							}
							break;

						default:
							goto loop67;
						}
					}

					loop67:
						;

					} finally { DebugExitSubRule(67); }

					DebugLocation(792, 46);
					if ((input.LA(1)>=35 && input.LA(1)<=36)||(input.LA(1)>=67 && input.LA(1)<=68))
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(792, 76);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:792:76: ( LineTerminator )*
					try { DebugEnterSubRule(68);
					while (true)
					{
						int alt68=2;
						try { DebugEnterDecision(68, false);
						int LA68_0 = input.LA(1);

						if ((LA68_0==LineTerminator))
						{
							alt68 = 1;
						}


						} finally { DebugExitDecision(68); }
						switch ( alt68 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:792:76: LineTerminator
							{
							DebugLocation(792, 76);
							Match(input,LineTerminator,Follow._LineTerminator_in_equalityExpressionNoIn4255); if (state.failed) return;

							}
							break;

						default:
							goto loop68;
						}
					}

					loop68:
						;

					} finally { DebugExitSubRule(68); }

					DebugLocation(792, 92);
					PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn4258);
					relationalExpressionNoIn();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("equalityExpressionNoIn", 25);
			LeaveRule("equalityExpressionNoIn", 25);
			LeaveRule_equalityExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 25, equalityExpressionNoIn_StartIndex); }

		}
		DebugLocation(793, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpressionNoIn"); }
		return;

	}
	// $ANTLR end "equalityExpressionNoIn"

	partial void EnterRule_bitwiseANDExpression();
	partial void LeaveRule_bitwiseANDExpression();

	// $ANTLR start "bitwiseANDExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:795:1: bitwiseANDExpression : equalityExpression ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpression )* ;
	[GrammarRule("bitwiseANDExpression")]
	private void bitwiseANDExpression()
	{
		EnterRule_bitwiseANDExpression();
		EnterRule("bitwiseANDExpression", 26);
		TraceIn("bitwiseANDExpression", 26);
		int bitwiseANDExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpression");
		DebugLocation(795, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:796:2: ( equalityExpression ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpression )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:796:4: equalityExpression ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpression )*
			{
			DebugLocation(796, 4);
			PushFollow(Follow._equalityExpression_in_bitwiseANDExpression4271);
			equalityExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(796, 23);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:796:23: ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpression )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=2;
				try { DebugEnterDecision(72, false);
				try
				{
					alt72 = dfa72.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:796:24: ( LineTerminator )* '&' ( LineTerminator )* equalityExpression
					{
					DebugLocation(796, 24);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:796:24: ( LineTerminator )*
					try { DebugEnterSubRule(70);
					while (true)
					{
						int alt70=2;
						try { DebugEnterDecision(70, false);
						int LA70_0 = input.LA(1);

						if ((LA70_0==LineTerminator))
						{
							alt70 = 1;
						}


						} finally { DebugExitDecision(70); }
						switch ( alt70 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:796:24: LineTerminator
							{
							DebugLocation(796, 24);
							Match(input,LineTerminator,Follow._LineTerminator_in_bitwiseANDExpression4274); if (state.failed) return;

							}
							break;

						default:
							goto loop70;
						}
					}

					loop70:
						;

					} finally { DebugExitSubRule(70); }

					DebugLocation(796, 40);
					Match(input,40,Follow._40_in_bitwiseANDExpression4277); if (state.failed) return;
					DebugLocation(796, 44);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:796:44: ( LineTerminator )*
					try { DebugEnterSubRule(71);
					while (true)
					{
						int alt71=2;
						try { DebugEnterDecision(71, false);
						int LA71_0 = input.LA(1);

						if ((LA71_0==LineTerminator))
						{
							alt71 = 1;
						}


						} finally { DebugExitDecision(71); }
						switch ( alt71 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:796:44: LineTerminator
							{
							DebugLocation(796, 44);
							Match(input,LineTerminator,Follow._LineTerminator_in_bitwiseANDExpression4279); if (state.failed) return;

							}
							break;

						default:
							goto loop71;
						}
					}

					loop71:
						;

					} finally { DebugExitSubRule(71); }

					DebugLocation(796, 60);
					PushFollow(Follow._equalityExpression_in_bitwiseANDExpression4282);
					equalityExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseANDExpression", 26);
			LeaveRule("bitwiseANDExpression", 26);
			LeaveRule_bitwiseANDExpression();
			if (state.backtracking > 0) { Memoize(input, 26, bitwiseANDExpression_StartIndex); }

		}
		DebugLocation(797, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpression"); }
		return;

	}
	// $ANTLR end "bitwiseANDExpression"

	partial void EnterRule_bitwiseANDExpressionNoIn();
	partial void LeaveRule_bitwiseANDExpressionNoIn();

	// $ANTLR start "bitwiseANDExpressionNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:799:1: bitwiseANDExpressionNoIn : equalityExpressionNoIn ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn )* ;
	[GrammarRule("bitwiseANDExpressionNoIn")]
	private void bitwiseANDExpressionNoIn()
	{
		EnterRule_bitwiseANDExpressionNoIn();
		EnterRule("bitwiseANDExpressionNoIn", 27);
		TraceIn("bitwiseANDExpressionNoIn", 27);
		int bitwiseANDExpressionNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpressionNoIn");
		DebugLocation(799, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:800:2: ( equalityExpressionNoIn ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:800:4: equalityExpressionNoIn ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn )*
			{
			DebugLocation(800, 4);
			PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4296);
			equalityExpressionNoIn();
			PopFollow();
			if (state.failed) return;
			DebugLocation(800, 27);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:800:27: ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				try
				{
					alt75 = dfa75.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:800:28: ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn
					{
					DebugLocation(800, 28);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:800:28: ( LineTerminator )*
					try { DebugEnterSubRule(73);
					while (true)
					{
						int alt73=2;
						try { DebugEnterDecision(73, false);
						int LA73_0 = input.LA(1);

						if ((LA73_0==LineTerminator))
						{
							alt73 = 1;
						}


						} finally { DebugExitDecision(73); }
						switch ( alt73 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:800:28: LineTerminator
							{
							DebugLocation(800, 28);
							Match(input,LineTerminator,Follow._LineTerminator_in_bitwiseANDExpressionNoIn4299); if (state.failed) return;

							}
							break;

						default:
							goto loop73;
						}
					}

					loop73:
						;

					} finally { DebugExitSubRule(73); }

					DebugLocation(800, 44);
					Match(input,40,Follow._40_in_bitwiseANDExpressionNoIn4302); if (state.failed) return;
					DebugLocation(800, 48);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:800:48: ( LineTerminator )*
					try { DebugEnterSubRule(74);
					while (true)
					{
						int alt74=2;
						try { DebugEnterDecision(74, false);
						int LA74_0 = input.LA(1);

						if ((LA74_0==LineTerminator))
						{
							alt74 = 1;
						}


						} finally { DebugExitDecision(74); }
						switch ( alt74 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:800:48: LineTerminator
							{
							DebugLocation(800, 48);
							Match(input,LineTerminator,Follow._LineTerminator_in_bitwiseANDExpressionNoIn4304); if (state.failed) return;

							}
							break;

						default:
							goto loop74;
						}
					}

					loop74:
						;

					} finally { DebugExitSubRule(74); }

					DebugLocation(800, 64);
					PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4307);
					equalityExpressionNoIn();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseANDExpressionNoIn", 27);
			LeaveRule("bitwiseANDExpressionNoIn", 27);
			LeaveRule_bitwiseANDExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 27, bitwiseANDExpressionNoIn_StartIndex); }

		}
		DebugLocation(801, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpressionNoIn"); }
		return;

	}
	// $ANTLR end "bitwiseANDExpressionNoIn"

	partial void EnterRule_bitwiseXORExpression();
	partial void LeaveRule_bitwiseXORExpression();

	// $ANTLR start "bitwiseXORExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:803:1: bitwiseXORExpression : bitwiseANDExpression ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression )* ;
	[GrammarRule("bitwiseXORExpression")]
	private void bitwiseXORExpression()
	{
		EnterRule_bitwiseXORExpression();
		EnterRule("bitwiseXORExpression", 28);
		TraceIn("bitwiseXORExpression", 28);
		int bitwiseXORExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpression");
		DebugLocation(803, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:804:2: ( bitwiseANDExpression ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:804:4: bitwiseANDExpression ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression )*
			{
			DebugLocation(804, 4);
			PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression4320);
			bitwiseANDExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(804, 25);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:804:25: ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				try
				{
					alt78 = dfa78.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:804:26: ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression
					{
					DebugLocation(804, 26);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:804:26: ( LineTerminator )*
					try { DebugEnterSubRule(76);
					while (true)
					{
						int alt76=2;
						try { DebugEnterDecision(76, false);
						int LA76_0 = input.LA(1);

						if ((LA76_0==LineTerminator))
						{
							alt76 = 1;
						}


						} finally { DebugExitDecision(76); }
						switch ( alt76 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:804:26: LineTerminator
							{
							DebugLocation(804, 26);
							Match(input,LineTerminator,Follow._LineTerminator_in_bitwiseXORExpression4323); if (state.failed) return;

							}
							break;

						default:
							goto loop76;
						}
					}

					loop76:
						;

					} finally { DebugExitSubRule(76); }

					DebugLocation(804, 42);
					Match(input,78,Follow._78_in_bitwiseXORExpression4326); if (state.failed) return;
					DebugLocation(804, 46);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:804:46: ( LineTerminator )*
					try { DebugEnterSubRule(77);
					while (true)
					{
						int alt77=2;
						try { DebugEnterDecision(77, false);
						int LA77_0 = input.LA(1);

						if ((LA77_0==LineTerminator))
						{
							alt77 = 1;
						}


						} finally { DebugExitDecision(77); }
						switch ( alt77 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:804:46: LineTerminator
							{
							DebugLocation(804, 46);
							Match(input,LineTerminator,Follow._LineTerminator_in_bitwiseXORExpression4328); if (state.failed) return;

							}
							break;

						default:
							goto loop77;
						}
					}

					loop77:
						;

					} finally { DebugExitSubRule(77); }

					DebugLocation(804, 62);
					PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression4331);
					bitwiseANDExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseXORExpression", 28);
			LeaveRule("bitwiseXORExpression", 28);
			LeaveRule_bitwiseXORExpression();
			if (state.backtracking > 0) { Memoize(input, 28, bitwiseXORExpression_StartIndex); }

		}
		DebugLocation(805, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpression"); }
		return;

	}
	// $ANTLR end "bitwiseXORExpression"

	partial void EnterRule_bitwiseXORExpressionNoIn();
	partial void LeaveRule_bitwiseXORExpressionNoIn();

	// $ANTLR start "bitwiseXORExpressionNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:807:1: bitwiseXORExpressionNoIn : bitwiseANDExpressionNoIn ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn )* ;
	[GrammarRule("bitwiseXORExpressionNoIn")]
	private void bitwiseXORExpressionNoIn()
	{
		EnterRule_bitwiseXORExpressionNoIn();
		EnterRule("bitwiseXORExpressionNoIn", 29);
		TraceIn("bitwiseXORExpressionNoIn", 29);
		int bitwiseXORExpressionNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpressionNoIn");
		DebugLocation(807, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:808:2: ( bitwiseANDExpressionNoIn ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:808:4: bitwiseANDExpressionNoIn ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn )*
			{
			DebugLocation(808, 4);
			PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4345);
			bitwiseANDExpressionNoIn();
			PopFollow();
			if (state.failed) return;
			DebugLocation(808, 29);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:808:29: ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				try
				{
					alt81 = dfa81.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:808:30: ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn
					{
					DebugLocation(808, 30);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:808:30: ( LineTerminator )*
					try { DebugEnterSubRule(79);
					while (true)
					{
						int alt79=2;
						try { DebugEnterDecision(79, false);
						int LA79_0 = input.LA(1);

						if ((LA79_0==LineTerminator))
						{
							alt79 = 1;
						}


						} finally { DebugExitDecision(79); }
						switch ( alt79 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:808:30: LineTerminator
							{
							DebugLocation(808, 30);
							Match(input,LineTerminator,Follow._LineTerminator_in_bitwiseXORExpressionNoIn4348); if (state.failed) return;

							}
							break;

						default:
							goto loop79;
						}
					}

					loop79:
						;

					} finally { DebugExitSubRule(79); }

					DebugLocation(808, 46);
					Match(input,78,Follow._78_in_bitwiseXORExpressionNoIn4351); if (state.failed) return;
					DebugLocation(808, 50);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:808:50: ( LineTerminator )*
					try { DebugEnterSubRule(80);
					while (true)
					{
						int alt80=2;
						try { DebugEnterDecision(80, false);
						int LA80_0 = input.LA(1);

						if ((LA80_0==LineTerminator))
						{
							alt80 = 1;
						}


						} finally { DebugExitDecision(80); }
						switch ( alt80 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:808:50: LineTerminator
							{
							DebugLocation(808, 50);
							Match(input,LineTerminator,Follow._LineTerminator_in_bitwiseXORExpressionNoIn4353); if (state.failed) return;

							}
							break;

						default:
							goto loop80;
						}
					}

					loop80:
						;

					} finally { DebugExitSubRule(80); }

					DebugLocation(808, 66);
					PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4356);
					bitwiseANDExpressionNoIn();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseXORExpressionNoIn", 29);
			LeaveRule("bitwiseXORExpressionNoIn", 29);
			LeaveRule_bitwiseXORExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 29, bitwiseXORExpressionNoIn_StartIndex); }

		}
		DebugLocation(809, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpressionNoIn"); }
		return;

	}
	// $ANTLR end "bitwiseXORExpressionNoIn"

	partial void EnterRule_bitwiseORExpression();
	partial void LeaveRule_bitwiseORExpression();

	// $ANTLR start "bitwiseORExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:811:1: bitwiseORExpression : bitwiseXORExpression ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression )* ;
	[GrammarRule("bitwiseORExpression")]
	private void bitwiseORExpression()
	{
		EnterRule_bitwiseORExpression();
		EnterRule("bitwiseORExpression", 30);
		TraceIn("bitwiseORExpression", 30);
		int bitwiseORExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "bitwiseORExpression");
		DebugLocation(811, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:812:2: ( bitwiseXORExpression ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:812:4: bitwiseXORExpression ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression )*
			{
			DebugLocation(812, 4);
			PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression4370);
			bitwiseXORExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(812, 25);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:812:25: ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				try
				{
					alt84 = dfa84.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:812:26: ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression
					{
					DebugLocation(812, 26);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:812:26: ( LineTerminator )*
					try { DebugEnterSubRule(82);
					while (true)
					{
						int alt82=2;
						try { DebugEnterDecision(82, false);
						int LA82_0 = input.LA(1);

						if ((LA82_0==LineTerminator))
						{
							alt82 = 1;
						}


						} finally { DebugExitDecision(82); }
						switch ( alt82 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:812:26: LineTerminator
							{
							DebugLocation(812, 26);
							Match(input,LineTerminator,Follow._LineTerminator_in_bitwiseORExpression4373); if (state.failed) return;

							}
							break;

						default:
							goto loop82;
						}
					}

					loop82:
						;

					} finally { DebugExitSubRule(82); }

					DebugLocation(812, 42);
					Match(input,128,Follow._128_in_bitwiseORExpression4376); if (state.failed) return;
					DebugLocation(812, 46);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:812:46: ( LineTerminator )*
					try { DebugEnterSubRule(83);
					while (true)
					{
						int alt83=2;
						try { DebugEnterDecision(83, false);
						int LA83_0 = input.LA(1);

						if ((LA83_0==LineTerminator))
						{
							alt83 = 1;
						}


						} finally { DebugExitDecision(83); }
						switch ( alt83 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:812:46: LineTerminator
							{
							DebugLocation(812, 46);
							Match(input,LineTerminator,Follow._LineTerminator_in_bitwiseORExpression4378); if (state.failed) return;

							}
							break;

						default:
							goto loop83;
						}
					}

					loop83:
						;

					} finally { DebugExitSubRule(83); }

					DebugLocation(812, 62);
					PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression4381);
					bitwiseXORExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseORExpression", 30);
			LeaveRule("bitwiseORExpression", 30);
			LeaveRule_bitwiseORExpression();
			if (state.backtracking > 0) { Memoize(input, 30, bitwiseORExpression_StartIndex); }

		}
		DebugLocation(813, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpression"); }
		return;

	}
	// $ANTLR end "bitwiseORExpression"

	partial void EnterRule_bitwiseORExpressionNoIn();
	partial void LeaveRule_bitwiseORExpressionNoIn();

	// $ANTLR start "bitwiseORExpressionNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:815:1: bitwiseORExpressionNoIn : bitwiseXORExpressionNoIn ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn )* ;
	[GrammarRule("bitwiseORExpressionNoIn")]
	private void bitwiseORExpressionNoIn()
	{
		EnterRule_bitwiseORExpressionNoIn();
		EnterRule("bitwiseORExpressionNoIn", 31);
		TraceIn("bitwiseORExpressionNoIn", 31);
		int bitwiseORExpressionNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "bitwiseORExpressionNoIn");
		DebugLocation(815, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:816:2: ( bitwiseXORExpressionNoIn ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:816:4: bitwiseXORExpressionNoIn ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn )*
			{
			DebugLocation(816, 4);
			PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4395);
			bitwiseXORExpressionNoIn();
			PopFollow();
			if (state.failed) return;
			DebugLocation(816, 29);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:816:29: ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, false);
				try
				{
					alt87 = dfa87.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:816:30: ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn
					{
					DebugLocation(816, 30);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:816:30: ( LineTerminator )*
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==LineTerminator))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch ( alt85 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:816:30: LineTerminator
							{
							DebugLocation(816, 30);
							Match(input,LineTerminator,Follow._LineTerminator_in_bitwiseORExpressionNoIn4398); if (state.failed) return;

							}
							break;

						default:
							goto loop85;
						}
					}

					loop85:
						;

					} finally { DebugExitSubRule(85); }

					DebugLocation(816, 46);
					Match(input,128,Follow._128_in_bitwiseORExpressionNoIn4401); if (state.failed) return;
					DebugLocation(816, 50);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:816:50: ( LineTerminator )*
					try { DebugEnterSubRule(86);
					while (true)
					{
						int alt86=2;
						try { DebugEnterDecision(86, false);
						int LA86_0 = input.LA(1);

						if ((LA86_0==LineTerminator))
						{
							alt86 = 1;
						}


						} finally { DebugExitDecision(86); }
						switch ( alt86 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:816:50: LineTerminator
							{
							DebugLocation(816, 50);
							Match(input,LineTerminator,Follow._LineTerminator_in_bitwiseORExpressionNoIn4403); if (state.failed) return;

							}
							break;

						default:
							goto loop86;
						}
					}

					loop86:
						;

					} finally { DebugExitSubRule(86); }

					DebugLocation(816, 66);
					PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4406);
					bitwiseXORExpressionNoIn();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseORExpressionNoIn", 31);
			LeaveRule("bitwiseORExpressionNoIn", 31);
			LeaveRule_bitwiseORExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 31, bitwiseORExpressionNoIn_StartIndex); }

		}
		DebugLocation(817, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpressionNoIn"); }
		return;

	}
	// $ANTLR end "bitwiseORExpressionNoIn"

	partial void EnterRule_logicalANDExpression();
	partial void LeaveRule_logicalANDExpression();

	// $ANTLR start "logicalANDExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:819:1: logicalANDExpression : bitwiseORExpression ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression )* ;
	[GrammarRule("logicalANDExpression")]
	private void logicalANDExpression()
	{
		EnterRule_logicalANDExpression();
		EnterRule("logicalANDExpression", 32);
		TraceIn("logicalANDExpression", 32);
		int logicalANDExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "logicalANDExpression");
		DebugLocation(819, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:820:2: ( bitwiseORExpression ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:820:4: bitwiseORExpression ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression )*
			{
			DebugLocation(820, 4);
			PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression4420);
			bitwiseORExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(820, 24);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:820:24: ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				try
				{
					alt90 = dfa90.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:820:25: ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression
					{
					DebugLocation(820, 25);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:820:25: ( LineTerminator )*
					try { DebugEnterSubRule(88);
					while (true)
					{
						int alt88=2;
						try { DebugEnterDecision(88, false);
						int LA88_0 = input.LA(1);

						if ((LA88_0==LineTerminator))
						{
							alt88 = 1;
						}


						} finally { DebugExitDecision(88); }
						switch ( alt88 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:820:25: LineTerminator
							{
							DebugLocation(820, 25);
							Match(input,LineTerminator,Follow._LineTerminator_in_logicalANDExpression4423); if (state.failed) return;

							}
							break;

						default:
							goto loop88;
						}
					}

					loop88:
						;

					} finally { DebugExitSubRule(88); }

					DebugLocation(820, 41);
					Match(input,39,Follow._39_in_logicalANDExpression4426); if (state.failed) return;
					DebugLocation(820, 46);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:820:46: ( LineTerminator )*
					try { DebugEnterSubRule(89);
					while (true)
					{
						int alt89=2;
						try { DebugEnterDecision(89, false);
						int LA89_0 = input.LA(1);

						if ((LA89_0==LineTerminator))
						{
							alt89 = 1;
						}


						} finally { DebugExitDecision(89); }
						switch ( alt89 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:820:46: LineTerminator
							{
							DebugLocation(820, 46);
							Match(input,LineTerminator,Follow._LineTerminator_in_logicalANDExpression4428); if (state.failed) return;

							}
							break;

						default:
							goto loop89;
						}
					}

					loop89:
						;

					} finally { DebugExitSubRule(89); }

					DebugLocation(820, 62);
					PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression4431);
					bitwiseORExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalANDExpression", 32);
			LeaveRule("logicalANDExpression", 32);
			LeaveRule_logicalANDExpression();
			if (state.backtracking > 0) { Memoize(input, 32, logicalANDExpression_StartIndex); }

		}
		DebugLocation(821, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpression"); }
		return;

	}
	// $ANTLR end "logicalANDExpression"

	partial void EnterRule_logicalANDExpressionNoIn();
	partial void LeaveRule_logicalANDExpressionNoIn();

	// $ANTLR start "logicalANDExpressionNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:823:1: logicalANDExpressionNoIn : bitwiseORExpressionNoIn ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn )* ;
	[GrammarRule("logicalANDExpressionNoIn")]
	private void logicalANDExpressionNoIn()
	{
		EnterRule_logicalANDExpressionNoIn();
		EnterRule("logicalANDExpressionNoIn", 33);
		TraceIn("logicalANDExpressionNoIn", 33);
		int logicalANDExpressionNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "logicalANDExpressionNoIn");
		DebugLocation(823, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:824:2: ( bitwiseORExpressionNoIn ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:824:4: bitwiseORExpressionNoIn ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn )*
			{
			DebugLocation(824, 4);
			PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4445);
			bitwiseORExpressionNoIn();
			PopFollow();
			if (state.failed) return;
			DebugLocation(824, 28);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:824:28: ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, false);
				try
				{
					alt93 = dfa93.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:824:29: ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn
					{
					DebugLocation(824, 29);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:824:29: ( LineTerminator )*
					try { DebugEnterSubRule(91);
					while (true)
					{
						int alt91=2;
						try { DebugEnterDecision(91, false);
						int LA91_0 = input.LA(1);

						if ((LA91_0==LineTerminator))
						{
							alt91 = 1;
						}


						} finally { DebugExitDecision(91); }
						switch ( alt91 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:824:29: LineTerminator
							{
							DebugLocation(824, 29);
							Match(input,LineTerminator,Follow._LineTerminator_in_logicalANDExpressionNoIn4448); if (state.failed) return;

							}
							break;

						default:
							goto loop91;
						}
					}

					loop91:
						;

					} finally { DebugExitSubRule(91); }

					DebugLocation(824, 45);
					Match(input,39,Follow._39_in_logicalANDExpressionNoIn4451); if (state.failed) return;
					DebugLocation(824, 50);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:824:50: ( LineTerminator )*
					try { DebugEnterSubRule(92);
					while (true)
					{
						int alt92=2;
						try { DebugEnterDecision(92, false);
						int LA92_0 = input.LA(1);

						if ((LA92_0==LineTerminator))
						{
							alt92 = 1;
						}


						} finally { DebugExitDecision(92); }
						switch ( alt92 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:824:50: LineTerminator
							{
							DebugLocation(824, 50);
							Match(input,LineTerminator,Follow._LineTerminator_in_logicalANDExpressionNoIn4453); if (state.failed) return;

							}
							break;

						default:
							goto loop92;
						}
					}

					loop92:
						;

					} finally { DebugExitSubRule(92); }

					DebugLocation(824, 66);
					PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4456);
					bitwiseORExpressionNoIn();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalANDExpressionNoIn", 33);
			LeaveRule("logicalANDExpressionNoIn", 33);
			LeaveRule_logicalANDExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 33, logicalANDExpressionNoIn_StartIndex); }

		}
		DebugLocation(825, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpressionNoIn"); }
		return;

	}
	// $ANTLR end "logicalANDExpressionNoIn"

	partial void EnterRule_logicalORExpression();
	partial void LeaveRule_logicalORExpression();

	// $ANTLR start "logicalORExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:827:1: logicalORExpression : logicalANDExpression ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression )* ;
	[GrammarRule("logicalORExpression")]
	private void logicalORExpression()
	{
		EnterRule_logicalORExpression();
		EnterRule("logicalORExpression", 34);
		TraceIn("logicalORExpression", 34);
		int logicalORExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "logicalORExpression");
		DebugLocation(827, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:828:2: ( logicalANDExpression ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:828:4: logicalANDExpression ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression )*
			{
			DebugLocation(828, 4);
			PushFollow(Follow._logicalANDExpression_in_logicalORExpression4470);
			logicalANDExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(828, 25);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:828:25: ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression )*
			try { DebugEnterSubRule(96);
			while (true)
			{
				int alt96=2;
				try { DebugEnterDecision(96, false);
				try
				{
					alt96 = dfa96.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(96); }
				switch ( alt96 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:828:26: ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression
					{
					DebugLocation(828, 26);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:828:26: ( LineTerminator )*
					try { DebugEnterSubRule(94);
					while (true)
					{
						int alt94=2;
						try { DebugEnterDecision(94, false);
						int LA94_0 = input.LA(1);

						if ((LA94_0==LineTerminator))
						{
							alt94 = 1;
						}


						} finally { DebugExitDecision(94); }
						switch ( alt94 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:828:26: LineTerminator
							{
							DebugLocation(828, 26);
							Match(input,LineTerminator,Follow._LineTerminator_in_logicalORExpression4473); if (state.failed) return;

							}
							break;

						default:
							goto loop94;
						}
					}

					loop94:
						;

					} finally { DebugExitSubRule(94); }

					DebugLocation(828, 42);
					Match(input,130,Follow._130_in_logicalORExpression4476); if (state.failed) return;
					DebugLocation(828, 47);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:828:47: ( LineTerminator )*
					try { DebugEnterSubRule(95);
					while (true)
					{
						int alt95=2;
						try { DebugEnterDecision(95, false);
						int LA95_0 = input.LA(1);

						if ((LA95_0==LineTerminator))
						{
							alt95 = 1;
						}


						} finally { DebugExitDecision(95); }
						switch ( alt95 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:828:47: LineTerminator
							{
							DebugLocation(828, 47);
							Match(input,LineTerminator,Follow._LineTerminator_in_logicalORExpression4478); if (state.failed) return;

							}
							break;

						default:
							goto loop95;
						}
					}

					loop95:
						;

					} finally { DebugExitSubRule(95); }

					DebugLocation(828, 63);
					PushFollow(Follow._logicalANDExpression_in_logicalORExpression4481);
					logicalANDExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop96;
				}
			}

			loop96:
				;

			} finally { DebugExitSubRule(96); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalORExpression", 34);
			LeaveRule("logicalORExpression", 34);
			LeaveRule_logicalORExpression();
			if (state.backtracking > 0) { Memoize(input, 34, logicalORExpression_StartIndex); }

		}
		DebugLocation(829, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpression"); }
		return;

	}
	// $ANTLR end "logicalORExpression"

	partial void EnterRule_logicalORExpressionNoIn();
	partial void LeaveRule_logicalORExpressionNoIn();

	// $ANTLR start "logicalORExpressionNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:831:1: logicalORExpressionNoIn : logicalANDExpressionNoIn ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn )* ;
	[GrammarRule("logicalORExpressionNoIn")]
	private void logicalORExpressionNoIn()
	{
		EnterRule_logicalORExpressionNoIn();
		EnterRule("logicalORExpressionNoIn", 35);
		TraceIn("logicalORExpressionNoIn", 35);
		int logicalORExpressionNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "logicalORExpressionNoIn");
		DebugLocation(831, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:832:2: ( logicalANDExpressionNoIn ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:832:4: logicalANDExpressionNoIn ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn )*
			{
			DebugLocation(832, 4);
			PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn4494);
			logicalANDExpressionNoIn();
			PopFollow();
			if (state.failed) return;
			DebugLocation(832, 29);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:832:29: ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				try
				{
					alt99 = dfa99.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:832:30: ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn
					{
					DebugLocation(832, 30);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:832:30: ( LineTerminator )*
					try { DebugEnterSubRule(97);
					while (true)
					{
						int alt97=2;
						try { DebugEnterDecision(97, false);
						int LA97_0 = input.LA(1);

						if ((LA97_0==LineTerminator))
						{
							alt97 = 1;
						}


						} finally { DebugExitDecision(97); }
						switch ( alt97 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:832:30: LineTerminator
							{
							DebugLocation(832, 30);
							Match(input,LineTerminator,Follow._LineTerminator_in_logicalORExpressionNoIn4497); if (state.failed) return;

							}
							break;

						default:
							goto loop97;
						}
					}

					loop97:
						;

					} finally { DebugExitSubRule(97); }

					DebugLocation(832, 46);
					Match(input,130,Follow._130_in_logicalORExpressionNoIn4500); if (state.failed) return;
					DebugLocation(832, 51);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:832:51: ( LineTerminator )*
					try { DebugEnterSubRule(98);
					while (true)
					{
						int alt98=2;
						try { DebugEnterDecision(98, false);
						int LA98_0 = input.LA(1);

						if ((LA98_0==LineTerminator))
						{
							alt98 = 1;
						}


						} finally { DebugExitDecision(98); }
						switch ( alt98 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:832:51: LineTerminator
							{
							DebugLocation(832, 51);
							Match(input,LineTerminator,Follow._LineTerminator_in_logicalORExpressionNoIn4502); if (state.failed) return;

							}
							break;

						default:
							goto loop98;
						}
					}

					loop98:
						;

					} finally { DebugExitSubRule(98); }

					DebugLocation(832, 67);
					PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn4505);
					logicalANDExpressionNoIn();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalORExpressionNoIn", 35);
			LeaveRule("logicalORExpressionNoIn", 35);
			LeaveRule_logicalORExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 35, logicalORExpressionNoIn_StartIndex); }

		}
		DebugLocation(833, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpressionNoIn"); }
		return;

	}
	// $ANTLR end "logicalORExpressionNoIn"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();

	// $ANTLR start "conditionalExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:835:1: conditionalExpression : logicalORExpression ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )? ;
	[GrammarRule("conditionalExpression")]
	private void conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 36);
		TraceIn("conditionalExpression", 36);
		int conditionalExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(835, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:836:2: ( logicalORExpression ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )? )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:836:4: logicalORExpression ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )?
			{
			DebugLocation(836, 4);
			PushFollow(Follow._logicalORExpression_in_conditionalExpression4519);
			logicalORExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(836, 24);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:836:24: ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )?
			int alt104=2;
			try { DebugEnterSubRule(104);
			try { DebugEnterDecision(104, false);
			try
			{
				alt104 = dfa104.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:836:25: ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression
				{
				DebugLocation(836, 25);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:836:25: ( LineTerminator )*
				try { DebugEnterSubRule(100);
				while (true)
				{
					int alt100=2;
					try { DebugEnterDecision(100, false);
					int LA100_0 = input.LA(1);

					if ((LA100_0==LineTerminator))
					{
						alt100 = 1;
					}


					} finally { DebugExitDecision(100); }
					switch ( alt100 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:836:25: LineTerminator
						{
						DebugLocation(836, 25);
						Match(input,LineTerminator,Follow._LineTerminator_in_conditionalExpression4522); if (state.failed) return;

						}
						break;

					default:
						goto loop100;
					}
				}

				loop100:
					;

				} finally { DebugExitSubRule(100); }

				DebugLocation(836, 41);
				Match(input,75,Follow._75_in_conditionalExpression4525); if (state.failed) return;
				DebugLocation(836, 45);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:836:45: ( LineTerminator )*
				try { DebugEnterSubRule(101);
				while (true)
				{
					int alt101=2;
					try { DebugEnterDecision(101, false);
					int LA101_0 = input.LA(1);

					if ((LA101_0==LineTerminator))
					{
						alt101 = 1;
					}


					} finally { DebugExitDecision(101); }
					switch ( alt101 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:836:45: LineTerminator
						{
						DebugLocation(836, 45);
						Match(input,LineTerminator,Follow._LineTerminator_in_conditionalExpression4527); if (state.failed) return;

						}
						break;

					default:
						goto loop101;
					}
				}

				loop101:
					;

				} finally { DebugExitSubRule(101); }

				DebugLocation(836, 61);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression4530);
				assignmentExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(836, 82);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:836:82: ( LineTerminator )*
				try { DebugEnterSubRule(102);
				while (true)
				{
					int alt102=2;
					try { DebugEnterDecision(102, false);
					int LA102_0 = input.LA(1);

					if ((LA102_0==LineTerminator))
					{
						alt102 = 1;
					}


					} finally { DebugExitDecision(102); }
					switch ( alt102 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:836:82: LineTerminator
						{
						DebugLocation(836, 82);
						Match(input,LineTerminator,Follow._LineTerminator_in_conditionalExpression4532); if (state.failed) return;

						}
						break;

					default:
						goto loop102;
					}
				}

				loop102:
					;

				} finally { DebugExitSubRule(102); }

				DebugLocation(836, 98);
				Match(input,59,Follow._59_in_conditionalExpression4535); if (state.failed) return;
				DebugLocation(836, 102);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:836:102: ( LineTerminator )*
				try { DebugEnterSubRule(103);
				while (true)
				{
					int alt103=2;
					try { DebugEnterDecision(103, false);
					int LA103_0 = input.LA(1);

					if ((LA103_0==LineTerminator))
					{
						alt103 = 1;
					}


					} finally { DebugExitDecision(103); }
					switch ( alt103 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:836:102: LineTerminator
						{
						DebugLocation(836, 102);
						Match(input,LineTerminator,Follow._LineTerminator_in_conditionalExpression4537); if (state.failed) return;

						}
						break;

					default:
						goto loop103;
					}
				}

				loop103:
					;

				} finally { DebugExitSubRule(103); }

				DebugLocation(836, 118);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression4540);
				assignmentExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(104); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalExpression", 36);
			LeaveRule("conditionalExpression", 36);
			LeaveRule_conditionalExpression();
			if (state.backtracking > 0) { Memoize(input, 36, conditionalExpression_StartIndex); }

		}
		DebugLocation(837, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalExpressionNoIn();
	partial void LeaveRule_conditionalExpressionNoIn();

	// $ANTLR start "conditionalExpressionNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:839:1: conditionalExpressionNoIn : logicalORExpressionNoIn ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )? ;
	[GrammarRule("conditionalExpressionNoIn")]
	private void conditionalExpressionNoIn()
	{
		EnterRule_conditionalExpressionNoIn();
		EnterRule("conditionalExpressionNoIn", 37);
		TraceIn("conditionalExpressionNoIn", 37);
		int conditionalExpressionNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "conditionalExpressionNoIn");
		DebugLocation(839, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:840:2: ( logicalORExpressionNoIn ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )? )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:840:4: logicalORExpressionNoIn ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )?
			{
			DebugLocation(840, 4);
			PushFollow(Follow._logicalORExpressionNoIn_in_conditionalExpressionNoIn4554);
			logicalORExpressionNoIn();
			PopFollow();
			if (state.failed) return;
			DebugLocation(840, 28);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:840:28: ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )?
			int alt109=2;
			try { DebugEnterSubRule(109);
			try { DebugEnterDecision(109, false);
			try
			{
				alt109 = dfa109.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:840:29: ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression
				{
				DebugLocation(840, 29);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:840:29: ( LineTerminator )*
				try { DebugEnterSubRule(105);
				while (true)
				{
					int alt105=2;
					try { DebugEnterDecision(105, false);
					int LA105_0 = input.LA(1);

					if ((LA105_0==LineTerminator))
					{
						alt105 = 1;
					}


					} finally { DebugExitDecision(105); }
					switch ( alt105 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:840:29: LineTerminator
						{
						DebugLocation(840, 29);
						Match(input,LineTerminator,Follow._LineTerminator_in_conditionalExpressionNoIn4557); if (state.failed) return;

						}
						break;

					default:
						goto loop105;
					}
				}

				loop105:
					;

				} finally { DebugExitSubRule(105); }

				DebugLocation(840, 45);
				Match(input,75,Follow._75_in_conditionalExpressionNoIn4560); if (state.failed) return;
				DebugLocation(840, 49);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:840:49: ( LineTerminator )*
				try { DebugEnterSubRule(106);
				while (true)
				{
					int alt106=2;
					try { DebugEnterDecision(106, false);
					int LA106_0 = input.LA(1);

					if ((LA106_0==LineTerminator))
					{
						alt106 = 1;
					}


					} finally { DebugExitDecision(106); }
					switch ( alt106 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:840:49: LineTerminator
						{
						DebugLocation(840, 49);
						Match(input,LineTerminator,Follow._LineTerminator_in_conditionalExpressionNoIn4562); if (state.failed) return;

						}
						break;

					default:
						goto loop106;
					}
				}

				loop106:
					;

				} finally { DebugExitSubRule(106); }

				DebugLocation(840, 65);
				PushFollow(Follow._assignmentExpression_in_conditionalExpressionNoIn4565);
				assignmentExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(840, 86);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:840:86: ( LineTerminator )*
				try { DebugEnterSubRule(107);
				while (true)
				{
					int alt107=2;
					try { DebugEnterDecision(107, false);
					int LA107_0 = input.LA(1);

					if ((LA107_0==LineTerminator))
					{
						alt107 = 1;
					}


					} finally { DebugExitDecision(107); }
					switch ( alt107 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:840:86: LineTerminator
						{
						DebugLocation(840, 86);
						Match(input,LineTerminator,Follow._LineTerminator_in_conditionalExpressionNoIn4567); if (state.failed) return;

						}
						break;

					default:
						goto loop107;
					}
				}

				loop107:
					;

				} finally { DebugExitSubRule(107); }

				DebugLocation(840, 102);
				Match(input,59,Follow._59_in_conditionalExpressionNoIn4570); if (state.failed) return;
				DebugLocation(840, 106);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:840:106: ( LineTerminator )*
				try { DebugEnterSubRule(108);
				while (true)
				{
					int alt108=2;
					try { DebugEnterDecision(108, false);
					int LA108_0 = input.LA(1);

					if ((LA108_0==LineTerminator))
					{
						alt108 = 1;
					}


					} finally { DebugExitDecision(108); }
					switch ( alt108 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:840:106: LineTerminator
						{
						DebugLocation(840, 106);
						Match(input,LineTerminator,Follow._LineTerminator_in_conditionalExpressionNoIn4572); if (state.failed) return;

						}
						break;

					default:
						goto loop108;
					}
				}

				loop108:
					;

				} finally { DebugExitSubRule(108); }

				DebugLocation(840, 122);
				PushFollow(Follow._assignmentExpression_in_conditionalExpressionNoIn4575);
				assignmentExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(109); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalExpressionNoIn", 37);
			LeaveRule("conditionalExpressionNoIn", 37);
			LeaveRule_conditionalExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 37, conditionalExpressionNoIn_StartIndex); }

		}
		DebugLocation(841, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpressionNoIn"); }
		return;

	}
	// $ANTLR end "conditionalExpressionNoIn"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();

	// $ANTLR start "assignmentExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:843:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpression );
	[GrammarRule("assignmentExpression")]
	private void assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 38);
		TraceIn("assignmentExpression", 38);
		int assignmentExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(843, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:844:2: ( conditionalExpression | leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpression )
			int alt112=2;
			try { DebugEnterDecision(112, false);
			switch (input.LA(1))
			{
			case 118:
				{
				int LA112_1 = input.LA(2);

				if ((EvaluatePredicate(synpred156_AS3_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 116:
				{
				int LA112_2 = input.LA(2);

				if ((EvaluatePredicate(synpred156_AS3_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA112_3 = input.LA(2);

				if ((EvaluatePredicate(synpred156_AS3_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BooleanLiteral:
			case NullLiteral:
			case NumericLiteral:
			case StringLiteral:
				{
				int LA112_4 = input.LA(2);

				if ((EvaluatePredicate(synpred156_AS3_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 76:
				{
				int LA112_5 = input.LA(2);

				if ((EvaluatePredicate(synpred156_AS3_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 127:
				{
				int LA112_6 = input.LA(2);

				if ((EvaluatePredicate(synpred156_AS3_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 42:
				{
				int LA112_7 = input.LA(2);

				if ((EvaluatePredicate(synpred156_AS3_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 95:
				{
				int LA112_8 = input.LA(2);

				if ((EvaluatePredicate(synpred156_AS3_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 107:
				{
				int LA112_9 = input.LA(2);

				if ((EvaluatePredicate(synpred156_AS3_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 34:
			case 46:
			case 47:
			case 50:
			case 51:
			case 80:
			case 88:
			case 121:
			case 124:
			case 132:
				{
				alt112 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:844:4: conditionalExpression
				{
				DebugLocation(844, 4);
				PushFollow(Follow._conditionalExpression_in_assignmentExpression4588);
				conditionalExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:845:4: leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpression
				{
				DebugLocation(845, 4);
				PushFollow(Follow._leftHandSideExpression_in_assignmentExpression4593);
				leftHandSideExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(845, 27);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:845:27: ( LineTerminator )*
				try { DebugEnterSubRule(110);
				while (true)
				{
					int alt110=2;
					try { DebugEnterDecision(110, false);
					int LA110_0 = input.LA(1);

					if ((LA110_0==LineTerminator))
					{
						alt110 = 1;
					}


					} finally { DebugExitDecision(110); }
					switch ( alt110 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:845:27: LineTerminator
						{
						DebugLocation(845, 27);
						Match(input,LineTerminator,Follow._LineTerminator_in_assignmentExpression4595); if (state.failed) return;

						}
						break;

					default:
						goto loop110;
					}
				}

				loop110:
					;

				} finally { DebugExitSubRule(110); }

				DebugLocation(845, 43);
				PushFollow(Follow._assignmentOperator_in_assignmentExpression4598);
				assignmentOperator();
				PopFollow();
				if (state.failed) return;
				DebugLocation(845, 62);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:845:62: ( LineTerminator )*
				try { DebugEnterSubRule(111);
				while (true)
				{
					int alt111=2;
					try { DebugEnterDecision(111, false);
					int LA111_0 = input.LA(1);

					if ((LA111_0==LineTerminator))
					{
						alt111 = 1;
					}


					} finally { DebugExitDecision(111); }
					switch ( alt111 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:845:62: LineTerminator
						{
						DebugLocation(845, 62);
						Match(input,LineTerminator,Follow._LineTerminator_in_assignmentExpression4600); if (state.failed) return;

						}
						break;

					default:
						goto loop111;
					}
				}

				loop111:
					;

				} finally { DebugExitSubRule(111); }

				DebugLocation(845, 78);
				PushFollow(Follow._assignmentExpression_in_assignmentExpression4603);
				assignmentExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentExpression", 38);
			LeaveRule("assignmentExpression", 38);
			LeaveRule_assignmentExpression();
			if (state.backtracking > 0) { Memoize(input, 38, assignmentExpression_StartIndex); }

		}
		DebugLocation(846, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_assignmentExpressionNoIn();
	partial void LeaveRule_assignmentExpressionNoIn();

	// $ANTLR start "assignmentExpressionNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:848:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpressionNoIn );
	[GrammarRule("assignmentExpressionNoIn")]
	private void assignmentExpressionNoIn()
	{
		EnterRule_assignmentExpressionNoIn();
		EnterRule("assignmentExpressionNoIn", 39);
		TraceIn("assignmentExpressionNoIn", 39);
		int assignmentExpressionNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "assignmentExpressionNoIn");
		DebugLocation(848, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:849:2: ( conditionalExpressionNoIn | leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpressionNoIn )
			int alt115=2;
			try { DebugEnterDecision(115, false);
			switch (input.LA(1))
			{
			case 118:
				{
				int LA115_1 = input.LA(2);

				if ((EvaluatePredicate(synpred159_AS3_fragment)))
				{
					alt115 = 1;
				}
				else if ((true))
				{
					alt115 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 115, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 116:
				{
				int LA115_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_AS3_fragment)))
				{
					alt115 = 1;
				}
				else if ((true))
				{
					alt115 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 115, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA115_3 = input.LA(2);

				if ((EvaluatePredicate(synpred159_AS3_fragment)))
				{
					alt115 = 1;
				}
				else if ((true))
				{
					alt115 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 115, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BooleanLiteral:
			case NullLiteral:
			case NumericLiteral:
			case StringLiteral:
				{
				int LA115_4 = input.LA(2);

				if ((EvaluatePredicate(synpred159_AS3_fragment)))
				{
					alt115 = 1;
				}
				else if ((true))
				{
					alt115 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 115, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 76:
				{
				int LA115_5 = input.LA(2);

				if ((EvaluatePredicate(synpred159_AS3_fragment)))
				{
					alt115 = 1;
				}
				else if ((true))
				{
					alt115 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 115, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 127:
				{
				int LA115_6 = input.LA(2);

				if ((EvaluatePredicate(synpred159_AS3_fragment)))
				{
					alt115 = 1;
				}
				else if ((true))
				{
					alt115 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 115, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 42:
				{
				int LA115_7 = input.LA(2);

				if ((EvaluatePredicate(synpred159_AS3_fragment)))
				{
					alt115 = 1;
				}
				else if ((true))
				{
					alt115 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 115, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 95:
				{
				int LA115_8 = input.LA(2);

				if ((EvaluatePredicate(synpred159_AS3_fragment)))
				{
					alt115 = 1;
				}
				else if ((true))
				{
					alt115 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 115, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 107:
				{
				int LA115_9 = input.LA(2);

				if ((EvaluatePredicate(synpred159_AS3_fragment)))
				{
					alt115 = 1;
				}
				else if ((true))
				{
					alt115 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 115, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 34:
			case 46:
			case 47:
			case 50:
			case 51:
			case 80:
			case 88:
			case 121:
			case 124:
			case 132:
				{
				alt115 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 115, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:849:4: conditionalExpressionNoIn
				{
				DebugLocation(849, 4);
				PushFollow(Follow._conditionalExpressionNoIn_in_assignmentExpressionNoIn4615);
				conditionalExpressionNoIn();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:850:4: leftHandSideExpression ( LineTerminator )* assignmentOperator ( LineTerminator )* assignmentExpressionNoIn
				{
				DebugLocation(850, 4);
				PushFollow(Follow._leftHandSideExpression_in_assignmentExpressionNoIn4620);
				leftHandSideExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(850, 27);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:850:27: ( LineTerminator )*
				try { DebugEnterSubRule(113);
				while (true)
				{
					int alt113=2;
					try { DebugEnterDecision(113, false);
					int LA113_0 = input.LA(1);

					if ((LA113_0==LineTerminator))
					{
						alt113 = 1;
					}


					} finally { DebugExitDecision(113); }
					switch ( alt113 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:850:27: LineTerminator
						{
						DebugLocation(850, 27);
						Match(input,LineTerminator,Follow._LineTerminator_in_assignmentExpressionNoIn4622); if (state.failed) return;

						}
						break;

					default:
						goto loop113;
					}
				}

				loop113:
					;

				} finally { DebugExitSubRule(113); }

				DebugLocation(850, 43);
				PushFollow(Follow._assignmentOperator_in_assignmentExpressionNoIn4625);
				assignmentOperator();
				PopFollow();
				if (state.failed) return;
				DebugLocation(850, 62);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:850:62: ( LineTerminator )*
				try { DebugEnterSubRule(114);
				while (true)
				{
					int alt114=2;
					try { DebugEnterDecision(114, false);
					int LA114_0 = input.LA(1);

					if ((LA114_0==LineTerminator))
					{
						alt114 = 1;
					}


					} finally { DebugExitDecision(114); }
					switch ( alt114 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:850:62: LineTerminator
						{
						DebugLocation(850, 62);
						Match(input,LineTerminator,Follow._LineTerminator_in_assignmentExpressionNoIn4627); if (state.failed) return;

						}
						break;

					default:
						goto loop114;
					}
				}

				loop114:
					;

				} finally { DebugExitSubRule(114); }

				DebugLocation(850, 78);
				PushFollow(Follow._assignmentExpressionNoIn_in_assignmentExpressionNoIn4630);
				assignmentExpressionNoIn();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentExpressionNoIn", 39);
			LeaveRule("assignmentExpressionNoIn", 39);
			LeaveRule_assignmentExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 39, assignmentExpressionNoIn_StartIndex); }

		}
		DebugLocation(851, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpressionNoIn"); }
		return;

	}
	// $ANTLR end "assignmentExpressionNoIn"

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();

	// $ANTLR start "assignmentOperator"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:853:1: assignmentOperator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' ) ;
	[GrammarRule("assignmentOperator")]
	private void assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 40);
		TraceIn("assignmentOperator", 40);
		int assignmentOperator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(853, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:854:2: ( ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:
			{
			DebugLocation(854, 2);
			if (input.LA(1)==38||input.LA(1)==41||input.LA(1)==45||input.LA(1)==48||input.LA(1)==52||input.LA(1)==58||input.LA(1)==64||input.LA(1)==66||input.LA(1)==72||input.LA(1)==74||input.LA(1)==79||input.LA(1)==129)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentOperator", 40);
			LeaveRule("assignmentOperator", 40);
			LeaveRule_assignmentOperator();
			if (state.backtracking > 0) { Memoize(input, 40, assignmentOperator_StartIndex); }

		}
		DebugLocation(855, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return;

	}
	// $ANTLR end "assignmentOperator"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:857:1: expression : assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* ;
	[GrammarRule("expression")]
	private void expression()
	{
		EnterRule_expression();
		EnterRule("expression", 41);
		TraceIn("expression", 41);
		int expression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(857, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:858:2: ( assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:858:4: assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*
			{
			DebugLocation(858, 4);
			PushFollow(Follow._assignmentExpression_in_expression4700);
			assignmentExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(858, 25);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:858:25: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=2;
				try { DebugEnterDecision(118, false);
				try
				{
					alt118 = dfa118.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:858:26: ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression
					{
					DebugLocation(858, 26);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:858:26: ( LineTerminator )*
					try { DebugEnterSubRule(116);
					while (true)
					{
						int alt116=2;
						try { DebugEnterDecision(116, false);
						int LA116_0 = input.LA(1);

						if ((LA116_0==LineTerminator))
						{
							alt116 = 1;
						}


						} finally { DebugExitDecision(116); }
						switch ( alt116 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:858:26: LineTerminator
							{
							DebugLocation(858, 26);
							Match(input,LineTerminator,Follow._LineTerminator_in_expression4703); if (state.failed) return;

							}
							break;

						default:
							goto loop116;
						}
					}

					loop116:
						;

					} finally { DebugExitSubRule(116); }

					DebugLocation(858, 42);
					Match(input,49,Follow._49_in_expression4706); if (state.failed) return;
					DebugLocation(858, 46);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:858:46: ( LineTerminator )*
					try { DebugEnterSubRule(117);
					while (true)
					{
						int alt117=2;
						try { DebugEnterDecision(117, false);
						int LA117_0 = input.LA(1);

						if ((LA117_0==LineTerminator))
						{
							alt117 = 1;
						}


						} finally { DebugExitDecision(117); }
						switch ( alt117 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:858:46: LineTerminator
							{
							DebugLocation(858, 46);
							Match(input,LineTerminator,Follow._LineTerminator_in_expression4708); if (state.failed) return;

							}
							break;

						default:
							goto loop117;
						}
					}

					loop117:
						;

					} finally { DebugExitSubRule(117); }

					DebugLocation(858, 62);
					PushFollow(Follow._assignmentExpression_in_expression4711);
					assignmentExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expression", 41);
			LeaveRule("expression", 41);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 41, expression_StartIndex); }

		}
		DebugLocation(859, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expressionNoIn();
	partial void LeaveRule_expressionNoIn();

	// $ANTLR start "expressionNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:861:1: expressionNoIn : assignmentExpressionNoIn ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn )* ;
	[GrammarRule("expressionNoIn")]
	private void expressionNoIn()
	{
		EnterRule_expressionNoIn();
		EnterRule("expressionNoIn", 42);
		TraceIn("expressionNoIn", 42);
		int expressionNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "expressionNoIn");
		DebugLocation(861, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:862:2: ( assignmentExpressionNoIn ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:862:4: assignmentExpressionNoIn ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn )*
			{
			DebugLocation(862, 4);
			PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn4725);
			assignmentExpressionNoIn();
			PopFollow();
			if (state.failed) return;
			DebugLocation(862, 29);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:862:29: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn )*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, false);
				try
				{
					alt121 = dfa121.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:862:30: ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn
					{
					DebugLocation(862, 30);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:862:30: ( LineTerminator )*
					try { DebugEnterSubRule(119);
					while (true)
					{
						int alt119=2;
						try { DebugEnterDecision(119, false);
						int LA119_0 = input.LA(1);

						if ((LA119_0==LineTerminator))
						{
							alt119 = 1;
						}


						} finally { DebugExitDecision(119); }
						switch ( alt119 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:862:30: LineTerminator
							{
							DebugLocation(862, 30);
							Match(input,LineTerminator,Follow._LineTerminator_in_expressionNoIn4728); if (state.failed) return;

							}
							break;

						default:
							goto loop119;
						}
					}

					loop119:
						;

					} finally { DebugExitSubRule(119); }

					DebugLocation(862, 46);
					Match(input,49,Follow._49_in_expressionNoIn4731); if (state.failed) return;
					DebugLocation(862, 50);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:862:50: ( LineTerminator )*
					try { DebugEnterSubRule(120);
					while (true)
					{
						int alt120=2;
						try { DebugEnterDecision(120, false);
						int LA120_0 = input.LA(1);

						if ((LA120_0==LineTerminator))
						{
							alt120 = 1;
						}


						} finally { DebugExitDecision(120); }
						switch ( alt120 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:862:50: LineTerminator
							{
							DebugLocation(862, 50);
							Match(input,LineTerminator,Follow._LineTerminator_in_expressionNoIn4733); if (state.failed) return;

							}
							break;

						default:
							goto loop120;
						}
					}

					loop120:
						;

					} finally { DebugExitSubRule(120); }

					DebugLocation(862, 66);
					PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn4736);
					assignmentExpressionNoIn();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionNoIn", 42);
			LeaveRule("expressionNoIn", 42);
			LeaveRule_expressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 42, expressionNoIn_StartIndex); }

		}
		DebugLocation(863, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionNoIn"); }
		return;

	}
	// $ANTLR end "expressionNoIn"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:869:1: statement : ( blockStatement | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | useNamespaceStatement | includeStatement | importStatement | metaDataStatement );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 43);
		TraceIn("statement", 43);
		int statement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(869, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:870:2: ( blockStatement | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | useNamespaceStatement | includeStatement | importStatement | metaDataStatement )
			int alt122=18;
			try { DebugEnterDecision(122, false);
			switch (input.LA(1))
			{
			case 127:
				{
				int LA122_1 = input.LA(2);

				if ((EvaluatePredicate(synpred179_AS3_fragment)))
				{
					alt122 = 1;
				}
				else if ((EvaluatePredicate(synpred182_AS3_fragment)))
				{
					alt122 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 122, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 85:
			case 123:
				{
				alt122 = 2;
				}
				break;
			case 61:
				{
				alt122 = 3;
				}
				break;
			case BooleanLiteral:
			case NullLiteral:
			case NumericLiteral:
			case StringLiteral:
			case 34:
			case 42:
			case 46:
			case 47:
			case 50:
			case 51:
			case 80:
			case 88:
			case 95:
			case 107:
			case 116:
			case 118:
			case 121:
			case 124:
			case 132:
				{
				alt122 = 4;
				}
				break;
			case Identifier:
				{
				int LA122_6 = input.LA(2);

				if ((EvaluatePredicate(synpred182_AS3_fragment)))
				{
					alt122 = 4;
				}
				else if ((EvaluatePredicate(synpred189_AS3_fragment)))
				{
					alt122 = 11;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 122, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 76:
				{
				int LA122_8 = input.LA(2);

				if ((EvaluatePredicate(synpred182_AS3_fragment)))
				{
					alt122 = 4;
				}
				else if ((true))
				{
					alt122 = 18;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 122, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 97:
				{
				alt122 = 5;
				}
				break;
			case 89:
			case 94:
			case 125:
				{
				alt122 = 6;
				}
				break;
			case 86:
				{
				alt122 = 7;
				}
				break;
			case 81:
				{
				alt122 = 8;
				}
				break;
			case 113:
				{
				alt122 = 9;
				}
				break;
			case 126:
				{
				alt122 = 10;
				}
				break;
			case 117:
				{
				alt122 = 12;
				}
				break;
			case 119:
				{
				alt122 = 13;
				}
				break;
			case 120:
				{
				alt122 = 14;
				}
				break;
			case 122:
				{
				alt122 = 15;
				}
				break;
			case 101:
				{
				alt122 = 16;
				}
				break;
			case 99:
				{
				alt122 = 17;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:870:4: blockStatement
				{
				DebugLocation(870, 4);
				PushFollow(Follow._blockStatement_in_statement4754);
				blockStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:871:4: variableStatement
				{
				DebugLocation(871, 4);
				PushFollow(Follow._variableStatement_in_statement4759);
				variableStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:872:4: emptyStatement
				{
				DebugLocation(872, 4);
				PushFollow(Follow._emptyStatement_in_statement4764);
				emptyStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:873:4: expressionStatement
				{
				DebugLocation(873, 4);
				PushFollow(Follow._expressionStatement_in_statement4769);
				expressionStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:874:4: ifStatement
				{
				DebugLocation(874, 4);
				PushFollow(Follow._ifStatement_in_statement4774);
				ifStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:875:4: iterationStatement
				{
				DebugLocation(875, 4);
				PushFollow(Follow._iterationStatement_in_statement4779);
				iterationStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:876:4: continueStatement
				{
				DebugLocation(876, 4);
				PushFollow(Follow._continueStatement_in_statement4784);
				continueStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:877:4: breakStatement
				{
				DebugLocation(877, 4);
				PushFollow(Follow._breakStatement_in_statement4789);
				breakStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:878:4: returnStatement
				{
				DebugLocation(878, 4);
				PushFollow(Follow._returnStatement_in_statement4794);
				returnStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:879:4: withStatement
				{
				DebugLocation(879, 4);
				PushFollow(Follow._withStatement_in_statement4799);
				withStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:880:4: labelledStatement
				{
				DebugLocation(880, 4);
				PushFollow(Follow._labelledStatement_in_statement4804);
				labelledStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:881:4: switchStatement
				{
				DebugLocation(881, 4);
				PushFollow(Follow._switchStatement_in_statement4809);
				switchStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:882:4: throwStatement
				{
				DebugLocation(882, 4);
				PushFollow(Follow._throwStatement_in_statement4814);
				throwStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:883:4: tryStatement
				{
				DebugLocation(883, 4);
				PushFollow(Follow._tryStatement_in_statement4819);
				tryStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:884:4: useNamespaceStatement
				{
				DebugLocation(884, 4);
				PushFollow(Follow._useNamespaceStatement_in_statement4824);
				useNamespaceStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:885:4: includeStatement
				{
				DebugLocation(885, 4);
				PushFollow(Follow._includeStatement_in_statement4829);
				includeStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:886:4: importStatement
				{
				DebugLocation(886, 4);
				PushFollow(Follow._importStatement_in_statement4834);
				importStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:887:4: metaDataStatement
				{
				DebugLocation(887, 4);
				PushFollow(Follow._metaDataStatement_in_statement4839);
				metaDataStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 43);
			LeaveRule("statement", 43);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 43, statement_StartIndex); }

		}
		DebugLocation(888, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();

	// $ANTLR start "blockStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:890:1: blockStatement : '{' ( LineTerminator )* ( statementList )? ( LineTerminator )* '}' ;
	[GrammarRule("blockStatement")]
	private void blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 44);
		TraceIn("blockStatement", 44);
		int blockStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(890, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:891:2: ( '{' ( LineTerminator )* ( statementList )? ( LineTerminator )* '}' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:891:4: '{' ( LineTerminator )* ( statementList )? ( LineTerminator )* '}'
			{
			DebugLocation(891, 4);
			Match(input,127,Follow._127_in_blockStatement4850); if (state.failed) return;
			DebugLocation(891, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:891:8: ( LineTerminator )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==LineTerminator))
				{
					int LA123_1 = input.LA(2);

					if ((EvaluatePredicate(synpred196_AS3_fragment)))
					{
						alt123 = 1;
					}


				}


				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:891:8: LineTerminator
					{
					DebugLocation(891, 8);
					Match(input,LineTerminator,Follow._LineTerminator_in_blockStatement4852); if (state.failed) return;

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }

			DebugLocation(891, 24);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:891:24: ( statementList )?
			int alt124=2;
			try { DebugEnterSubRule(124);
			try { DebugEnterDecision(124, false);
			switch (input.LA(1))
			{
			case LineTerminator:
				{
				int LA124_1 = input.LA(2);

				if ((EvaluatePredicate(synpred197_AS3_fragment)))
				{
					alt124 = 1;
				}
				}
				break;
			case BooleanLiteral:
			case Identifier:
			case NullLiteral:
			case NumericLiteral:
			case StringLiteral:
			case 34:
			case 42:
			case 46:
			case 47:
			case 50:
			case 51:
			case 61:
			case 76:
			case 80:
			case 81:
			case 85:
			case 86:
			case 88:
			case 89:
			case 94:
			case 95:
			case 97:
			case 99:
			case 101:
			case 107:
			case 113:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 132:
				{
				alt124 = 1;
				}
				break;
			case 131:
				{
				int LA124_3 = input.LA(2);

				if ((EvaluatePredicate(synpred197_AS3_fragment)))
				{
					alt124 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:891:24: statementList
				{
				DebugLocation(891, 24);
				PushFollow(Follow._statementList_in_blockStatement4855);
				statementList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(124); }

			DebugLocation(891, 39);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:891:39: ( LineTerminator )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==LineTerminator))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:891:39: LineTerminator
					{
					DebugLocation(891, 39);
					Match(input,LineTerminator,Follow._LineTerminator_in_blockStatement4858); if (state.failed) return;

					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }

			DebugLocation(891, 55);
			Match(input,131,Follow._131_in_blockStatement4861); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("blockStatement", 44);
			LeaveRule("blockStatement", 44);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 44, blockStatement_StartIndex); }

		}
		DebugLocation(892, 1);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_statementList();
	partial void LeaveRule_statementList();

	// $ANTLR start "statementList"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:894:1: statementList : ( ( LineTerminator )* statement ( LineTerminator )* )* ;
	[GrammarRule("statementList")]
	private void statementList()
	{
		EnterRule_statementList();
		EnterRule("statementList", 45);
		TraceIn("statementList", 45);
		int statementList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "statementList");
		DebugLocation(894, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:895:2: ( ( ( LineTerminator )* statement ( LineTerminator )* )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:895:4: ( ( LineTerminator )* statement ( LineTerminator )* )*
			{
			DebugLocation(895, 4);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:895:4: ( ( LineTerminator )* statement ( LineTerminator )* )*
			try { DebugEnterSubRule(128);
			while (true)
			{
				int alt128=2;
				try { DebugEnterDecision(128, false);
				try
				{
					alt128 = dfa128.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(128); }
				switch ( alt128 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:895:5: ( LineTerminator )* statement ( LineTerminator )*
					{
					DebugLocation(895, 5);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:895:5: ( LineTerminator )*
					try { DebugEnterSubRule(126);
					while (true)
					{
						int alt126=2;
						try { DebugEnterDecision(126, false);
						int LA126_0 = input.LA(1);

						if ((LA126_0==LineTerminator))
						{
							alt126 = 1;
						}


						} finally { DebugExitDecision(126); }
						switch ( alt126 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:895:5: LineTerminator
							{
							DebugLocation(895, 5);
							Match(input,LineTerminator,Follow._LineTerminator_in_statementList4874); if (state.failed) return;

							}
							break;

						default:
							goto loop126;
						}
					}

					loop126:
						;

					} finally { DebugExitSubRule(126); }

					DebugLocation(895, 21);
					PushFollow(Follow._statement_in_statementList4877);
					statement();
					PopFollow();
					if (state.failed) return;
					DebugLocation(895, 31);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:895:31: ( LineTerminator )*
					try { DebugEnterSubRule(127);
					while (true)
					{
						int alt127=2;
						try { DebugEnterDecision(127, false);
						int LA127_0 = input.LA(1);

						if ((LA127_0==LineTerminator))
						{
							int LA127_1 = input.LA(2);

							if ((EvaluatePredicate(synpred200_AS3_fragment)))
							{
								alt127 = 1;
							}


						}


						} finally { DebugExitDecision(127); }
						switch ( alt127 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:895:31: LineTerminator
							{
							DebugLocation(895, 31);
							Match(input,LineTerminator,Follow._LineTerminator_in_statementList4879); if (state.failed) return;

							}
							break;

						default:
							goto loop127;
						}
					}

					loop127:
						;

					} finally { DebugExitSubRule(127); }


					}
					break;

				default:
					goto loop128;
				}
			}

			loop128:
				;

			} finally { DebugExitSubRule(128); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statementList", 45);
			LeaveRule("statementList", 45);
			LeaveRule_statementList();
			if (state.backtracking > 0) { Memoize(input, 45, statementList_StartIndex); }

		}
		DebugLocation(896, 1);
		} finally { DebugExitRule(GrammarFileName, "statementList"); }
		return;

	}
	// $ANTLR end "statementList"

	partial void EnterRule_variableStatement();
	partial void LeaveRule_variableStatement();

	// $ANTLR start "variableStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:898:1: variableStatement : ( 'var' | 'const' ) ( LineTerminator )* variableDeclarationList ( ( LineTerminator )* | ';' ) ;
	[GrammarRule("variableStatement")]
	private void variableStatement()
	{
		EnterRule_variableStatement();
		EnterRule("variableStatement", 46);
		TraceIn("variableStatement", 46);
		int variableStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableStatement");
		DebugLocation(898, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:2: ( ( 'var' | 'const' ) ( LineTerminator )* variableDeclarationList ( ( LineTerminator )* | ';' ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:4: ( 'var' | 'const' ) ( LineTerminator )* variableDeclarationList ( ( LineTerminator )* | ';' )
			{
			DebugLocation(899, 4);
			if (input.LA(1)==85||input.LA(1)==123)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(899, 22);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:22: ( LineTerminator )*
			try { DebugEnterSubRule(129);
			while (true)
			{
				int alt129=2;
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==LineTerminator))
				{
					alt129 = 1;
				}


				} finally { DebugExitDecision(129); }
				switch ( alt129 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:22: LineTerminator
					{
					DebugLocation(899, 22);
					Match(input,LineTerminator,Follow._LineTerminator_in_variableStatement4902); if (state.failed) return;

					}
					break;

				default:
					goto loop129;
				}
			}

			loop129:
				;

			} finally { DebugExitSubRule(129); }

			DebugLocation(899, 38);
			PushFollow(Follow._variableDeclarationList_in_variableStatement4905);
			variableDeclarationList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(899, 62);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:62: ( ( LineTerminator )* | ';' )
			int alt131=2;
			try { DebugEnterSubRule(131);
			try { DebugEnterDecision(131, false);
			int LA131_0 = input.LA(1);

			if ((LA131_0==EOF||LA131_0==BooleanLiteral||LA131_0==Identifier||LA131_0==LineTerminator||(LA131_0>=NullLiteral && LA131_0<=NumericLiteral)||LA131_0==StringLiteral||LA131_0==34||LA131_0==42||(LA131_0>=46 && LA131_0<=47)||(LA131_0>=50 && LA131_0<=51)||LA131_0==76||(LA131_0>=80 && LA131_0<=82)||(LA131_0>=85 && LA131_0<=90)||LA131_0==92||(LA131_0>=94 && LA131_0<=95)||LA131_0==97||LA131_0==99||LA131_0==101||LA131_0==104||(LA131_0>=107 && LA131_0<=108)||(LA131_0>=110 && LA131_0<=113)||(LA131_0>=115 && LA131_0<=127)||(LA131_0>=131 && LA131_0<=132)))
			{
				alt131 = 1;
			}
			else if ((LA131_0==61))
			{
				int LA131_2 = input.LA(2);

				if ((EvaluatePredicate(synpred205_AS3_fragment)))
				{
					alt131 = 1;
				}
				else if ((true))
				{
					alt131 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 131, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 131, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:63: ( LineTerminator )*
				{
				DebugLocation(899, 63);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:63: ( LineTerminator )*
				try { DebugEnterSubRule(130);
				while (true)
				{
					int alt130=2;
					try { DebugEnterDecision(130, false);
					int LA130_0 = input.LA(1);

					if ((LA130_0==LineTerminator))
					{
						int LA130_1 = input.LA(2);

						if ((EvaluatePredicate(synpred204_AS3_fragment)))
						{
							alt130 = 1;
						}


					}


					} finally { DebugExitDecision(130); }
					switch ( alt130 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:63: LineTerminator
						{
						DebugLocation(899, 63);
						Match(input,LineTerminator,Follow._LineTerminator_in_variableStatement4908); if (state.failed) return;

						}
						break;

					default:
						goto loop130;
					}
				}

				loop130:
					;

				} finally { DebugExitSubRule(130); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:81: ';'
				{
				DebugLocation(899, 81);
				Match(input,61,Follow._61_in_variableStatement4913); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(131); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableStatement", 46);
			LeaveRule("variableStatement", 46);
			LeaveRule_variableStatement();
			if (state.backtracking > 0) { Memoize(input, 46, variableStatement_StartIndex); }

		}
		DebugLocation(900, 1);
		} finally { DebugExitRule(GrammarFileName, "variableStatement"); }
		return;

	}
	// $ANTLR end "variableStatement"

	partial void EnterRule_variableDeclarationList();
	partial void LeaveRule_variableDeclarationList();

	// $ANTLR start "variableDeclarationList"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:902:1: variableDeclarationList : variableDeclaration ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration )* ;
	[GrammarRule("variableDeclarationList")]
	private void variableDeclarationList()
	{
		EnterRule_variableDeclarationList();
		EnterRule("variableDeclarationList", 47);
		TraceIn("variableDeclarationList", 47);
		int variableDeclarationList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableDeclarationList");
		DebugLocation(902, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:903:2: ( variableDeclaration ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:903:4: variableDeclaration ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration )*
			{
			DebugLocation(903, 4);
			PushFollow(Follow._variableDeclaration_in_variableDeclarationList4926);
			variableDeclaration();
			PopFollow();
			if (state.failed) return;
			DebugLocation(903, 24);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:903:24: ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration )*
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				try
				{
					alt134 = dfa134.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(134); }
				switch ( alt134 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:903:25: ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration
					{
					DebugLocation(903, 25);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:903:25: ( LineTerminator )*
					try { DebugEnterSubRule(132);
					while (true)
					{
						int alt132=2;
						try { DebugEnterDecision(132, false);
						int LA132_0 = input.LA(1);

						if ((LA132_0==LineTerminator))
						{
							alt132 = 1;
						}


						} finally { DebugExitDecision(132); }
						switch ( alt132 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:903:25: LineTerminator
							{
							DebugLocation(903, 25);
							Match(input,LineTerminator,Follow._LineTerminator_in_variableDeclarationList4929); if (state.failed) return;

							}
							break;

						default:
							goto loop132;
						}
					}

					loop132:
						;

					} finally { DebugExitSubRule(132); }

					DebugLocation(903, 41);
					Match(input,49,Follow._49_in_variableDeclarationList4932); if (state.failed) return;
					DebugLocation(903, 45);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:903:45: ( LineTerminator )*
					try { DebugEnterSubRule(133);
					while (true)
					{
						int alt133=2;
						try { DebugEnterDecision(133, false);
						int LA133_0 = input.LA(1);

						if ((LA133_0==LineTerminator))
						{
							alt133 = 1;
						}


						} finally { DebugExitDecision(133); }
						switch ( alt133 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:903:45: LineTerminator
							{
							DebugLocation(903, 45);
							Match(input,LineTerminator,Follow._LineTerminator_in_variableDeclarationList4934); if (state.failed) return;

							}
							break;

						default:
							goto loop133;
						}
					}

					loop133:
						;

					} finally { DebugExitSubRule(133); }

					DebugLocation(903, 61);
					PushFollow(Follow._variableDeclaration_in_variableDeclarationList4937);
					variableDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop134;
				}
			}

			loop134:
				;

			} finally { DebugExitSubRule(134); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarationList", 47);
			LeaveRule("variableDeclarationList", 47);
			LeaveRule_variableDeclarationList();
			if (state.backtracking > 0) { Memoize(input, 47, variableDeclarationList_StartIndex); }

		}
		DebugLocation(904, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationList"); }
		return;

	}
	// $ANTLR end "variableDeclarationList"

	partial void EnterRule_variableDeclarationListNoIn();
	partial void LeaveRule_variableDeclarationListNoIn();

	// $ANTLR start "variableDeclarationListNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:906:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn )* ;
	[GrammarRule("variableDeclarationListNoIn")]
	private void variableDeclarationListNoIn()
	{
		EnterRule_variableDeclarationListNoIn();
		EnterRule("variableDeclarationListNoIn", 48);
		TraceIn("variableDeclarationListNoIn", 48);
		int variableDeclarationListNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableDeclarationListNoIn");
		DebugLocation(906, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:907:2: ( variableDeclarationNoIn ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:907:4: variableDeclarationNoIn ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn )*
			{
			DebugLocation(907, 4);
			PushFollow(Follow._variableDeclarationNoIn_in_variableDeclarationListNoIn4951);
			variableDeclarationNoIn();
			PopFollow();
			if (state.failed) return;
			DebugLocation(907, 28);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:907:28: ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn )*
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=2;
				try { DebugEnterDecision(137, false);
				try
				{
					alt137 = dfa137.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(137); }
				switch ( alt137 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:907:29: ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn
					{
					DebugLocation(907, 29);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:907:29: ( LineTerminator )*
					try { DebugEnterSubRule(135);
					while (true)
					{
						int alt135=2;
						try { DebugEnterDecision(135, false);
						int LA135_0 = input.LA(1);

						if ((LA135_0==LineTerminator))
						{
							alt135 = 1;
						}


						} finally { DebugExitDecision(135); }
						switch ( alt135 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:907:29: LineTerminator
							{
							DebugLocation(907, 29);
							Match(input,LineTerminator,Follow._LineTerminator_in_variableDeclarationListNoIn4954); if (state.failed) return;

							}
							break;

						default:
							goto loop135;
						}
					}

					loop135:
						;

					} finally { DebugExitSubRule(135); }

					DebugLocation(907, 45);
					Match(input,49,Follow._49_in_variableDeclarationListNoIn4957); if (state.failed) return;
					DebugLocation(907, 49);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:907:49: ( LineTerminator )*
					try { DebugEnterSubRule(136);
					while (true)
					{
						int alt136=2;
						try { DebugEnterDecision(136, false);
						int LA136_0 = input.LA(1);

						if ((LA136_0==LineTerminator))
						{
							alt136 = 1;
						}


						} finally { DebugExitDecision(136); }
						switch ( alt136 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:907:49: LineTerminator
							{
							DebugLocation(907, 49);
							Match(input,LineTerminator,Follow._LineTerminator_in_variableDeclarationListNoIn4959); if (state.failed) return;

							}
							break;

						default:
							goto loop136;
						}
					}

					loop136:
						;

					} finally { DebugExitSubRule(136); }

					DebugLocation(907, 65);
					PushFollow(Follow._variableDeclarationNoIn_in_variableDeclarationListNoIn4962);
					variableDeclarationNoIn();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop137;
				}
			}

			loop137:
				;

			} finally { DebugExitSubRule(137); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarationListNoIn", 48);
			LeaveRule("variableDeclarationListNoIn", 48);
			LeaveRule_variableDeclarationListNoIn();
			if (state.backtracking > 0) { Memoize(input, 48, variableDeclarationListNoIn_StartIndex); }

		}
		DebugLocation(908, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationListNoIn"); }
		return;

	}
	// $ANTLR end "variableDeclarationListNoIn"

	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();

	// $ANTLR start "variableDeclaration"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:910:1: variableDeclaration : Identifier ( LineTerminator )* ( typeInformation )? ( LineTerminator )* ( initialiser )? ;
	[GrammarRule("variableDeclaration")]
	private void variableDeclaration()
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 49);
		TraceIn("variableDeclaration", 49);
		int variableDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(910, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:2: ( Identifier ( LineTerminator )* ( typeInformation )? ( LineTerminator )* ( initialiser )? )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:4: Identifier ( LineTerminator )* ( typeInformation )? ( LineTerminator )* ( initialiser )?
			{
			DebugLocation(911, 4);
			Match(input,Identifier,Follow._Identifier_in_variableDeclaration4975); if (state.failed) return;
			DebugLocation(911, 15);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:15: ( LineTerminator )*
			try { DebugEnterSubRule(138);
			while (true)
			{
				int alt138=2;
				try { DebugEnterDecision(138, false);
				int LA138_0 = input.LA(1);

				if ((LA138_0==LineTerminator))
				{
					int LA138_2 = input.LA(2);

					if ((EvaluatePredicate(synpred212_AS3_fragment)))
					{
						alt138 = 1;
					}


				}


				} finally { DebugExitDecision(138); }
				switch ( alt138 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:15: LineTerminator
					{
					DebugLocation(911, 15);
					Match(input,LineTerminator,Follow._LineTerminator_in_variableDeclaration4977); if (state.failed) return;

					}
					break;

				default:
					goto loop138;
				}
			}

			loop138:
				;

			} finally { DebugExitSubRule(138); }

			DebugLocation(911, 31);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:31: ( typeInformation )?
			int alt139=2;
			try { DebugEnterSubRule(139);
			try { DebugEnterDecision(139, false);
			int LA139_0 = input.LA(1);

			if ((LA139_0==59))
			{
				alt139 = 1;
			}
			} finally { DebugExitDecision(139); }
			switch (alt139)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:31: typeInformation
				{
				DebugLocation(911, 31);
				PushFollow(Follow._typeInformation_in_variableDeclaration4980);
				typeInformation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(139); }

			DebugLocation(911, 48);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:48: ( LineTerminator )*
			try { DebugEnterSubRule(140);
			while (true)
			{
				int alt140=2;
				try { DebugEnterDecision(140, false);
				int LA140_0 = input.LA(1);

				if ((LA140_0==LineTerminator))
				{
					int LA140_2 = input.LA(2);

					if ((EvaluatePredicate(synpred214_AS3_fragment)))
					{
						alt140 = 1;
					}


				}


				} finally { DebugExitDecision(140); }
				switch ( alt140 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:48: LineTerminator
					{
					DebugLocation(911, 48);
					Match(input,LineTerminator,Follow._LineTerminator_in_variableDeclaration4983); if (state.failed) return;

					}
					break;

				default:
					goto loop140;
				}
			}

			loop140:
				;

			} finally { DebugExitSubRule(140); }

			DebugLocation(911, 64);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:64: ( initialiser )?
			int alt141=2;
			try { DebugEnterSubRule(141);
			try { DebugEnterDecision(141, false);
			int LA141_0 = input.LA(1);

			if ((LA141_0==66))
			{
				alt141 = 1;
			}
			} finally { DebugExitDecision(141); }
			switch (alt141)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:64: initialiser
				{
				DebugLocation(911, 64);
				PushFollow(Follow._initialiser_in_variableDeclaration4986);
				initialiser();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(141); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaration", 49);
			LeaveRule("variableDeclaration", 49);
			LeaveRule_variableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 49, variableDeclaration_StartIndex); }

		}
		DebugLocation(912, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return;

	}
	// $ANTLR end "variableDeclaration"

	partial void EnterRule_variableDeclarationNoIn();
	partial void LeaveRule_variableDeclarationNoIn();

	// $ANTLR start "variableDeclarationNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:914:1: variableDeclarationNoIn : Identifier ( LineTerminator )* ( typeInformation )? ( LineTerminator )* ( initialiserNoIn )? ;
	[GrammarRule("variableDeclarationNoIn")]
	private void variableDeclarationNoIn()
	{
		EnterRule_variableDeclarationNoIn();
		EnterRule("variableDeclarationNoIn", 50);
		TraceIn("variableDeclarationNoIn", 50);
		int variableDeclarationNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableDeclarationNoIn");
		DebugLocation(914, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:2: ( Identifier ( LineTerminator )* ( typeInformation )? ( LineTerminator )* ( initialiserNoIn )? )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:4: Identifier ( LineTerminator )* ( typeInformation )? ( LineTerminator )* ( initialiserNoIn )?
			{
			DebugLocation(915, 4);
			Match(input,Identifier,Follow._Identifier_in_variableDeclarationNoIn4998); if (state.failed) return;
			DebugLocation(915, 15);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:15: ( LineTerminator )*
			try { DebugEnterSubRule(142);
			while (true)
			{
				int alt142=2;
				try { DebugEnterDecision(142, false);
				int LA142_0 = input.LA(1);

				if ((LA142_0==LineTerminator))
				{
					int LA142_2 = input.LA(2);

					if ((EvaluatePredicate(synpred216_AS3_fragment)))
					{
						alt142 = 1;
					}


				}


				} finally { DebugExitDecision(142); }
				switch ( alt142 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:15: LineTerminator
					{
					DebugLocation(915, 15);
					Match(input,LineTerminator,Follow._LineTerminator_in_variableDeclarationNoIn5000); if (state.failed) return;

					}
					break;

				default:
					goto loop142;
				}
			}

			loop142:
				;

			} finally { DebugExitSubRule(142); }

			DebugLocation(915, 31);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:31: ( typeInformation )?
			int alt143=2;
			try { DebugEnterSubRule(143);
			try { DebugEnterDecision(143, false);
			int LA143_0 = input.LA(1);

			if ((LA143_0==59))
			{
				alt143 = 1;
			}
			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:31: typeInformation
				{
				DebugLocation(915, 31);
				PushFollow(Follow._typeInformation_in_variableDeclarationNoIn5003);
				typeInformation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(143); }

			DebugLocation(915, 48);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:48: ( LineTerminator )*
			try { DebugEnterSubRule(144);
			while (true)
			{
				int alt144=2;
				try { DebugEnterDecision(144, false);
				int LA144_0 = input.LA(1);

				if ((LA144_0==LineTerminator))
				{
					int LA144_2 = input.LA(2);

					if ((EvaluatePredicate(synpred218_AS3_fragment)))
					{
						alt144 = 1;
					}


				}


				} finally { DebugExitDecision(144); }
				switch ( alt144 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:48: LineTerminator
					{
					DebugLocation(915, 48);
					Match(input,LineTerminator,Follow._LineTerminator_in_variableDeclarationNoIn5006); if (state.failed) return;

					}
					break;

				default:
					goto loop144;
				}
			}

			loop144:
				;

			} finally { DebugExitSubRule(144); }

			DebugLocation(915, 64);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:64: ( initialiserNoIn )?
			int alt145=2;
			try { DebugEnterSubRule(145);
			try { DebugEnterDecision(145, false);
			int LA145_0 = input.LA(1);

			if ((LA145_0==66))
			{
				alt145 = 1;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:64: initialiserNoIn
				{
				DebugLocation(915, 64);
				PushFollow(Follow._initialiserNoIn_in_variableDeclarationNoIn5009);
				initialiserNoIn();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(145); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarationNoIn", 50);
			LeaveRule("variableDeclarationNoIn", 50);
			LeaveRule_variableDeclarationNoIn();
			if (state.backtracking > 0) { Memoize(input, 50, variableDeclarationNoIn_StartIndex); }

		}
		DebugLocation(916, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationNoIn"); }
		return;

	}
	// $ANTLR end "variableDeclarationNoIn"

	partial void EnterRule_initialiser();
	partial void LeaveRule_initialiser();

	// $ANTLR start "initialiser"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:918:1: initialiser : '=' ( LineTerminator )* assignmentExpression ;
	[GrammarRule("initialiser")]
	private void initialiser()
	{
		EnterRule_initialiser();
		EnterRule("initialiser", 51);
		TraceIn("initialiser", 51);
		int initialiser_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "initialiser");
		DebugLocation(918, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:919:2: ( '=' ( LineTerminator )* assignmentExpression )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:919:4: '=' ( LineTerminator )* assignmentExpression
			{
			DebugLocation(919, 4);
			Match(input,66,Follow._66_in_initialiser5021); if (state.failed) return;
			DebugLocation(919, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:919:8: ( LineTerminator )*
			try { DebugEnterSubRule(146);
			while (true)
			{
				int alt146=2;
				try { DebugEnterDecision(146, false);
				int LA146_0 = input.LA(1);

				if ((LA146_0==LineTerminator))
				{
					alt146 = 1;
				}


				} finally { DebugExitDecision(146); }
				switch ( alt146 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:919:8: LineTerminator
					{
					DebugLocation(919, 8);
					Match(input,LineTerminator,Follow._LineTerminator_in_initialiser5023); if (state.failed) return;

					}
					break;

				default:
					goto loop146;
				}
			}

			loop146:
				;

			} finally { DebugExitSubRule(146); }

			DebugLocation(919, 24);
			PushFollow(Follow._assignmentExpression_in_initialiser5026);
			assignmentExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("initialiser", 51);
			LeaveRule("initialiser", 51);
			LeaveRule_initialiser();
			if (state.backtracking > 0) { Memoize(input, 51, initialiser_StartIndex); }

		}
		DebugLocation(920, 1);
		} finally { DebugExitRule(GrammarFileName, "initialiser"); }
		return;

	}
	// $ANTLR end "initialiser"

	partial void EnterRule_initialiserNoIn();
	partial void LeaveRule_initialiserNoIn();

	// $ANTLR start "initialiserNoIn"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:922:1: initialiserNoIn : '=' ( LineTerminator )* assignmentExpressionNoIn ;
	[GrammarRule("initialiserNoIn")]
	private void initialiserNoIn()
	{
		EnterRule_initialiserNoIn();
		EnterRule("initialiserNoIn", 52);
		TraceIn("initialiserNoIn", 52);
		int initialiserNoIn_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "initialiserNoIn");
		DebugLocation(922, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:923:2: ( '=' ( LineTerminator )* assignmentExpressionNoIn )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:923:4: '=' ( LineTerminator )* assignmentExpressionNoIn
			{
			DebugLocation(923, 4);
			Match(input,66,Follow._66_in_initialiserNoIn5038); if (state.failed) return;
			DebugLocation(923, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:923:8: ( LineTerminator )*
			try { DebugEnterSubRule(147);
			while (true)
			{
				int alt147=2;
				try { DebugEnterDecision(147, false);
				int LA147_0 = input.LA(1);

				if ((LA147_0==LineTerminator))
				{
					alt147 = 1;
				}


				} finally { DebugExitDecision(147); }
				switch ( alt147 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:923:8: LineTerminator
					{
					DebugLocation(923, 8);
					Match(input,LineTerminator,Follow._LineTerminator_in_initialiserNoIn5040); if (state.failed) return;

					}
					break;

				default:
					goto loop147;
				}
			}

			loop147:
				;

			} finally { DebugExitSubRule(147); }

			DebugLocation(923, 24);
			PushFollow(Follow._assignmentExpressionNoIn_in_initialiserNoIn5043);
			assignmentExpressionNoIn();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("initialiserNoIn", 52);
			LeaveRule("initialiserNoIn", 52);
			LeaveRule_initialiserNoIn();
			if (state.backtracking > 0) { Memoize(input, 52, initialiserNoIn_StartIndex); }

		}
		DebugLocation(924, 1);
		} finally { DebugExitRule(GrammarFileName, "initialiserNoIn"); }
		return;

	}
	// $ANTLR end "initialiserNoIn"

	partial void EnterRule_emptyStatement();
	partial void LeaveRule_emptyStatement();

	// $ANTLR start "emptyStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:926:1: emptyStatement : ';' ;
	[GrammarRule("emptyStatement")]
	private void emptyStatement()
	{
		EnterRule_emptyStatement();
		EnterRule("emptyStatement", 53);
		TraceIn("emptyStatement", 53);
		int emptyStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "emptyStatement");
		DebugLocation(926, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:927:2: ( ';' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:927:4: ';'
			{
			DebugLocation(927, 4);
			Match(input,61,Follow._61_in_emptyStatement5055); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("emptyStatement", 53);
			LeaveRule("emptyStatement", 53);
			LeaveRule_emptyStatement();
			if (state.backtracking > 0) { Memoize(input, 53, emptyStatement_StartIndex); }

		}
		DebugLocation(928, 1);
		} finally { DebugExitRule(GrammarFileName, "emptyStatement"); }
		return;

	}
	// $ANTLR end "emptyStatement"

	partial void EnterRule_expressionStatement();
	partial void LeaveRule_expressionStatement();

	// $ANTLR start "expressionStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:930:1: expressionStatement : expression ( ( LineTerminator )* | ';' ) ;
	[GrammarRule("expressionStatement")]
	private void expressionStatement()
	{
		EnterRule_expressionStatement();
		EnterRule("expressionStatement", 54);
		TraceIn("expressionStatement", 54);
		int expressionStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "expressionStatement");
		DebugLocation(930, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:2: ( expression ( ( LineTerminator )* | ';' ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:4: expression ( ( LineTerminator )* | ';' )
			{
			DebugLocation(931, 4);
			PushFollow(Follow._expression_in_expressionStatement5067);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(931, 15);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:15: ( ( LineTerminator )* | ';' )
			int alt149=2;
			try { DebugEnterSubRule(149);
			try { DebugEnterDecision(149, false);
			int LA149_0 = input.LA(1);

			if ((LA149_0==EOF||LA149_0==BooleanLiteral||LA149_0==Identifier||LA149_0==LineTerminator||(LA149_0>=NullLiteral && LA149_0<=NumericLiteral)||LA149_0==StringLiteral||LA149_0==34||LA149_0==42||(LA149_0>=46 && LA149_0<=47)||(LA149_0>=50 && LA149_0<=51)||LA149_0==76||(LA149_0>=80 && LA149_0<=82)||(LA149_0>=85 && LA149_0<=90)||LA149_0==92||(LA149_0>=94 && LA149_0<=95)||LA149_0==97||LA149_0==99||LA149_0==101||LA149_0==104||(LA149_0>=107 && LA149_0<=108)||(LA149_0>=110 && LA149_0<=113)||(LA149_0>=115 && LA149_0<=127)||(LA149_0>=131 && LA149_0<=132)))
			{
				alt149 = 1;
			}
			else if ((LA149_0==61))
			{
				int LA149_2 = input.LA(2);

				if ((EvaluatePredicate(synpred223_AS3_fragment)))
				{
					alt149 = 1;
				}
				else if ((true))
				{
					alt149 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 149, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 149, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(149); }
			switch (alt149)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:16: ( LineTerminator )*
				{
				DebugLocation(931, 16);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:16: ( LineTerminator )*
				try { DebugEnterSubRule(148);
				while (true)
				{
					int alt148=2;
					try { DebugEnterDecision(148, false);
					int LA148_0 = input.LA(1);

					if ((LA148_0==LineTerminator))
					{
						int LA148_1 = input.LA(2);

						if ((EvaluatePredicate(synpred222_AS3_fragment)))
						{
							alt148 = 1;
						}


					}


					} finally { DebugExitDecision(148); }
					switch ( alt148 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:16: LineTerminator
						{
						DebugLocation(931, 16);
						Match(input,LineTerminator,Follow._LineTerminator_in_expressionStatement5070); if (state.failed) return;

						}
						break;

					default:
						goto loop148;
					}
				}

				loop148:
					;

				} finally { DebugExitSubRule(148); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:34: ';'
				{
				DebugLocation(931, 34);
				Match(input,61,Follow._61_in_expressionStatement5075); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(149); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionStatement", 54);
			LeaveRule("expressionStatement", 54);
			LeaveRule_expressionStatement();
			if (state.backtracking > 0) { Memoize(input, 54, expressionStatement_StartIndex); }

		}
		DebugLocation(932, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionStatement"); }
		return;

	}
	// $ANTLR end "expressionStatement"

	partial void EnterRule_ifStatement();
	partial void LeaveRule_ifStatement();

	// $ANTLR start "ifStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:934:1: ifStatement : 'if' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement ( ( LineTerminator )* 'else' ( LineTerminator )* statement )? ;
	[GrammarRule("ifStatement")]
	private void ifStatement()
	{
		EnterRule_ifStatement();
		EnterRule("ifStatement", 55);
		TraceIn("ifStatement", 55);
		int ifStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "ifStatement");
		DebugLocation(934, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:2: ( 'if' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement ( ( LineTerminator )* 'else' ( LineTerminator )* statement )? )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:4: 'if' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement ( ( LineTerminator )* 'else' ( LineTerminator )* statement )?
			{
			DebugLocation(935, 4);
			Match(input,97,Follow._97_in_ifStatement5087); if (state.failed) return;
			DebugLocation(935, 9);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:9: ( LineTerminator )*
			try { DebugEnterSubRule(150);
			while (true)
			{
				int alt150=2;
				try { DebugEnterDecision(150, false);
				int LA150_0 = input.LA(1);

				if ((LA150_0==LineTerminator))
				{
					alt150 = 1;
				}


				} finally { DebugExitDecision(150); }
				switch ( alt150 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:9: LineTerminator
					{
					DebugLocation(935, 9);
					Match(input,LineTerminator,Follow._LineTerminator_in_ifStatement5089); if (state.failed) return;

					}
					break;

				default:
					goto loop150;
				}
			}

			loop150:
				;

			} finally { DebugExitSubRule(150); }

			DebugLocation(935, 25);
			Match(input,42,Follow._42_in_ifStatement5092); if (state.failed) return;
			DebugLocation(935, 29);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:29: ( LineTerminator )*
			try { DebugEnterSubRule(151);
			while (true)
			{
				int alt151=2;
				try { DebugEnterDecision(151, false);
				int LA151_0 = input.LA(1);

				if ((LA151_0==LineTerminator))
				{
					alt151 = 1;
				}


				} finally { DebugExitDecision(151); }
				switch ( alt151 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:29: LineTerminator
					{
					DebugLocation(935, 29);
					Match(input,LineTerminator,Follow._LineTerminator_in_ifStatement5094); if (state.failed) return;

					}
					break;

				default:
					goto loop151;
				}
			}

			loop151:
				;

			} finally { DebugExitSubRule(151); }

			DebugLocation(935, 45);
			PushFollow(Follow._expression_in_ifStatement5097);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(935, 56);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:56: ( LineTerminator )*
			try { DebugEnterSubRule(152);
			while (true)
			{
				int alt152=2;
				try { DebugEnterDecision(152, false);
				int LA152_0 = input.LA(1);

				if ((LA152_0==LineTerminator))
				{
					alt152 = 1;
				}


				} finally { DebugExitDecision(152); }
				switch ( alt152 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:56: LineTerminator
					{
					DebugLocation(935, 56);
					Match(input,LineTerminator,Follow._LineTerminator_in_ifStatement5099); if (state.failed) return;

					}
					break;

				default:
					goto loop152;
				}
			}

			loop152:
				;

			} finally { DebugExitSubRule(152); }

			DebugLocation(935, 72);
			Match(input,43,Follow._43_in_ifStatement5102); if (state.failed) return;
			DebugLocation(935, 76);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:76: ( LineTerminator )*
			try { DebugEnterSubRule(153);
			while (true)
			{
				int alt153=2;
				try { DebugEnterDecision(153, false);
				int LA153_0 = input.LA(1);

				if ((LA153_0==LineTerminator))
				{
					alt153 = 1;
				}


				} finally { DebugExitDecision(153); }
				switch ( alt153 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:76: LineTerminator
					{
					DebugLocation(935, 76);
					Match(input,LineTerminator,Follow._LineTerminator_in_ifStatement5104); if (state.failed) return;

					}
					break;

				default:
					goto loop153;
				}
			}

			loop153:
				;

			} finally { DebugExitSubRule(153); }

			DebugLocation(935, 92);
			PushFollow(Follow._statement_in_ifStatement5107);
			statement();
			PopFollow();
			if (state.failed) return;
			DebugLocation(935, 102);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:102: ( ( LineTerminator )* 'else' ( LineTerminator )* statement )?
			int alt156=2;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, false);
			int LA156_0 = input.LA(1);

			if ((LA156_0==LineTerminator))
			{
				int LA156_1 = input.LA(2);

				if ((EvaluatePredicate(synpred230_AS3_fragment)))
				{
					alt156 = 1;
				}
			}
			else if ((LA156_0==90))
			{
				int LA156_2 = input.LA(2);

				if ((EvaluatePredicate(synpred230_AS3_fragment)))
				{
					alt156 = 1;
				}
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:103: ( LineTerminator )* 'else' ( LineTerminator )* statement
				{
				DebugLocation(935, 103);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:103: ( LineTerminator )*
				try { DebugEnterSubRule(154);
				while (true)
				{
					int alt154=2;
					try { DebugEnterDecision(154, false);
					int LA154_0 = input.LA(1);

					if ((LA154_0==LineTerminator))
					{
						alt154 = 1;
					}


					} finally { DebugExitDecision(154); }
					switch ( alt154 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:103: LineTerminator
						{
						DebugLocation(935, 103);
						Match(input,LineTerminator,Follow._LineTerminator_in_ifStatement5110); if (state.failed) return;

						}
						break;

					default:
						goto loop154;
					}
				}

				loop154:
					;

				} finally { DebugExitSubRule(154); }

				DebugLocation(935, 119);
				Match(input,90,Follow._90_in_ifStatement5113); if (state.failed) return;
				DebugLocation(935, 126);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:126: ( LineTerminator )*
				try { DebugEnterSubRule(155);
				while (true)
				{
					int alt155=2;
					try { DebugEnterDecision(155, false);
					int LA155_0 = input.LA(1);

					if ((LA155_0==LineTerminator))
					{
						alt155 = 1;
					}


					} finally { DebugExitDecision(155); }
					switch ( alt155 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:126: LineTerminator
						{
						DebugLocation(935, 126);
						Match(input,LineTerminator,Follow._LineTerminator_in_ifStatement5115); if (state.failed) return;

						}
						break;

					default:
						goto loop155;
					}
				}

				loop155:
					;

				} finally { DebugExitSubRule(155); }

				DebugLocation(935, 142);
				PushFollow(Follow._statement_in_ifStatement5118);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(156); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifStatement", 55);
			LeaveRule("ifStatement", 55);
			LeaveRule_ifStatement();
			if (state.backtracking > 0) { Memoize(input, 55, ifStatement_StartIndex); }

		}
		DebugLocation(936, 1);
		} finally { DebugExitRule(GrammarFileName, "ifStatement"); }
		return;

	}
	// $ANTLR end "ifStatement"

	partial void EnterRule_iterationStatement();
	partial void LeaveRule_iterationStatement();

	// $ANTLR start "iterationStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:938:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
	[GrammarRule("iterationStatement")]
	private void iterationStatement()
	{
		EnterRule_iterationStatement();
		EnterRule("iterationStatement", 56);
		TraceIn("iterationStatement", 56);
		int iterationStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "iterationStatement");
		DebugLocation(938, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:939:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
			int alt157=4;
			try { DebugEnterDecision(157, false);
			switch (input.LA(1))
			{
			case 89:
				{
				alt157 = 1;
				}
				break;
			case 125:
				{
				alt157 = 2;
				}
				break;
			case 94:
				{
				int LA157_3 = input.LA(2);

				if ((EvaluatePredicate(synpred233_AS3_fragment)))
				{
					alt157 = 3;
				}
				else if ((true))
				{
					alt157 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 157, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 157, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:939:4: doWhileStatement
				{
				DebugLocation(939, 4);
				PushFollow(Follow._doWhileStatement_in_iterationStatement5131);
				doWhileStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:940:4: whileStatement
				{
				DebugLocation(940, 4);
				PushFollow(Follow._whileStatement_in_iterationStatement5136);
				whileStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:941:4: forStatement
				{
				DebugLocation(941, 4);
				PushFollow(Follow._forStatement_in_iterationStatement5141);
				forStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:942:4: forInStatement
				{
				DebugLocation(942, 4);
				PushFollow(Follow._forInStatement_in_iterationStatement5146);
				forInStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("iterationStatement", 56);
			LeaveRule("iterationStatement", 56);
			LeaveRule_iterationStatement();
			if (state.backtracking > 0) { Memoize(input, 56, iterationStatement_StartIndex); }

		}
		DebugLocation(943, 1);
		} finally { DebugExitRule(GrammarFileName, "iterationStatement"); }
		return;

	}
	// $ANTLR end "iterationStatement"

	partial void EnterRule_doWhileStatement();
	partial void LeaveRule_doWhileStatement();

	// $ANTLR start "doWhileStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:945:1: doWhileStatement : 'do' ( LineTerminator )* statement ( LineTerminator )* 'while' ( LineTerminator )* '(' expression ')' ( ( LineTerminator )* | ';' ) ;
	[GrammarRule("doWhileStatement")]
	private void doWhileStatement()
	{
		EnterRule_doWhileStatement();
		EnterRule("doWhileStatement", 57);
		TraceIn("doWhileStatement", 57);
		int doWhileStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "doWhileStatement");
		DebugLocation(945, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:2: ( 'do' ( LineTerminator )* statement ( LineTerminator )* 'while' ( LineTerminator )* '(' expression ')' ( ( LineTerminator )* | ';' ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:4: 'do' ( LineTerminator )* statement ( LineTerminator )* 'while' ( LineTerminator )* '(' expression ')' ( ( LineTerminator )* | ';' )
			{
			DebugLocation(946, 4);
			Match(input,89,Follow._89_in_doWhileStatement5158); if (state.failed) return;
			DebugLocation(946, 9);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:9: ( LineTerminator )*
			try { DebugEnterSubRule(158);
			while (true)
			{
				int alt158=2;
				try { DebugEnterDecision(158, false);
				int LA158_0 = input.LA(1);

				if ((LA158_0==LineTerminator))
				{
					alt158 = 1;
				}


				} finally { DebugExitDecision(158); }
				switch ( alt158 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:9: LineTerminator
					{
					DebugLocation(946, 9);
					Match(input,LineTerminator,Follow._LineTerminator_in_doWhileStatement5160); if (state.failed) return;

					}
					break;

				default:
					goto loop158;
				}
			}

			loop158:
				;

			} finally { DebugExitSubRule(158); }

			DebugLocation(946, 25);
			PushFollow(Follow._statement_in_doWhileStatement5163);
			statement();
			PopFollow();
			if (state.failed) return;
			DebugLocation(946, 35);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:35: ( LineTerminator )*
			try { DebugEnterSubRule(159);
			while (true)
			{
				int alt159=2;
				try { DebugEnterDecision(159, false);
				int LA159_0 = input.LA(1);

				if ((LA159_0==LineTerminator))
				{
					alt159 = 1;
				}


				} finally { DebugExitDecision(159); }
				switch ( alt159 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:35: LineTerminator
					{
					DebugLocation(946, 35);
					Match(input,LineTerminator,Follow._LineTerminator_in_doWhileStatement5165); if (state.failed) return;

					}
					break;

				default:
					goto loop159;
				}
			}

			loop159:
				;

			} finally { DebugExitSubRule(159); }

			DebugLocation(946, 51);
			Match(input,125,Follow._125_in_doWhileStatement5168); if (state.failed) return;
			DebugLocation(946, 59);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:59: ( LineTerminator )*
			try { DebugEnterSubRule(160);
			while (true)
			{
				int alt160=2;
				try { DebugEnterDecision(160, false);
				int LA160_0 = input.LA(1);

				if ((LA160_0==LineTerminator))
				{
					alt160 = 1;
				}


				} finally { DebugExitDecision(160); }
				switch ( alt160 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:59: LineTerminator
					{
					DebugLocation(946, 59);
					Match(input,LineTerminator,Follow._LineTerminator_in_doWhileStatement5170); if (state.failed) return;

					}
					break;

				default:
					goto loop160;
				}
			}

			loop160:
				;

			} finally { DebugExitSubRule(160); }

			DebugLocation(946, 75);
			Match(input,42,Follow._42_in_doWhileStatement5173); if (state.failed) return;
			DebugLocation(946, 79);
			PushFollow(Follow._expression_in_doWhileStatement5175);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(946, 90);
			Match(input,43,Follow._43_in_doWhileStatement5177); if (state.failed) return;
			DebugLocation(946, 94);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:94: ( ( LineTerminator )* | ';' )
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, false);
			int LA162_0 = input.LA(1);

			if ((LA162_0==EOF||LA162_0==BooleanLiteral||LA162_0==Identifier||LA162_0==LineTerminator||(LA162_0>=NullLiteral && LA162_0<=NumericLiteral)||LA162_0==StringLiteral||LA162_0==34||LA162_0==42||(LA162_0>=46 && LA162_0<=47)||(LA162_0>=50 && LA162_0<=51)||LA162_0==76||(LA162_0>=80 && LA162_0<=82)||(LA162_0>=85 && LA162_0<=90)||LA162_0==92||(LA162_0>=94 && LA162_0<=95)||LA162_0==97||LA162_0==99||LA162_0==101||LA162_0==104||(LA162_0>=107 && LA162_0<=108)||(LA162_0>=110 && LA162_0<=113)||(LA162_0>=115 && LA162_0<=127)||(LA162_0>=131 && LA162_0<=132)))
			{
				alt162 = 1;
			}
			else if ((LA162_0==61))
			{
				int LA162_2 = input.LA(2);

				if ((EvaluatePredicate(synpred238_AS3_fragment)))
				{
					alt162 = 1;
				}
				else if ((true))
				{
					alt162 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 162, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 162, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:95: ( LineTerminator )*
				{
				DebugLocation(946, 95);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:95: ( LineTerminator )*
				try { DebugEnterSubRule(161);
				while (true)
				{
					int alt161=2;
					try { DebugEnterDecision(161, false);
					int LA161_0 = input.LA(1);

					if ((LA161_0==LineTerminator))
					{
						int LA161_1 = input.LA(2);

						if ((EvaluatePredicate(synpred237_AS3_fragment)))
						{
							alt161 = 1;
						}


					}


					} finally { DebugExitDecision(161); }
					switch ( alt161 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:95: LineTerminator
						{
						DebugLocation(946, 95);
						Match(input,LineTerminator,Follow._LineTerminator_in_doWhileStatement5180); if (state.failed) return;

						}
						break;

					default:
						goto loop161;
					}
				}

				loop161:
					;

				} finally { DebugExitSubRule(161); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:113: ';'
				{
				DebugLocation(946, 113);
				Match(input,61,Follow._61_in_doWhileStatement5185); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(162); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("doWhileStatement", 57);
			LeaveRule("doWhileStatement", 57);
			LeaveRule_doWhileStatement();
			if (state.backtracking > 0) { Memoize(input, 57, doWhileStatement_StartIndex); }

		}
		DebugLocation(947, 1);
		} finally { DebugExitRule(GrammarFileName, "doWhileStatement"); }
		return;

	}
	// $ANTLR end "doWhileStatement"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();

	// $ANTLR start "whileStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:949:1: whileStatement : 'while' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement ;
	[GrammarRule("whileStatement")]
	private void whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 58);
		TraceIn("whileStatement", 58);
		int whileStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(949, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:950:2: ( 'while' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:950:4: 'while' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement
			{
			DebugLocation(950, 4);
			Match(input,125,Follow._125_in_whileStatement5198); if (state.failed) return;
			DebugLocation(950, 12);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:950:12: ( LineTerminator )*
			try { DebugEnterSubRule(163);
			while (true)
			{
				int alt163=2;
				try { DebugEnterDecision(163, false);
				int LA163_0 = input.LA(1);

				if ((LA163_0==LineTerminator))
				{
					alt163 = 1;
				}


				} finally { DebugExitDecision(163); }
				switch ( alt163 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:950:12: LineTerminator
					{
					DebugLocation(950, 12);
					Match(input,LineTerminator,Follow._LineTerminator_in_whileStatement5200); if (state.failed) return;

					}
					break;

				default:
					goto loop163;
				}
			}

			loop163:
				;

			} finally { DebugExitSubRule(163); }

			DebugLocation(950, 28);
			Match(input,42,Follow._42_in_whileStatement5203); if (state.failed) return;
			DebugLocation(950, 32);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:950:32: ( LineTerminator )*
			try { DebugEnterSubRule(164);
			while (true)
			{
				int alt164=2;
				try { DebugEnterDecision(164, false);
				int LA164_0 = input.LA(1);

				if ((LA164_0==LineTerminator))
				{
					alt164 = 1;
				}


				} finally { DebugExitDecision(164); }
				switch ( alt164 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:950:32: LineTerminator
					{
					DebugLocation(950, 32);
					Match(input,LineTerminator,Follow._LineTerminator_in_whileStatement5205); if (state.failed) return;

					}
					break;

				default:
					goto loop164;
				}
			}

			loop164:
				;

			} finally { DebugExitSubRule(164); }

			DebugLocation(950, 48);
			PushFollow(Follow._expression_in_whileStatement5208);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(950, 59);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:950:59: ( LineTerminator )*
			try { DebugEnterSubRule(165);
			while (true)
			{
				int alt165=2;
				try { DebugEnterDecision(165, false);
				int LA165_0 = input.LA(1);

				if ((LA165_0==LineTerminator))
				{
					alt165 = 1;
				}


				} finally { DebugExitDecision(165); }
				switch ( alt165 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:950:59: LineTerminator
					{
					DebugLocation(950, 59);
					Match(input,LineTerminator,Follow._LineTerminator_in_whileStatement5210); if (state.failed) return;

					}
					break;

				default:
					goto loop165;
				}
			}

			loop165:
				;

			} finally { DebugExitSubRule(165); }

			DebugLocation(950, 75);
			Match(input,43,Follow._43_in_whileStatement5213); if (state.failed) return;
			DebugLocation(950, 79);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:950:79: ( LineTerminator )*
			try { DebugEnterSubRule(166);
			while (true)
			{
				int alt166=2;
				try { DebugEnterDecision(166, false);
				int LA166_0 = input.LA(1);

				if ((LA166_0==LineTerminator))
				{
					alt166 = 1;
				}


				} finally { DebugExitDecision(166); }
				switch ( alt166 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:950:79: LineTerminator
					{
					DebugLocation(950, 79);
					Match(input,LineTerminator,Follow._LineTerminator_in_whileStatement5215); if (state.failed) return;

					}
					break;

				default:
					goto loop166;
				}
			}

			loop166:
				;

			} finally { DebugExitSubRule(166); }

			DebugLocation(950, 95);
			PushFollow(Follow._statement_in_whileStatement5218);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("whileStatement", 58);
			LeaveRule("whileStatement", 58);
			LeaveRule_whileStatement();
			if (state.backtracking > 0) { Memoize(input, 58, whileStatement_StartIndex); }

		}
		DebugLocation(951, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();

	// $ANTLR start "forStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:953:1: forStatement : 'for' ( LineTerminator )* '(' ( ( LineTerminator )* forStatementInitialiserPart )? ( LineTerminator )* ';' ( ( LineTerminator )* expression )? ( LineTerminator )* ';' ( ( LineTerminator )* expression )? ( LineTerminator )* ')' ( LineTerminator )* statement ;
	[GrammarRule("forStatement")]
	private void forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 59);
		TraceIn("forStatement", 59);
		int forStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(953, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:2: ( 'for' ( LineTerminator )* '(' ( ( LineTerminator )* forStatementInitialiserPart )? ( LineTerminator )* ';' ( ( LineTerminator )* expression )? ( LineTerminator )* ';' ( ( LineTerminator )* expression )? ( LineTerminator )* ')' ( LineTerminator )* statement )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:4: 'for' ( LineTerminator )* '(' ( ( LineTerminator )* forStatementInitialiserPart )? ( LineTerminator )* ';' ( ( LineTerminator )* expression )? ( LineTerminator )* ';' ( ( LineTerminator )* expression )? ( LineTerminator )* ')' ( LineTerminator )* statement
			{
			DebugLocation(954, 4);
			Match(input,94,Follow._94_in_forStatement5230); if (state.failed) return;
			DebugLocation(954, 10);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:10: ( LineTerminator )*
			try { DebugEnterSubRule(167);
			while (true)
			{
				int alt167=2;
				try { DebugEnterDecision(167, false);
				int LA167_0 = input.LA(1);

				if ((LA167_0==LineTerminator))
				{
					alt167 = 1;
				}


				} finally { DebugExitDecision(167); }
				switch ( alt167 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:10: LineTerminator
					{
					DebugLocation(954, 10);
					Match(input,LineTerminator,Follow._LineTerminator_in_forStatement5232); if (state.failed) return;

					}
					break;

				default:
					goto loop167;
				}
			}

			loop167:
				;

			} finally { DebugExitSubRule(167); }

			DebugLocation(954, 26);
			Match(input,42,Follow._42_in_forStatement5235); if (state.failed) return;
			DebugLocation(954, 30);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:30: ( ( LineTerminator )* forStatementInitialiserPart )?
			int alt169=2;
			try { DebugEnterSubRule(169);
			try { DebugEnterDecision(169, false);
			try
			{
				alt169 = dfa169.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:31: ( LineTerminator )* forStatementInitialiserPart
				{
				DebugLocation(954, 31);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:31: ( LineTerminator )*
				try { DebugEnterSubRule(168);
				while (true)
				{
					int alt168=2;
					try { DebugEnterDecision(168, false);
					int LA168_0 = input.LA(1);

					if ((LA168_0==LineTerminator))
					{
						alt168 = 1;
					}


					} finally { DebugExitDecision(168); }
					switch ( alt168 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:31: LineTerminator
						{
						DebugLocation(954, 31);
						Match(input,LineTerminator,Follow._LineTerminator_in_forStatement5238); if (state.failed) return;

						}
						break;

					default:
						goto loop168;
					}
				}

				loop168:
					;

				} finally { DebugExitSubRule(168); }

				DebugLocation(954, 47);
				PushFollow(Follow._forStatementInitialiserPart_in_forStatement5241);
				forStatementInitialiserPart();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(169); }

			DebugLocation(954, 77);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:77: ( LineTerminator )*
			try { DebugEnterSubRule(170);
			while (true)
			{
				int alt170=2;
				try { DebugEnterDecision(170, false);
				int LA170_0 = input.LA(1);

				if ((LA170_0==LineTerminator))
				{
					alt170 = 1;
				}


				} finally { DebugExitDecision(170); }
				switch ( alt170 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:77: LineTerminator
					{
					DebugLocation(954, 77);
					Match(input,LineTerminator,Follow._LineTerminator_in_forStatement5245); if (state.failed) return;

					}
					break;

				default:
					goto loop170;
				}
			}

			loop170:
				;

			} finally { DebugExitSubRule(170); }

			DebugLocation(954, 93);
			Match(input,61,Follow._61_in_forStatement5248); if (state.failed) return;
			DebugLocation(954, 97);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:97: ( ( LineTerminator )* expression )?
			int alt172=2;
			try { DebugEnterSubRule(172);
			try { DebugEnterDecision(172, false);
			try
			{
				alt172 = dfa172.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(172); }
			switch (alt172)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:98: ( LineTerminator )* expression
				{
				DebugLocation(954, 98);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:98: ( LineTerminator )*
				try { DebugEnterSubRule(171);
				while (true)
				{
					int alt171=2;
					try { DebugEnterDecision(171, false);
					int LA171_0 = input.LA(1);

					if ((LA171_0==LineTerminator))
					{
						alt171 = 1;
					}


					} finally { DebugExitDecision(171); }
					switch ( alt171 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:98: LineTerminator
						{
						DebugLocation(954, 98);
						Match(input,LineTerminator,Follow._LineTerminator_in_forStatement5251); if (state.failed) return;

						}
						break;

					default:
						goto loop171;
					}
				}

				loop171:
					;

				} finally { DebugExitSubRule(171); }

				DebugLocation(954, 114);
				PushFollow(Follow._expression_in_forStatement5254);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(172); }

			DebugLocation(954, 127);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:127: ( LineTerminator )*
			try { DebugEnterSubRule(173);
			while (true)
			{
				int alt173=2;
				try { DebugEnterDecision(173, false);
				int LA173_0 = input.LA(1);

				if ((LA173_0==LineTerminator))
				{
					alt173 = 1;
				}


				} finally { DebugExitDecision(173); }
				switch ( alt173 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:127: LineTerminator
					{
					DebugLocation(954, 127);
					Match(input,LineTerminator,Follow._LineTerminator_in_forStatement5258); if (state.failed) return;

					}
					break;

				default:
					goto loop173;
				}
			}

			loop173:
				;

			} finally { DebugExitSubRule(173); }

			DebugLocation(954, 143);
			Match(input,61,Follow._61_in_forStatement5261); if (state.failed) return;
			DebugLocation(954, 147);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:147: ( ( LineTerminator )* expression )?
			int alt175=2;
			try { DebugEnterSubRule(175);
			try { DebugEnterDecision(175, false);
			try
			{
				alt175 = dfa175.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(175); }
			switch (alt175)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:148: ( LineTerminator )* expression
				{
				DebugLocation(954, 148);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:148: ( LineTerminator )*
				try { DebugEnterSubRule(174);
				while (true)
				{
					int alt174=2;
					try { DebugEnterDecision(174, false);
					int LA174_0 = input.LA(1);

					if ((LA174_0==LineTerminator))
					{
						alt174 = 1;
					}


					} finally { DebugExitDecision(174); }
					switch ( alt174 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:148: LineTerminator
						{
						DebugLocation(954, 148);
						Match(input,LineTerminator,Follow._LineTerminator_in_forStatement5264); if (state.failed) return;

						}
						break;

					default:
						goto loop174;
					}
				}

				loop174:
					;

				} finally { DebugExitSubRule(174); }

				DebugLocation(954, 164);
				PushFollow(Follow._expression_in_forStatement5267);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(175); }

			DebugLocation(954, 177);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:177: ( LineTerminator )*
			try { DebugEnterSubRule(176);
			while (true)
			{
				int alt176=2;
				try { DebugEnterDecision(176, false);
				int LA176_0 = input.LA(1);

				if ((LA176_0==LineTerminator))
				{
					alt176 = 1;
				}


				} finally { DebugExitDecision(176); }
				switch ( alt176 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:177: LineTerminator
					{
					DebugLocation(954, 177);
					Match(input,LineTerminator,Follow._LineTerminator_in_forStatement5271); if (state.failed) return;

					}
					break;

				default:
					goto loop176;
				}
			}

			loop176:
				;

			} finally { DebugExitSubRule(176); }

			DebugLocation(954, 193);
			Match(input,43,Follow._43_in_forStatement5274); if (state.failed) return;
			DebugLocation(954, 197);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:197: ( LineTerminator )*
			try { DebugEnterSubRule(177);
			while (true)
			{
				int alt177=2;
				try { DebugEnterDecision(177, false);
				int LA177_0 = input.LA(1);

				if ((LA177_0==LineTerminator))
				{
					alt177 = 1;
				}


				} finally { DebugExitDecision(177); }
				switch ( alt177 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:954:197: LineTerminator
					{
					DebugLocation(954, 197);
					Match(input,LineTerminator,Follow._LineTerminator_in_forStatement5276); if (state.failed) return;

					}
					break;

				default:
					goto loop177;
				}
			}

			loop177:
				;

			} finally { DebugExitSubRule(177); }

			DebugLocation(954, 213);
			PushFollow(Follow._statement_in_forStatement5279);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forStatement", 59);
			LeaveRule("forStatement", 59);
			LeaveRule_forStatement();
			if (state.backtracking > 0) { Memoize(input, 59, forStatement_StartIndex); }

		}
		DebugLocation(955, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return;

	}
	// $ANTLR end "forStatement"

	partial void EnterRule_forStatementInitialiserPart();
	partial void LeaveRule_forStatementInitialiserPart();

	// $ANTLR start "forStatementInitialiserPart"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:957:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LineTerminator )* variableDeclarationListNoIn );
	[GrammarRule("forStatementInitialiserPart")]
	private void forStatementInitialiserPart()
	{
		EnterRule_forStatementInitialiserPart();
		EnterRule("forStatementInitialiserPart", 60);
		TraceIn("forStatementInitialiserPart", 60);
		int forStatementInitialiserPart_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forStatementInitialiserPart");
		DebugLocation(957, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:958:2: ( expressionNoIn | 'var' ( LineTerminator )* variableDeclarationListNoIn )
			int alt179=2;
			try { DebugEnterDecision(179, false);
			int LA179_0 = input.LA(1);

			if ((LA179_0==BooleanLiteral||LA179_0==Identifier||(LA179_0>=NullLiteral && LA179_0<=NumericLiteral)||LA179_0==StringLiteral||LA179_0==34||LA179_0==42||(LA179_0>=46 && LA179_0<=47)||(LA179_0>=50 && LA179_0<=51)||LA179_0==76||LA179_0==80||LA179_0==88||LA179_0==95||LA179_0==107||LA179_0==116||LA179_0==118||LA179_0==121||LA179_0==124||LA179_0==127||LA179_0==132))
			{
				alt179 = 1;
			}
			else if ((LA179_0==123))
			{
				alt179 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 179, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(179); }
			switch (alt179)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:958:4: expressionNoIn
				{
				DebugLocation(958, 4);
				PushFollow(Follow._expressionNoIn_in_forStatementInitialiserPart5291);
				expressionNoIn();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:959:4: 'var' ( LineTerminator )* variableDeclarationListNoIn
				{
				DebugLocation(959, 4);
				Match(input,123,Follow._123_in_forStatementInitialiserPart5296); if (state.failed) return;
				DebugLocation(959, 10);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:959:10: ( LineTerminator )*
				try { DebugEnterSubRule(178);
				while (true)
				{
					int alt178=2;
					try { DebugEnterDecision(178, false);
					int LA178_0 = input.LA(1);

					if ((LA178_0==LineTerminator))
					{
						alt178 = 1;
					}


					} finally { DebugExitDecision(178); }
					switch ( alt178 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:959:10: LineTerminator
						{
						DebugLocation(959, 10);
						Match(input,LineTerminator,Follow._LineTerminator_in_forStatementInitialiserPart5298); if (state.failed) return;

						}
						break;

					default:
						goto loop178;
					}
				}

				loop178:
					;

				} finally { DebugExitSubRule(178); }

				DebugLocation(959, 26);
				PushFollow(Follow._variableDeclarationListNoIn_in_forStatementInitialiserPart5301);
				variableDeclarationListNoIn();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forStatementInitialiserPart", 60);
			LeaveRule("forStatementInitialiserPart", 60);
			LeaveRule_forStatementInitialiserPart();
			if (state.backtracking > 0) { Memoize(input, 60, forStatementInitialiserPart_StartIndex); }

		}
		DebugLocation(960, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatementInitialiserPart"); }
		return;

	}
	// $ANTLR end "forStatementInitialiserPart"

	partial void EnterRule_forInStatement();
	partial void LeaveRule_forInStatement();

	// $ANTLR start "forInStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:962:1: forInStatement : 'for' ( LineTerminator )* '(' ( LineTerminator )* forInStatementInitialiserPart ( LineTerminator )* 'in' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement ;
	[GrammarRule("forInStatement")]
	private void forInStatement()
	{
		EnterRule_forInStatement();
		EnterRule("forInStatement", 61);
		TraceIn("forInStatement", 61);
		int forInStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forInStatement");
		DebugLocation(962, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:2: ( 'for' ( LineTerminator )* '(' ( LineTerminator )* forInStatementInitialiserPart ( LineTerminator )* 'in' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:4: 'for' ( LineTerminator )* '(' ( LineTerminator )* forInStatementInitialiserPart ( LineTerminator )* 'in' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement
			{
			DebugLocation(963, 4);
			Match(input,94,Follow._94_in_forInStatement5313); if (state.failed) return;
			DebugLocation(963, 10);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:10: ( LineTerminator )*
			try { DebugEnterSubRule(180);
			while (true)
			{
				int alt180=2;
				try { DebugEnterDecision(180, false);
				int LA180_0 = input.LA(1);

				if ((LA180_0==LineTerminator))
				{
					alt180 = 1;
				}


				} finally { DebugExitDecision(180); }
				switch ( alt180 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:10: LineTerminator
					{
					DebugLocation(963, 10);
					Match(input,LineTerminator,Follow._LineTerminator_in_forInStatement5315); if (state.failed) return;

					}
					break;

				default:
					goto loop180;
				}
			}

			loop180:
				;

			} finally { DebugExitSubRule(180); }

			DebugLocation(963, 26);
			Match(input,42,Follow._42_in_forInStatement5318); if (state.failed) return;
			DebugLocation(963, 30);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:30: ( LineTerminator )*
			try { DebugEnterSubRule(181);
			while (true)
			{
				int alt181=2;
				try { DebugEnterDecision(181, false);
				int LA181_0 = input.LA(1);

				if ((LA181_0==LineTerminator))
				{
					alt181 = 1;
				}


				} finally { DebugExitDecision(181); }
				switch ( alt181 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:30: LineTerminator
					{
					DebugLocation(963, 30);
					Match(input,LineTerminator,Follow._LineTerminator_in_forInStatement5320); if (state.failed) return;

					}
					break;

				default:
					goto loop181;
				}
			}

			loop181:
				;

			} finally { DebugExitSubRule(181); }

			DebugLocation(963, 46);
			PushFollow(Follow._forInStatementInitialiserPart_in_forInStatement5323);
			forInStatementInitialiserPart();
			PopFollow();
			if (state.failed) return;
			DebugLocation(963, 76);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:76: ( LineTerminator )*
			try { DebugEnterSubRule(182);
			while (true)
			{
				int alt182=2;
				try { DebugEnterDecision(182, false);
				int LA182_0 = input.LA(1);

				if ((LA182_0==LineTerminator))
				{
					alt182 = 1;
				}


				} finally { DebugExitDecision(182); }
				switch ( alt182 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:76: LineTerminator
					{
					DebugLocation(963, 76);
					Match(input,LineTerminator,Follow._LineTerminator_in_forInStatement5325); if (state.failed) return;

					}
					break;

				default:
					goto loop182;
				}
			}

			loop182:
				;

			} finally { DebugExitSubRule(182); }

			DebugLocation(963, 92);
			Match(input,100,Follow._100_in_forInStatement5328); if (state.failed) return;
			DebugLocation(963, 97);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:97: ( LineTerminator )*
			try { DebugEnterSubRule(183);
			while (true)
			{
				int alt183=2;
				try { DebugEnterDecision(183, false);
				int LA183_0 = input.LA(1);

				if ((LA183_0==LineTerminator))
				{
					alt183 = 1;
				}


				} finally { DebugExitDecision(183); }
				switch ( alt183 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:97: LineTerminator
					{
					DebugLocation(963, 97);
					Match(input,LineTerminator,Follow._LineTerminator_in_forInStatement5330); if (state.failed) return;

					}
					break;

				default:
					goto loop183;
				}
			}

			loop183:
				;

			} finally { DebugExitSubRule(183); }

			DebugLocation(963, 113);
			PushFollow(Follow._expression_in_forInStatement5333);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(963, 124);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:124: ( LineTerminator )*
			try { DebugEnterSubRule(184);
			while (true)
			{
				int alt184=2;
				try { DebugEnterDecision(184, false);
				int LA184_0 = input.LA(1);

				if ((LA184_0==LineTerminator))
				{
					alt184 = 1;
				}


				} finally { DebugExitDecision(184); }
				switch ( alt184 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:124: LineTerminator
					{
					DebugLocation(963, 124);
					Match(input,LineTerminator,Follow._LineTerminator_in_forInStatement5335); if (state.failed) return;

					}
					break;

				default:
					goto loop184;
				}
			}

			loop184:
				;

			} finally { DebugExitSubRule(184); }

			DebugLocation(963, 140);
			Match(input,43,Follow._43_in_forInStatement5338); if (state.failed) return;
			DebugLocation(963, 144);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:144: ( LineTerminator )*
			try { DebugEnterSubRule(185);
			while (true)
			{
				int alt185=2;
				try { DebugEnterDecision(185, false);
				int LA185_0 = input.LA(1);

				if ((LA185_0==LineTerminator))
				{
					alt185 = 1;
				}


				} finally { DebugExitDecision(185); }
				switch ( alt185 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:963:144: LineTerminator
					{
					DebugLocation(963, 144);
					Match(input,LineTerminator,Follow._LineTerminator_in_forInStatement5340); if (state.failed) return;

					}
					break;

				default:
					goto loop185;
				}
			}

			loop185:
				;

			} finally { DebugExitSubRule(185); }

			DebugLocation(963, 160);
			PushFollow(Follow._statement_in_forInStatement5343);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forInStatement", 61);
			LeaveRule("forInStatement", 61);
			LeaveRule_forInStatement();
			if (state.backtracking > 0) { Memoize(input, 61, forInStatement_StartIndex); }

		}
		DebugLocation(964, 1);
		} finally { DebugExitRule(GrammarFileName, "forInStatement"); }
		return;

	}
	// $ANTLR end "forInStatement"

	partial void EnterRule_forInStatementInitialiserPart();
	partial void LeaveRule_forInStatementInitialiserPart();

	// $ANTLR start "forInStatementInitialiserPart"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:966:1: forInStatementInitialiserPart : ( leftHandSideExpression | 'var' ( LineTerminator )* variableDeclarationNoIn );
	[GrammarRule("forInStatementInitialiserPart")]
	private void forInStatementInitialiserPart()
	{
		EnterRule_forInStatementInitialiserPart();
		EnterRule("forInStatementInitialiserPart", 62);
		TraceIn("forInStatementInitialiserPart", 62);
		int forInStatementInitialiserPart_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forInStatementInitialiserPart");
		DebugLocation(966, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:967:2: ( leftHandSideExpression | 'var' ( LineTerminator )* variableDeclarationNoIn )
			int alt187=2;
			try { DebugEnterDecision(187, false);
			int LA187_0 = input.LA(1);

			if ((LA187_0==BooleanLiteral||LA187_0==Identifier||(LA187_0>=NullLiteral && LA187_0<=NumericLiteral)||LA187_0==StringLiteral||LA187_0==42||LA187_0==76||LA187_0==95||LA187_0==107||LA187_0==116||LA187_0==118||LA187_0==127))
			{
				alt187 = 1;
			}
			else if ((LA187_0==123))
			{
				alt187 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 187, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(187); }
			switch (alt187)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:967:4: leftHandSideExpression
				{
				DebugLocation(967, 4);
				PushFollow(Follow._leftHandSideExpression_in_forInStatementInitialiserPart5355);
				leftHandSideExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:968:4: 'var' ( LineTerminator )* variableDeclarationNoIn
				{
				DebugLocation(968, 4);
				Match(input,123,Follow._123_in_forInStatementInitialiserPart5360); if (state.failed) return;
				DebugLocation(968, 10);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:968:10: ( LineTerminator )*
				try { DebugEnterSubRule(186);
				while (true)
				{
					int alt186=2;
					try { DebugEnterDecision(186, false);
					int LA186_0 = input.LA(1);

					if ((LA186_0==LineTerminator))
					{
						alt186 = 1;
					}


					} finally { DebugExitDecision(186); }
					switch ( alt186 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:968:10: LineTerminator
						{
						DebugLocation(968, 10);
						Match(input,LineTerminator,Follow._LineTerminator_in_forInStatementInitialiserPart5362); if (state.failed) return;

						}
						break;

					default:
						goto loop186;
					}
				}

				loop186:
					;

				} finally { DebugExitSubRule(186); }

				DebugLocation(968, 26);
				PushFollow(Follow._variableDeclarationNoIn_in_forInStatementInitialiserPart5365);
				variableDeclarationNoIn();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forInStatementInitialiserPart", 62);
			LeaveRule("forInStatementInitialiserPart", 62);
			LeaveRule_forInStatementInitialiserPart();
			if (state.backtracking > 0) { Memoize(input, 62, forInStatementInitialiserPart_StartIndex); }

		}
		DebugLocation(969, 1);
		} finally { DebugExitRule(GrammarFileName, "forInStatementInitialiserPart"); }
		return;

	}
	// $ANTLR end "forInStatementInitialiserPart"

	partial void EnterRule_continueStatement();
	partial void LeaveRule_continueStatement();

	// $ANTLR start "continueStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:971:1: continueStatement : 'continue' ( Identifier )? ( ( LineTerminator )* | ';' ) ;
	[GrammarRule("continueStatement")]
	private void continueStatement()
	{
		EnterRule_continueStatement();
		EnterRule("continueStatement", 63);
		TraceIn("continueStatement", 63);
		int continueStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "continueStatement");
		DebugLocation(971, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:2: ( 'continue' ( Identifier )? ( ( LineTerminator )* | ';' ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:4: 'continue' ( Identifier )? ( ( LineTerminator )* | ';' )
			{
			DebugLocation(972, 4);
			Match(input,86,Follow._86_in_continueStatement5376); if (state.failed) return;
			DebugLocation(972, 15);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:15: ( Identifier )?
			int alt188=2;
			try { DebugEnterSubRule(188);
			try { DebugEnterDecision(188, false);
			int LA188_0 = input.LA(1);

			if ((LA188_0==Identifier))
			{
				int LA188_1 = input.LA(2);

				if ((EvaluatePredicate(synpred264_AS3_fragment)))
				{
					alt188 = 1;
				}
			}
			} finally { DebugExitDecision(188); }
			switch (alt188)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:15: Identifier
				{
				DebugLocation(972, 15);
				Match(input,Identifier,Follow._Identifier_in_continueStatement5378); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(188); }

			DebugLocation(972, 27);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:27: ( ( LineTerminator )* | ';' )
			int alt190=2;
			try { DebugEnterSubRule(190);
			try { DebugEnterDecision(190, false);
			int LA190_0 = input.LA(1);

			if ((LA190_0==EOF||LA190_0==BooleanLiteral||LA190_0==Identifier||LA190_0==LineTerminator||(LA190_0>=NullLiteral && LA190_0<=NumericLiteral)||LA190_0==StringLiteral||LA190_0==34||LA190_0==42||(LA190_0>=46 && LA190_0<=47)||(LA190_0>=50 && LA190_0<=51)||LA190_0==76||(LA190_0>=80 && LA190_0<=82)||(LA190_0>=85 && LA190_0<=90)||LA190_0==92||(LA190_0>=94 && LA190_0<=95)||LA190_0==97||LA190_0==99||LA190_0==101||LA190_0==104||(LA190_0>=107 && LA190_0<=108)||(LA190_0>=110 && LA190_0<=113)||(LA190_0>=115 && LA190_0<=127)||(LA190_0>=131 && LA190_0<=132)))
			{
				alt190 = 1;
			}
			else if ((LA190_0==61))
			{
				int LA190_2 = input.LA(2);

				if ((EvaluatePredicate(synpred266_AS3_fragment)))
				{
					alt190 = 1;
				}
				else if ((true))
				{
					alt190 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 190, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 190, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(190); }
			switch (alt190)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:28: ( LineTerminator )*
				{
				DebugLocation(972, 28);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:28: ( LineTerminator )*
				try { DebugEnterSubRule(189);
				while (true)
				{
					int alt189=2;
					try { DebugEnterDecision(189, false);
					int LA189_0 = input.LA(1);

					if ((LA189_0==LineTerminator))
					{
						int LA189_1 = input.LA(2);

						if ((EvaluatePredicate(synpred265_AS3_fragment)))
						{
							alt189 = 1;
						}


					}


					} finally { DebugExitDecision(189); }
					switch ( alt189 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:28: LineTerminator
						{
						DebugLocation(972, 28);
						Match(input,LineTerminator,Follow._LineTerminator_in_continueStatement5382); if (state.failed) return;

						}
						break;

					default:
						goto loop189;
					}
				}

				loop189:
					;

				} finally { DebugExitSubRule(189); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:46: ';'
				{
				DebugLocation(972, 46);
				Match(input,61,Follow._61_in_continueStatement5387); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(190); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("continueStatement", 63);
			LeaveRule("continueStatement", 63);
			LeaveRule_continueStatement();
			if (state.backtracking > 0) { Memoize(input, 63, continueStatement_StartIndex); }

		}
		DebugLocation(973, 1);
		} finally { DebugExitRule(GrammarFileName, "continueStatement"); }
		return;

	}
	// $ANTLR end "continueStatement"

	partial void EnterRule_breakStatement();
	partial void LeaveRule_breakStatement();

	// $ANTLR start "breakStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:975:1: breakStatement : 'break' ( Identifier )? ( ( LineTerminator )* | ';' ) ;
	[GrammarRule("breakStatement")]
	private void breakStatement()
	{
		EnterRule_breakStatement();
		EnterRule("breakStatement", 64);
		TraceIn("breakStatement", 64);
		int breakStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "breakStatement");
		DebugLocation(975, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:2: ( 'break' ( Identifier )? ( ( LineTerminator )* | ';' ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:4: 'break' ( Identifier )? ( ( LineTerminator )* | ';' )
			{
			DebugLocation(976, 4);
			Match(input,81,Follow._81_in_breakStatement5399); if (state.failed) return;
			DebugLocation(976, 12);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:12: ( Identifier )?
			int alt191=2;
			try { DebugEnterSubRule(191);
			try { DebugEnterDecision(191, false);
			int LA191_0 = input.LA(1);

			if ((LA191_0==Identifier))
			{
				int LA191_1 = input.LA(2);

				if ((EvaluatePredicate(synpred267_AS3_fragment)))
				{
					alt191 = 1;
				}
			}
			} finally { DebugExitDecision(191); }
			switch (alt191)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:12: Identifier
				{
				DebugLocation(976, 12);
				Match(input,Identifier,Follow._Identifier_in_breakStatement5401); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(191); }

			DebugLocation(976, 24);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:24: ( ( LineTerminator )* | ';' )
			int alt193=2;
			try { DebugEnterSubRule(193);
			try { DebugEnterDecision(193, false);
			int LA193_0 = input.LA(1);

			if ((LA193_0==EOF||LA193_0==BooleanLiteral||LA193_0==Identifier||LA193_0==LineTerminator||(LA193_0>=NullLiteral && LA193_0<=NumericLiteral)||LA193_0==StringLiteral||LA193_0==34||LA193_0==42||(LA193_0>=46 && LA193_0<=47)||(LA193_0>=50 && LA193_0<=51)||LA193_0==76||(LA193_0>=80 && LA193_0<=82)||(LA193_0>=85 && LA193_0<=90)||LA193_0==92||(LA193_0>=94 && LA193_0<=95)||LA193_0==97||LA193_0==99||LA193_0==101||LA193_0==104||(LA193_0>=107 && LA193_0<=108)||(LA193_0>=110 && LA193_0<=113)||(LA193_0>=115 && LA193_0<=127)||(LA193_0>=131 && LA193_0<=132)))
			{
				alt193 = 1;
			}
			else if ((LA193_0==61))
			{
				int LA193_2 = input.LA(2);

				if ((EvaluatePredicate(synpred269_AS3_fragment)))
				{
					alt193 = 1;
				}
				else if ((true))
				{
					alt193 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 193, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 193, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(193); }
			switch (alt193)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:25: ( LineTerminator )*
				{
				DebugLocation(976, 25);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:25: ( LineTerminator )*
				try { DebugEnterSubRule(192);
				while (true)
				{
					int alt192=2;
					try { DebugEnterDecision(192, false);
					int LA192_0 = input.LA(1);

					if ((LA192_0==LineTerminator))
					{
						int LA192_1 = input.LA(2);

						if ((EvaluatePredicate(synpred268_AS3_fragment)))
						{
							alt192 = 1;
						}


					}


					} finally { DebugExitDecision(192); }
					switch ( alt192 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:25: LineTerminator
						{
						DebugLocation(976, 25);
						Match(input,LineTerminator,Follow._LineTerminator_in_breakStatement5405); if (state.failed) return;

						}
						break;

					default:
						goto loop192;
					}
				}

				loop192:
					;

				} finally { DebugExitSubRule(192); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:43: ';'
				{
				DebugLocation(976, 43);
				Match(input,61,Follow._61_in_breakStatement5410); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(193); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("breakStatement", 64);
			LeaveRule("breakStatement", 64);
			LeaveRule_breakStatement();
			if (state.backtracking > 0) { Memoize(input, 64, breakStatement_StartIndex); }

		}
		DebugLocation(977, 1);
		} finally { DebugExitRule(GrammarFileName, "breakStatement"); }
		return;

	}
	// $ANTLR end "breakStatement"

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();

	// $ANTLR start "returnStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:979:1: returnStatement : 'return' ( expression )? ( ( LineTerminator )* | ';' ) ;
	[GrammarRule("returnStatement")]
	private void returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 65);
		TraceIn("returnStatement", 65);
		int returnStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(979, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:2: ( 'return' ( expression )? ( ( LineTerminator )* | ';' ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:4: 'return' ( expression )? ( ( LineTerminator )* | ';' )
			{
			DebugLocation(980, 4);
			Match(input,113,Follow._113_in_returnStatement5422); if (state.failed) return;
			DebugLocation(980, 13);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:13: ( expression )?
			int alt194=2;
			try { DebugEnterSubRule(194);
			try { DebugEnterDecision(194, false);
			switch (input.LA(1))
			{
			case 118:
				{
				int LA194_1 = input.LA(2);

				if ((EvaluatePredicate(synpred270_AS3_fragment)))
				{
					alt194 = 1;
				}
				}
				break;
			case 116:
				{
				int LA194_2 = input.LA(2);

				if ((EvaluatePredicate(synpred270_AS3_fragment)))
				{
					alt194 = 1;
				}
				}
				break;
			case Identifier:
				{
				int LA194_3 = input.LA(2);

				if ((EvaluatePredicate(synpred270_AS3_fragment)))
				{
					alt194 = 1;
				}
				}
				break;
			case BooleanLiteral:
			case NullLiteral:
			case NumericLiteral:
			case StringLiteral:
				{
				int LA194_4 = input.LA(2);

				if ((EvaluatePredicate(synpred270_AS3_fragment)))
				{
					alt194 = 1;
				}
				}
				break;
			case 76:
				{
				int LA194_5 = input.LA(2);

				if ((EvaluatePredicate(synpred270_AS3_fragment)))
				{
					alt194 = 1;
				}
				}
				break;
			case 127:
				{
				int LA194_6 = input.LA(2);

				if ((EvaluatePredicate(synpred270_AS3_fragment)))
				{
					alt194 = 1;
				}
				}
				break;
			case 42:
				{
				int LA194_7 = input.LA(2);

				if ((EvaluatePredicate(synpred270_AS3_fragment)))
				{
					alt194 = 1;
				}
				}
				break;
			case 95:
				{
				int LA194_8 = input.LA(2);

				if ((EvaluatePredicate(synpred270_AS3_fragment)))
				{
					alt194 = 1;
				}
				}
				break;
			case 107:
				{
				int LA194_9 = input.LA(2);

				if ((EvaluatePredicate(synpred270_AS3_fragment)))
				{
					alt194 = 1;
				}
				}
				break;
			case 34:
			case 46:
			case 47:
			case 50:
			case 51:
			case 80:
			case 88:
			case 121:
			case 124:
			case 132:
				{
				int LA194_10 = input.LA(2);

				if ((EvaluatePredicate(synpred270_AS3_fragment)))
				{
					alt194 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(194); }
			switch (alt194)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:13: expression
				{
				DebugLocation(980, 13);
				PushFollow(Follow._expression_in_returnStatement5424);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(194); }

			DebugLocation(980, 25);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:25: ( ( LineTerminator )* | ';' )
			int alt196=2;
			try { DebugEnterSubRule(196);
			try { DebugEnterDecision(196, false);
			int LA196_0 = input.LA(1);

			if ((LA196_0==EOF||LA196_0==BooleanLiteral||LA196_0==Identifier||LA196_0==LineTerminator||(LA196_0>=NullLiteral && LA196_0<=NumericLiteral)||LA196_0==StringLiteral||LA196_0==34||LA196_0==42||(LA196_0>=46 && LA196_0<=47)||(LA196_0>=50 && LA196_0<=51)||LA196_0==76||(LA196_0>=80 && LA196_0<=82)||(LA196_0>=85 && LA196_0<=90)||LA196_0==92||(LA196_0>=94 && LA196_0<=95)||LA196_0==97||LA196_0==99||LA196_0==101||LA196_0==104||(LA196_0>=107 && LA196_0<=108)||(LA196_0>=110 && LA196_0<=113)||(LA196_0>=115 && LA196_0<=127)||(LA196_0>=131 && LA196_0<=132)))
			{
				alt196 = 1;
			}
			else if ((LA196_0==61))
			{
				int LA196_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_AS3_fragment)))
				{
					alt196 = 1;
				}
				else if ((true))
				{
					alt196 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 196, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 196, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(196); }
			switch (alt196)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:26: ( LineTerminator )*
				{
				DebugLocation(980, 26);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:26: ( LineTerminator )*
				try { DebugEnterSubRule(195);
				while (true)
				{
					int alt195=2;
					try { DebugEnterDecision(195, false);
					int LA195_0 = input.LA(1);

					if ((LA195_0==LineTerminator))
					{
						int LA195_1 = input.LA(2);

						if ((EvaluatePredicate(synpred271_AS3_fragment)))
						{
							alt195 = 1;
						}


					}


					} finally { DebugExitDecision(195); }
					switch ( alt195 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:26: LineTerminator
						{
						DebugLocation(980, 26);
						Match(input,LineTerminator,Follow._LineTerminator_in_returnStatement5428); if (state.failed) return;

						}
						break;

					default:
						goto loop195;
					}
				}

				loop195:
					;

				} finally { DebugExitSubRule(195); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:44: ';'
				{
				DebugLocation(980, 44);
				Match(input,61,Follow._61_in_returnStatement5433); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(196); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("returnStatement", 65);
			LeaveRule("returnStatement", 65);
			LeaveRule_returnStatement();
			if (state.backtracking > 0) { Memoize(input, 65, returnStatement_StartIndex); }

		}
		DebugLocation(981, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return;

	}
	// $ANTLR end "returnStatement"

	partial void EnterRule_withStatement();
	partial void LeaveRule_withStatement();

	// $ANTLR start "withStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:983:1: withStatement : 'with' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement ;
	[GrammarRule("withStatement")]
	private void withStatement()
	{
		EnterRule_withStatement();
		EnterRule("withStatement", 66);
		TraceIn("withStatement", 66);
		int withStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "withStatement");
		DebugLocation(983, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:984:2: ( 'with' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:984:4: 'with' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* statement
			{
			DebugLocation(984, 4);
			Match(input,126,Follow._126_in_withStatement5446); if (state.failed) return;
			DebugLocation(984, 11);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:984:11: ( LineTerminator )*
			try { DebugEnterSubRule(197);
			while (true)
			{
				int alt197=2;
				try { DebugEnterDecision(197, false);
				int LA197_0 = input.LA(1);

				if ((LA197_0==LineTerminator))
				{
					alt197 = 1;
				}


				} finally { DebugExitDecision(197); }
				switch ( alt197 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:984:11: LineTerminator
					{
					DebugLocation(984, 11);
					Match(input,LineTerminator,Follow._LineTerminator_in_withStatement5448); if (state.failed) return;

					}
					break;

				default:
					goto loop197;
				}
			}

			loop197:
				;

			} finally { DebugExitSubRule(197); }

			DebugLocation(984, 27);
			Match(input,42,Follow._42_in_withStatement5451); if (state.failed) return;
			DebugLocation(984, 31);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:984:31: ( LineTerminator )*
			try { DebugEnterSubRule(198);
			while (true)
			{
				int alt198=2;
				try { DebugEnterDecision(198, false);
				int LA198_0 = input.LA(1);

				if ((LA198_0==LineTerminator))
				{
					alt198 = 1;
				}


				} finally { DebugExitDecision(198); }
				switch ( alt198 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:984:31: LineTerminator
					{
					DebugLocation(984, 31);
					Match(input,LineTerminator,Follow._LineTerminator_in_withStatement5453); if (state.failed) return;

					}
					break;

				default:
					goto loop198;
				}
			}

			loop198:
				;

			} finally { DebugExitSubRule(198); }

			DebugLocation(984, 47);
			PushFollow(Follow._expression_in_withStatement5456);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(984, 58);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:984:58: ( LineTerminator )*
			try { DebugEnterSubRule(199);
			while (true)
			{
				int alt199=2;
				try { DebugEnterDecision(199, false);
				int LA199_0 = input.LA(1);

				if ((LA199_0==LineTerminator))
				{
					alt199 = 1;
				}


				} finally { DebugExitDecision(199); }
				switch ( alt199 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:984:58: LineTerminator
					{
					DebugLocation(984, 58);
					Match(input,LineTerminator,Follow._LineTerminator_in_withStatement5458); if (state.failed) return;

					}
					break;

				default:
					goto loop199;
				}
			}

			loop199:
				;

			} finally { DebugExitSubRule(199); }

			DebugLocation(984, 74);
			Match(input,43,Follow._43_in_withStatement5461); if (state.failed) return;
			DebugLocation(984, 78);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:984:78: ( LineTerminator )*
			try { DebugEnterSubRule(200);
			while (true)
			{
				int alt200=2;
				try { DebugEnterDecision(200, false);
				int LA200_0 = input.LA(1);

				if ((LA200_0==LineTerminator))
				{
					alt200 = 1;
				}


				} finally { DebugExitDecision(200); }
				switch ( alt200 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:984:78: LineTerminator
					{
					DebugLocation(984, 78);
					Match(input,LineTerminator,Follow._LineTerminator_in_withStatement5463); if (state.failed) return;

					}
					break;

				default:
					goto loop200;
				}
			}

			loop200:
				;

			} finally { DebugExitSubRule(200); }

			DebugLocation(984, 94);
			PushFollow(Follow._statement_in_withStatement5466);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("withStatement", 66);
			LeaveRule("withStatement", 66);
			LeaveRule_withStatement();
			if (state.backtracking > 0) { Memoize(input, 66, withStatement_StartIndex); }

		}
		DebugLocation(985, 1);
		} finally { DebugExitRule(GrammarFileName, "withStatement"); }
		return;

	}
	// $ANTLR end "withStatement"

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();

	// $ANTLR start "switchStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:987:1: switchStatement : 'switch' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* caseBlock ;
	[GrammarRule("switchStatement")]
	private void switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 67);
		TraceIn("switchStatement", 67);
		int switchStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(987, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:988:2: ( 'switch' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* caseBlock )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:988:4: 'switch' ( LineTerminator )* '(' ( LineTerminator )* expression ( LineTerminator )* ')' ( LineTerminator )* caseBlock
			{
			DebugLocation(988, 4);
			Match(input,117,Follow._117_in_switchStatement5478); if (state.failed) return;
			DebugLocation(988, 13);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:988:13: ( LineTerminator )*
			try { DebugEnterSubRule(201);
			while (true)
			{
				int alt201=2;
				try { DebugEnterDecision(201, false);
				int LA201_0 = input.LA(1);

				if ((LA201_0==LineTerminator))
				{
					alt201 = 1;
				}


				} finally { DebugExitDecision(201); }
				switch ( alt201 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:988:13: LineTerminator
					{
					DebugLocation(988, 13);
					Match(input,LineTerminator,Follow._LineTerminator_in_switchStatement5480); if (state.failed) return;

					}
					break;

				default:
					goto loop201;
				}
			}

			loop201:
				;

			} finally { DebugExitSubRule(201); }

			DebugLocation(988, 29);
			Match(input,42,Follow._42_in_switchStatement5483); if (state.failed) return;
			DebugLocation(988, 33);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:988:33: ( LineTerminator )*
			try { DebugEnterSubRule(202);
			while (true)
			{
				int alt202=2;
				try { DebugEnterDecision(202, false);
				int LA202_0 = input.LA(1);

				if ((LA202_0==LineTerminator))
				{
					alt202 = 1;
				}


				} finally { DebugExitDecision(202); }
				switch ( alt202 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:988:33: LineTerminator
					{
					DebugLocation(988, 33);
					Match(input,LineTerminator,Follow._LineTerminator_in_switchStatement5485); if (state.failed) return;

					}
					break;

				default:
					goto loop202;
				}
			}

			loop202:
				;

			} finally { DebugExitSubRule(202); }

			DebugLocation(988, 49);
			PushFollow(Follow._expression_in_switchStatement5488);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(988, 60);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:988:60: ( LineTerminator )*
			try { DebugEnterSubRule(203);
			while (true)
			{
				int alt203=2;
				try { DebugEnterDecision(203, false);
				int LA203_0 = input.LA(1);

				if ((LA203_0==LineTerminator))
				{
					alt203 = 1;
				}


				} finally { DebugExitDecision(203); }
				switch ( alt203 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:988:60: LineTerminator
					{
					DebugLocation(988, 60);
					Match(input,LineTerminator,Follow._LineTerminator_in_switchStatement5490); if (state.failed) return;

					}
					break;

				default:
					goto loop203;
				}
			}

			loop203:
				;

			} finally { DebugExitSubRule(203); }

			DebugLocation(988, 76);
			Match(input,43,Follow._43_in_switchStatement5493); if (state.failed) return;
			DebugLocation(988, 80);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:988:80: ( LineTerminator )*
			try { DebugEnterSubRule(204);
			while (true)
			{
				int alt204=2;
				try { DebugEnterDecision(204, false);
				int LA204_0 = input.LA(1);

				if ((LA204_0==LineTerminator))
				{
					alt204 = 1;
				}


				} finally { DebugExitDecision(204); }
				switch ( alt204 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:988:80: LineTerminator
					{
					DebugLocation(988, 80);
					Match(input,LineTerminator,Follow._LineTerminator_in_switchStatement5495); if (state.failed) return;

					}
					break;

				default:
					goto loop204;
				}
			}

			loop204:
				;

			} finally { DebugExitSubRule(204); }

			DebugLocation(988, 96);
			PushFollow(Follow._caseBlock_in_switchStatement5498);
			caseBlock();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchStatement", 67);
			LeaveRule("switchStatement", 67);
			LeaveRule_switchStatement();
			if (state.backtracking > 0) { Memoize(input, 67, switchStatement_StartIndex); }

		}
		DebugLocation(989, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return;

	}
	// $ANTLR end "switchStatement"

	partial void EnterRule_caseBlock();
	partial void LeaveRule_caseBlock();

	// $ANTLR start "caseBlock"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:991:1: caseBlock : '{' ( ( LineTerminator )* caseClause )* ( ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )* )? ( LineTerminator )* '}' ;
	[GrammarRule("caseBlock")]
	private void caseBlock()
	{
		EnterRule_caseBlock();
		EnterRule("caseBlock", 68);
		TraceIn("caseBlock", 68);
		int caseBlock_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "caseBlock");
		DebugLocation(991, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:2: ( '{' ( ( LineTerminator )* caseClause )* ( ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )* )? ( LineTerminator )* '}' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:4: '{' ( ( LineTerminator )* caseClause )* ( ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )* )? ( LineTerminator )* '}'
			{
			DebugLocation(992, 4);
			Match(input,127,Follow._127_in_caseBlock5510); if (state.failed) return;
			DebugLocation(992, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:8: ( ( LineTerminator )* caseClause )*
			try { DebugEnterSubRule(206);
			while (true)
			{
				int alt206=2;
				try { DebugEnterDecision(206, false);
				try
				{
					alt206 = dfa206.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(206); }
				switch ( alt206 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:9: ( LineTerminator )* caseClause
					{
					DebugLocation(992, 9);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:9: ( LineTerminator )*
					try { DebugEnterSubRule(205);
					while (true)
					{
						int alt205=2;
						try { DebugEnterDecision(205, false);
						int LA205_0 = input.LA(1);

						if ((LA205_0==LineTerminator))
						{
							alt205 = 1;
						}


						} finally { DebugExitDecision(205); }
						switch ( alt205 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:9: LineTerminator
							{
							DebugLocation(992, 9);
							Match(input,LineTerminator,Follow._LineTerminator_in_caseBlock5513); if (state.failed) return;

							}
							break;

						default:
							goto loop205;
						}
					}

					loop205:
						;

					} finally { DebugExitSubRule(205); }

					DebugLocation(992, 25);
					PushFollow(Follow._caseClause_in_caseBlock5516);
					caseClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop206;
				}
			}

			loop206:
				;

			} finally { DebugExitSubRule(206); }

			DebugLocation(992, 38);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:38: ( ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )* )?
			int alt210=2;
			try { DebugEnterSubRule(210);
			try { DebugEnterDecision(210, false);
			try
			{
				alt210 = dfa210.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(210); }
			switch (alt210)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:39: ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )*
				{
				DebugLocation(992, 39);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:39: ( LineTerminator )*
				try { DebugEnterSubRule(207);
				while (true)
				{
					int alt207=2;
					try { DebugEnterDecision(207, false);
					int LA207_0 = input.LA(1);

					if ((LA207_0==LineTerminator))
					{
						alt207 = 1;
					}


					} finally { DebugExitDecision(207); }
					switch ( alt207 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:39: LineTerminator
						{
						DebugLocation(992, 39);
						Match(input,LineTerminator,Follow._LineTerminator_in_caseBlock5521); if (state.failed) return;

						}
						break;

					default:
						goto loop207;
					}
				}

				loop207:
					;

				} finally { DebugExitSubRule(207); }

				DebugLocation(992, 55);
				PushFollow(Follow._defaultClause_in_caseBlock5524);
				defaultClause();
				PopFollow();
				if (state.failed) return;
				DebugLocation(992, 69);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:69: ( ( LineTerminator )* caseClause )*
				try { DebugEnterSubRule(209);
				while (true)
				{
					int alt209=2;
					try { DebugEnterDecision(209, false);
					try
					{
						alt209 = dfa209.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(209); }
					switch ( alt209 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:70: ( LineTerminator )* caseClause
						{
						DebugLocation(992, 70);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:70: ( LineTerminator )*
						try { DebugEnterSubRule(208);
						while (true)
						{
							int alt208=2;
							try { DebugEnterDecision(208, false);
							int LA208_0 = input.LA(1);

							if ((LA208_0==LineTerminator))
							{
								alt208 = 1;
							}


							} finally { DebugExitDecision(208); }
							switch ( alt208 )
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:70: LineTerminator
								{
								DebugLocation(992, 70);
								Match(input,LineTerminator,Follow._LineTerminator_in_caseBlock5527); if (state.failed) return;

								}
								break;

							default:
								goto loop208;
							}
						}

						loop208:
							;

						} finally { DebugExitSubRule(208); }

						DebugLocation(992, 86);
						PushFollow(Follow._caseClause_in_caseBlock5530);
						caseClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop209;
					}
				}

				loop209:
					;

				} finally { DebugExitSubRule(209); }


				}
				break;

			}
			} finally { DebugExitSubRule(210); }

			DebugLocation(992, 101);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:101: ( LineTerminator )*
			try { DebugEnterSubRule(211);
			while (true)
			{
				int alt211=2;
				try { DebugEnterDecision(211, false);
				int LA211_0 = input.LA(1);

				if ((LA211_0==LineTerminator))
				{
					alt211 = 1;
				}


				} finally { DebugExitDecision(211); }
				switch ( alt211 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:992:101: LineTerminator
					{
					DebugLocation(992, 101);
					Match(input,LineTerminator,Follow._LineTerminator_in_caseBlock5536); if (state.failed) return;

					}
					break;

				default:
					goto loop211;
				}
			}

			loop211:
				;

			} finally { DebugExitSubRule(211); }

			DebugLocation(992, 117);
			Match(input,131,Follow._131_in_caseBlock5539); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("caseBlock", 68);
			LeaveRule("caseBlock", 68);
			LeaveRule_caseBlock();
			if (state.backtracking > 0) { Memoize(input, 68, caseBlock_StartIndex); }

		}
		DebugLocation(993, 1);
		} finally { DebugExitRule(GrammarFileName, "caseBlock"); }
		return;

	}
	// $ANTLR end "caseBlock"

	partial void EnterRule_caseClause();
	partial void LeaveRule_caseClause();

	// $ANTLR start "caseClause"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:995:1: caseClause : 'case' ( LineTerminator )* expression ( LineTerminator )* ':' ( LineTerminator )* ( statementList )? ;
	[GrammarRule("caseClause")]
	private void caseClause()
	{
		EnterRule_caseClause();
		EnterRule("caseClause", 69);
		TraceIn("caseClause", 69);
		int caseClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "caseClause");
		DebugLocation(995, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:2: ( 'case' ( LineTerminator )* expression ( LineTerminator )* ':' ( LineTerminator )* ( statementList )? )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:4: 'case' ( LineTerminator )* expression ( LineTerminator )* ':' ( LineTerminator )* ( statementList )?
			{
			DebugLocation(996, 4);
			Match(input,82,Follow._82_in_caseClause5550); if (state.failed) return;
			DebugLocation(996, 11);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:11: ( LineTerminator )*
			try { DebugEnterSubRule(212);
			while (true)
			{
				int alt212=2;
				try { DebugEnterDecision(212, false);
				int LA212_0 = input.LA(1);

				if ((LA212_0==LineTerminator))
				{
					alt212 = 1;
				}


				} finally { DebugExitDecision(212); }
				switch ( alt212 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:11: LineTerminator
					{
					DebugLocation(996, 11);
					Match(input,LineTerminator,Follow._LineTerminator_in_caseClause5552); if (state.failed) return;

					}
					break;

				default:
					goto loop212;
				}
			}

			loop212:
				;

			} finally { DebugExitSubRule(212); }

			DebugLocation(996, 27);
			PushFollow(Follow._expression_in_caseClause5555);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(996, 38);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:38: ( LineTerminator )*
			try { DebugEnterSubRule(213);
			while (true)
			{
				int alt213=2;
				try { DebugEnterDecision(213, false);
				int LA213_0 = input.LA(1);

				if ((LA213_0==LineTerminator))
				{
					alt213 = 1;
				}


				} finally { DebugExitDecision(213); }
				switch ( alt213 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:38: LineTerminator
					{
					DebugLocation(996, 38);
					Match(input,LineTerminator,Follow._LineTerminator_in_caseClause5557); if (state.failed) return;

					}
					break;

				default:
					goto loop213;
				}
			}

			loop213:
				;

			} finally { DebugExitSubRule(213); }

			DebugLocation(996, 54);
			Match(input,59,Follow._59_in_caseClause5560); if (state.failed) return;
			DebugLocation(996, 58);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:58: ( LineTerminator )*
			try { DebugEnterSubRule(214);
			while (true)
			{
				int alt214=2;
				try { DebugEnterDecision(214, false);
				int LA214_0 = input.LA(1);

				if ((LA214_0==LineTerminator))
				{
					int LA214_1 = input.LA(2);

					if ((EvaluatePredicate(synpred290_AS3_fragment)))
					{
						alt214 = 1;
					}


				}


				} finally { DebugExitDecision(214); }
				switch ( alt214 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:58: LineTerminator
					{
					DebugLocation(996, 58);
					Match(input,LineTerminator,Follow._LineTerminator_in_caseClause5562); if (state.failed) return;

					}
					break;

				default:
					goto loop214;
				}
			}

			loop214:
				;

			} finally { DebugExitSubRule(214); }

			DebugLocation(996, 74);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:74: ( statementList )?
			int alt215=2;
			try { DebugEnterSubRule(215);
			try { DebugEnterDecision(215, false);
			switch (input.LA(1))
			{
			case LineTerminator:
				{
				int LA215_1 = input.LA(2);

				if ((EvaluatePredicate(synpred291_AS3_fragment)))
				{
					alt215 = 1;
				}
				}
				break;
			case BooleanLiteral:
			case Identifier:
			case NullLiteral:
			case NumericLiteral:
			case StringLiteral:
			case 34:
			case 42:
			case 46:
			case 47:
			case 50:
			case 51:
			case 61:
			case 76:
			case 80:
			case 81:
			case 85:
			case 86:
			case 88:
			case 89:
			case 94:
			case 95:
			case 97:
			case 99:
			case 101:
			case 107:
			case 113:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 132:
				{
				alt215 = 1;
				}
				break;
			case 87:
				{
				int LA215_3 = input.LA(2);

				if ((EvaluatePredicate(synpred291_AS3_fragment)))
				{
					alt215 = 1;
				}
				}
				break;
			case 131:
				{
				int LA215_4 = input.LA(2);

				if ((EvaluatePredicate(synpred291_AS3_fragment)))
				{
					alt215 = 1;
				}
				}
				break;
			case 82:
				{
				int LA215_5 = input.LA(2);

				if ((EvaluatePredicate(synpred291_AS3_fragment)))
				{
					alt215 = 1;
				}
				}
				break;
			case EOF:
				{
				int LA215_6 = input.LA(2);

				if ((EvaluatePredicate(synpred291_AS3_fragment)))
				{
					alt215 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(215); }
			switch (alt215)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:74: statementList
				{
				DebugLocation(996, 74);
				PushFollow(Follow._statementList_in_caseClause5565);
				statementList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(215); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("caseClause", 69);
			LeaveRule("caseClause", 69);
			LeaveRule_caseClause();
			if (state.backtracking > 0) { Memoize(input, 69, caseClause_StartIndex); }

		}
		DebugLocation(997, 1);
		} finally { DebugExitRule(GrammarFileName, "caseClause"); }
		return;

	}
	// $ANTLR end "caseClause"

	partial void EnterRule_defaultClause();
	partial void LeaveRule_defaultClause();

	// $ANTLR start "defaultClause"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:999:1: defaultClause : 'default' ( LineTerminator )* ':' ( LineTerminator )* ( statementList )? ;
	[GrammarRule("defaultClause")]
	private void defaultClause()
	{
		EnterRule_defaultClause();
		EnterRule("defaultClause", 70);
		TraceIn("defaultClause", 70);
		int defaultClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "defaultClause");
		DebugLocation(999, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1000:2: ( 'default' ( LineTerminator )* ':' ( LineTerminator )* ( statementList )? )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1000:4: 'default' ( LineTerminator )* ':' ( LineTerminator )* ( statementList )?
			{
			DebugLocation(1000, 4);
			Match(input,87,Follow._87_in_defaultClause5578); if (state.failed) return;
			DebugLocation(1000, 14);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1000:14: ( LineTerminator )*
			try { DebugEnterSubRule(216);
			while (true)
			{
				int alt216=2;
				try { DebugEnterDecision(216, false);
				int LA216_0 = input.LA(1);

				if ((LA216_0==LineTerminator))
				{
					alt216 = 1;
				}


				} finally { DebugExitDecision(216); }
				switch ( alt216 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1000:14: LineTerminator
					{
					DebugLocation(1000, 14);
					Match(input,LineTerminator,Follow._LineTerminator_in_defaultClause5580); if (state.failed) return;

					}
					break;

				default:
					goto loop216;
				}
			}

			loop216:
				;

			} finally { DebugExitSubRule(216); }

			DebugLocation(1000, 30);
			Match(input,59,Follow._59_in_defaultClause5583); if (state.failed) return;
			DebugLocation(1000, 34);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1000:34: ( LineTerminator )*
			try { DebugEnterSubRule(217);
			while (true)
			{
				int alt217=2;
				try { DebugEnterDecision(217, false);
				int LA217_0 = input.LA(1);

				if ((LA217_0==LineTerminator))
				{
					int LA217_1 = input.LA(2);

					if ((EvaluatePredicate(synpred293_AS3_fragment)))
					{
						alt217 = 1;
					}


				}


				} finally { DebugExitDecision(217); }
				switch ( alt217 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1000:34: LineTerminator
					{
					DebugLocation(1000, 34);
					Match(input,LineTerminator,Follow._LineTerminator_in_defaultClause5585); if (state.failed) return;

					}
					break;

				default:
					goto loop217;
				}
			}

			loop217:
				;

			} finally { DebugExitSubRule(217); }

			DebugLocation(1000, 50);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1000:50: ( statementList )?
			int alt218=2;
			try { DebugEnterSubRule(218);
			try { DebugEnterDecision(218, false);
			switch (input.LA(1))
			{
			case LineTerminator:
				{
				int LA218_1 = input.LA(2);

				if ((EvaluatePredicate(synpred294_AS3_fragment)))
				{
					alt218 = 1;
				}
				}
				break;
			case BooleanLiteral:
			case Identifier:
			case NullLiteral:
			case NumericLiteral:
			case StringLiteral:
			case 34:
			case 42:
			case 46:
			case 47:
			case 50:
			case 51:
			case 61:
			case 76:
			case 80:
			case 81:
			case 85:
			case 86:
			case 88:
			case 89:
			case 94:
			case 95:
			case 97:
			case 99:
			case 101:
			case 107:
			case 113:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 132:
				{
				alt218 = 1;
				}
				break;
			case 82:
				{
				int LA218_3 = input.LA(2);

				if ((EvaluatePredicate(synpred294_AS3_fragment)))
				{
					alt218 = 1;
				}
				}
				break;
			case 131:
				{
				int LA218_4 = input.LA(2);

				if ((EvaluatePredicate(synpred294_AS3_fragment)))
				{
					alt218 = 1;
				}
				}
				break;
			case EOF:
				{
				int LA218_5 = input.LA(2);

				if ((EvaluatePredicate(synpred294_AS3_fragment)))
				{
					alt218 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(218); }
			switch (alt218)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1000:50: statementList
				{
				DebugLocation(1000, 50);
				PushFollow(Follow._statementList_in_defaultClause5588);
				statementList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(218); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("defaultClause", 70);
			LeaveRule("defaultClause", 70);
			LeaveRule_defaultClause();
			if (state.backtracking > 0) { Memoize(input, 70, defaultClause_StartIndex); }

		}
		DebugLocation(1001, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultClause"); }
		return;

	}
	// $ANTLR end "defaultClause"

	partial void EnterRule_labelledStatement();
	partial void LeaveRule_labelledStatement();

	// $ANTLR start "labelledStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1003:1: labelledStatement : Identifier ( LineTerminator )* ':' ( LineTerminator )* statement ;
	[GrammarRule("labelledStatement")]
	private void labelledStatement()
	{
		EnterRule_labelledStatement();
		EnterRule("labelledStatement", 71);
		TraceIn("labelledStatement", 71);
		int labelledStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "labelledStatement");
		DebugLocation(1003, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1004:2: ( Identifier ( LineTerminator )* ':' ( LineTerminator )* statement )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1004:4: Identifier ( LineTerminator )* ':' ( LineTerminator )* statement
			{
			DebugLocation(1004, 4);
			Match(input,Identifier,Follow._Identifier_in_labelledStatement5601); if (state.failed) return;
			DebugLocation(1004, 15);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1004:15: ( LineTerminator )*
			try { DebugEnterSubRule(219);
			while (true)
			{
				int alt219=2;
				try { DebugEnterDecision(219, false);
				int LA219_0 = input.LA(1);

				if ((LA219_0==LineTerminator))
				{
					alt219 = 1;
				}


				} finally { DebugExitDecision(219); }
				switch ( alt219 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1004:15: LineTerminator
					{
					DebugLocation(1004, 15);
					Match(input,LineTerminator,Follow._LineTerminator_in_labelledStatement5603); if (state.failed) return;

					}
					break;

				default:
					goto loop219;
				}
			}

			loop219:
				;

			} finally { DebugExitSubRule(219); }

			DebugLocation(1004, 31);
			Match(input,59,Follow._59_in_labelledStatement5606); if (state.failed) return;
			DebugLocation(1004, 35);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1004:35: ( LineTerminator )*
			try { DebugEnterSubRule(220);
			while (true)
			{
				int alt220=2;
				try { DebugEnterDecision(220, false);
				int LA220_0 = input.LA(1);

				if ((LA220_0==LineTerminator))
				{
					alt220 = 1;
				}


				} finally { DebugExitDecision(220); }
				switch ( alt220 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1004:35: LineTerminator
					{
					DebugLocation(1004, 35);
					Match(input,LineTerminator,Follow._LineTerminator_in_labelledStatement5608); if (state.failed) return;

					}
					break;

				default:
					goto loop220;
				}
			}

			loop220:
				;

			} finally { DebugExitSubRule(220); }

			DebugLocation(1004, 51);
			PushFollow(Follow._statement_in_labelledStatement5611);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("labelledStatement", 71);
			LeaveRule("labelledStatement", 71);
			LeaveRule_labelledStatement();
			if (state.backtracking > 0) { Memoize(input, 71, labelledStatement_StartIndex); }

		}
		DebugLocation(1005, 1);
		} finally { DebugExitRule(GrammarFileName, "labelledStatement"); }
		return;

	}
	// $ANTLR end "labelledStatement"

	partial void EnterRule_throwStatement();
	partial void LeaveRule_throwStatement();

	// $ANTLR start "throwStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1007:1: throwStatement : 'throw' expression ( ( LineTerminator )* | ';' ) ;
	[GrammarRule("throwStatement")]
	private void throwStatement()
	{
		EnterRule_throwStatement();
		EnterRule("throwStatement", 72);
		TraceIn("throwStatement", 72);
		int throwStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "throwStatement");
		DebugLocation(1007, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:2: ( 'throw' expression ( ( LineTerminator )* | ';' ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:4: 'throw' expression ( ( LineTerminator )* | ';' )
			{
			DebugLocation(1008, 4);
			Match(input,119,Follow._119_in_throwStatement5623); if (state.failed) return;
			DebugLocation(1008, 12);
			PushFollow(Follow._expression_in_throwStatement5625);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1008, 23);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:23: ( ( LineTerminator )* | ';' )
			int alt222=2;
			try { DebugEnterSubRule(222);
			try { DebugEnterDecision(222, false);
			int LA222_0 = input.LA(1);

			if ((LA222_0==EOF||LA222_0==BooleanLiteral||LA222_0==Identifier||LA222_0==LineTerminator||(LA222_0>=NullLiteral && LA222_0<=NumericLiteral)||LA222_0==StringLiteral||LA222_0==34||LA222_0==42||(LA222_0>=46 && LA222_0<=47)||(LA222_0>=50 && LA222_0<=51)||LA222_0==76||(LA222_0>=80 && LA222_0<=82)||(LA222_0>=85 && LA222_0<=90)||LA222_0==92||(LA222_0>=94 && LA222_0<=95)||LA222_0==97||LA222_0==99||LA222_0==101||LA222_0==104||(LA222_0>=107 && LA222_0<=108)||(LA222_0>=110 && LA222_0<=113)||(LA222_0>=115 && LA222_0<=127)||(LA222_0>=131 && LA222_0<=132)))
			{
				alt222 = 1;
			}
			else if ((LA222_0==61))
			{
				int LA222_2 = input.LA(2);

				if ((EvaluatePredicate(synpred298_AS3_fragment)))
				{
					alt222 = 1;
				}
				else if ((true))
				{
					alt222 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 222, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 222, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(222); }
			switch (alt222)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:24: ( LineTerminator )*
				{
				DebugLocation(1008, 24);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:24: ( LineTerminator )*
				try { DebugEnterSubRule(221);
				while (true)
				{
					int alt221=2;
					try { DebugEnterDecision(221, false);
					int LA221_0 = input.LA(1);

					if ((LA221_0==LineTerminator))
					{
						int LA221_1 = input.LA(2);

						if ((EvaluatePredicate(synpred297_AS3_fragment)))
						{
							alt221 = 1;
						}


					}


					} finally { DebugExitDecision(221); }
					switch ( alt221 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:24: LineTerminator
						{
						DebugLocation(1008, 24);
						Match(input,LineTerminator,Follow._LineTerminator_in_throwStatement5628); if (state.failed) return;

						}
						break;

					default:
						goto loop221;
					}
				}

				loop221:
					;

				} finally { DebugExitSubRule(221); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:42: ';'
				{
				DebugLocation(1008, 42);
				Match(input,61,Follow._61_in_throwStatement5633); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(222); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("throwStatement", 72);
			LeaveRule("throwStatement", 72);
			LeaveRule_throwStatement();
			if (state.backtracking > 0) { Memoize(input, 72, throwStatement_StartIndex); }

		}
		DebugLocation(1009, 1);
		} finally { DebugExitRule(GrammarFileName, "throwStatement"); }
		return;

	}
	// $ANTLR end "throwStatement"

	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();

	// $ANTLR start "tryStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1011:1: tryStatement : 'try' ( LineTerminator )* blockStatement ( LineTerminator )* ( ( finallyClause ( LineTerminator )* ) | ( ( catchClause ( LineTerminator )* )+ ( finallyClause )? ) ) ;
	[GrammarRule("tryStatement")]
	private void tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 73);
		TraceIn("tryStatement", 73);
		int tryStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(1011, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:2: ( 'try' ( LineTerminator )* blockStatement ( LineTerminator )* ( ( finallyClause ( LineTerminator )* ) | ( ( catchClause ( LineTerminator )* )+ ( finallyClause )? ) ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:4: 'try' ( LineTerminator )* blockStatement ( LineTerminator )* ( ( finallyClause ( LineTerminator )* ) | ( ( catchClause ( LineTerminator )* )+ ( finallyClause )? ) )
			{
			DebugLocation(1012, 4);
			Match(input,120,Follow._120_in_tryStatement5645); if (state.failed) return;
			DebugLocation(1012, 10);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:10: ( LineTerminator )*
			try { DebugEnterSubRule(223);
			while (true)
			{
				int alt223=2;
				try { DebugEnterDecision(223, false);
				int LA223_0 = input.LA(1);

				if ((LA223_0==LineTerminator))
				{
					alt223 = 1;
				}


				} finally { DebugExitDecision(223); }
				switch ( alt223 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:10: LineTerminator
					{
					DebugLocation(1012, 10);
					Match(input,LineTerminator,Follow._LineTerminator_in_tryStatement5647); if (state.failed) return;

					}
					break;

				default:
					goto loop223;
				}
			}

			loop223:
				;

			} finally { DebugExitSubRule(223); }

			DebugLocation(1012, 26);
			PushFollow(Follow._blockStatement_in_tryStatement5650);
			blockStatement();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1012, 41);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:41: ( LineTerminator )*
			try { DebugEnterSubRule(224);
			while (true)
			{
				int alt224=2;
				try { DebugEnterDecision(224, false);
				int LA224_0 = input.LA(1);

				if ((LA224_0==LineTerminator))
				{
					alt224 = 1;
				}


				} finally { DebugExitDecision(224); }
				switch ( alt224 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:41: LineTerminator
					{
					DebugLocation(1012, 41);
					Match(input,LineTerminator,Follow._LineTerminator_in_tryStatement5652); if (state.failed) return;

					}
					break;

				default:
					goto loop224;
				}
			}

			loop224:
				;

			} finally { DebugExitSubRule(224); }

			DebugLocation(1012, 57);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:57: ( ( finallyClause ( LineTerminator )* ) | ( ( catchClause ( LineTerminator )* )+ ( finallyClause )? ) )
			int alt229=2;
			try { DebugEnterSubRule(229);
			try { DebugEnterDecision(229, false);
			int LA229_0 = input.LA(1);

			if ((LA229_0==93))
			{
				alt229 = 1;
			}
			else if ((LA229_0==83))
			{
				alt229 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 229, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(229); }
			switch (alt229)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:58: ( finallyClause ( LineTerminator )* )
				{
				DebugLocation(1012, 58);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:58: ( finallyClause ( LineTerminator )* )
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:59: finallyClause ( LineTerminator )*
				{
				DebugLocation(1012, 59);
				PushFollow(Follow._finallyClause_in_tryStatement5657);
				finallyClause();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1012, 73);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:73: ( LineTerminator )*
				try { DebugEnterSubRule(225);
				while (true)
				{
					int alt225=2;
					try { DebugEnterDecision(225, false);
					int LA225_0 = input.LA(1);

					if ((LA225_0==LineTerminator))
					{
						int LA225_1 = input.LA(2);

						if ((EvaluatePredicate(synpred301_AS3_fragment)))
						{
							alt225 = 1;
						}


					}


					} finally { DebugExitDecision(225); }
					switch ( alt225 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:73: LineTerminator
						{
						DebugLocation(1012, 73);
						Match(input,LineTerminator,Follow._LineTerminator_in_tryStatement5659); if (state.failed) return;

						}
						break;

					default:
						goto loop225;
					}
				}

				loop225:
					;

				} finally { DebugExitSubRule(225); }


				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:91: ( ( catchClause ( LineTerminator )* )+ ( finallyClause )? )
				{
				DebugLocation(1012, 91);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:91: ( ( catchClause ( LineTerminator )* )+ ( finallyClause )? )
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:92: ( catchClause ( LineTerminator )* )+ ( finallyClause )?
				{
				DebugLocation(1012, 92);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:92: ( catchClause ( LineTerminator )* )+
				int cnt227=0;
				try { DebugEnterSubRule(227);
				while (true)
				{
					int alt227=2;
					try { DebugEnterDecision(227, false);
					int LA227_0 = input.LA(1);

					if ((LA227_0==83))
					{
						alt227 = 1;
					}


					} finally { DebugExitDecision(227); }
					switch (alt227)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:93: catchClause ( LineTerminator )*
						{
						DebugLocation(1012, 93);
						PushFollow(Follow._catchClause_in_tryStatement5666);
						catchClause();
						PopFollow();
						if (state.failed) return;
						DebugLocation(1012, 105);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:105: ( LineTerminator )*
						try { DebugEnterSubRule(226);
						while (true)
						{
							int alt226=2;
							try { DebugEnterDecision(226, false);
							int LA226_0 = input.LA(1);

							if ((LA226_0==LineTerminator))
							{
								int LA226_2 = input.LA(2);

								if ((EvaluatePredicate(synpred303_AS3_fragment)))
								{
									alt226 = 1;
								}


							}


							} finally { DebugExitDecision(226); }
							switch ( alt226 )
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:105: LineTerminator
								{
								DebugLocation(1012, 105);
								Match(input,LineTerminator,Follow._LineTerminator_in_tryStatement5668); if (state.failed) return;

								}
								break;

							default:
								goto loop226;
							}
						}

						loop226:
							;

						} finally { DebugExitSubRule(226); }


						}
						break;

					default:
						if (cnt227 >= 1)
							goto loop227;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee227 = new EarlyExitException( 227, input );
						DebugRecognitionException(eee227);
						throw eee227;
					}
					cnt227++;
				}
				loop227:
					;

				} finally { DebugExitSubRule(227); }

				DebugLocation(1012, 123);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:123: ( finallyClause )?
				int alt228=2;
				try { DebugEnterSubRule(228);
				try { DebugEnterDecision(228, false);
				int LA228_0 = input.LA(1);

				if ((LA228_0==93))
				{
					alt228 = 1;
				}
				} finally { DebugExitDecision(228); }
				switch (alt228)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:123: finallyClause
					{
					DebugLocation(1012, 123);
					PushFollow(Follow._finallyClause_in_tryStatement5673);
					finallyClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(228); }


				}


				}
				break;

			}
			} finally { DebugExitSubRule(229); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tryStatement", 73);
			LeaveRule("tryStatement", 73);
			LeaveRule_tryStatement();
			if (state.backtracking > 0) { Memoize(input, 73, tryStatement_StartIndex); }

		}
		DebugLocation(1013, 1);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return;

	}
	// $ANTLR end "tryStatement"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();

	// $ANTLR start "catchClause"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1015:1: catchClause : 'catch' ( LineTerminator )* '(' ( LineTerminator )* Identifier ( typeInformation )? ( LineTerminator )* ')' ( LineTerminator )* blockStatement ;
	[GrammarRule("catchClause")]
	private void catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 74);
		TraceIn("catchClause", 74);
		int catchClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(1015, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1016:2: ( 'catch' ( LineTerminator )* '(' ( LineTerminator )* Identifier ( typeInformation )? ( LineTerminator )* ')' ( LineTerminator )* blockStatement )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1016:4: 'catch' ( LineTerminator )* '(' ( LineTerminator )* Identifier ( typeInformation )? ( LineTerminator )* ')' ( LineTerminator )* blockStatement
			{
			DebugLocation(1016, 4);
			Match(input,83,Follow._83_in_catchClause5694); if (state.failed) return;
			DebugLocation(1016, 12);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1016:12: ( LineTerminator )*
			try { DebugEnterSubRule(230);
			while (true)
			{
				int alt230=2;
				try { DebugEnterDecision(230, false);
				int LA230_0 = input.LA(1);

				if ((LA230_0==LineTerminator))
				{
					alt230 = 1;
				}


				} finally { DebugExitDecision(230); }
				switch ( alt230 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1016:12: LineTerminator
					{
					DebugLocation(1016, 12);
					Match(input,LineTerminator,Follow._LineTerminator_in_catchClause5696); if (state.failed) return;

					}
					break;

				default:
					goto loop230;
				}
			}

			loop230:
				;

			} finally { DebugExitSubRule(230); }

			DebugLocation(1016, 28);
			Match(input,42,Follow._42_in_catchClause5699); if (state.failed) return;
			DebugLocation(1016, 32);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1016:32: ( LineTerminator )*
			try { DebugEnterSubRule(231);
			while (true)
			{
				int alt231=2;
				try { DebugEnterDecision(231, false);
				int LA231_0 = input.LA(1);

				if ((LA231_0==LineTerminator))
				{
					alt231 = 1;
				}


				} finally { DebugExitDecision(231); }
				switch ( alt231 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1016:32: LineTerminator
					{
					DebugLocation(1016, 32);
					Match(input,LineTerminator,Follow._LineTerminator_in_catchClause5701); if (state.failed) return;

					}
					break;

				default:
					goto loop231;
				}
			}

			loop231:
				;

			} finally { DebugExitSubRule(231); }

			DebugLocation(1016, 48);
			Match(input,Identifier,Follow._Identifier_in_catchClause5704); if (state.failed) return;
			DebugLocation(1016, 59);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1016:59: ( typeInformation )?
			int alt232=2;
			try { DebugEnterSubRule(232);
			try { DebugEnterDecision(232, false);
			int LA232_0 = input.LA(1);

			if ((LA232_0==59))
			{
				alt232 = 1;
			}
			} finally { DebugExitDecision(232); }
			switch (alt232)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1016:59: typeInformation
				{
				DebugLocation(1016, 59);
				PushFollow(Follow._typeInformation_in_catchClause5706);
				typeInformation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(232); }

			DebugLocation(1016, 76);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1016:76: ( LineTerminator )*
			try { DebugEnterSubRule(233);
			while (true)
			{
				int alt233=2;
				try { DebugEnterDecision(233, false);
				int LA233_0 = input.LA(1);

				if ((LA233_0==LineTerminator))
				{
					alt233 = 1;
				}


				} finally { DebugExitDecision(233); }
				switch ( alt233 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1016:76: LineTerminator
					{
					DebugLocation(1016, 76);
					Match(input,LineTerminator,Follow._LineTerminator_in_catchClause5709); if (state.failed) return;

					}
					break;

				default:
					goto loop233;
				}
			}

			loop233:
				;

			} finally { DebugExitSubRule(233); }

			DebugLocation(1016, 92);
			Match(input,43,Follow._43_in_catchClause5712); if (state.failed) return;
			DebugLocation(1016, 96);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1016:96: ( LineTerminator )*
			try { DebugEnterSubRule(234);
			while (true)
			{
				int alt234=2;
				try { DebugEnterDecision(234, false);
				int LA234_0 = input.LA(1);

				if ((LA234_0==LineTerminator))
				{
					alt234 = 1;
				}


				} finally { DebugExitDecision(234); }
				switch ( alt234 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1016:96: LineTerminator
					{
					DebugLocation(1016, 96);
					Match(input,LineTerminator,Follow._LineTerminator_in_catchClause5714); if (state.failed) return;

					}
					break;

				default:
					goto loop234;
				}
			}

			loop234:
				;

			} finally { DebugExitSubRule(234); }

			DebugLocation(1016, 112);
			PushFollow(Follow._blockStatement_in_catchClause5717);
			blockStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catchClause", 74);
			LeaveRule("catchClause", 74);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 74, catchClause_StartIndex); }

		}
		DebugLocation(1017, 1);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();

	// $ANTLR start "finallyClause"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1019:1: finallyClause : 'finally' ( LineTerminator )* blockStatement ;
	[GrammarRule("finallyClause")]
	private void finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 75);
		TraceIn("finallyClause", 75);
		int finallyClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(1019, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1020:2: ( 'finally' ( LineTerminator )* blockStatement )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1020:4: 'finally' ( LineTerminator )* blockStatement
			{
			DebugLocation(1020, 4);
			Match(input,93,Follow._93_in_finallyClause5729); if (state.failed) return;
			DebugLocation(1020, 14);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1020:14: ( LineTerminator )*
			try { DebugEnterSubRule(235);
			while (true)
			{
				int alt235=2;
				try { DebugEnterDecision(235, false);
				int LA235_0 = input.LA(1);

				if ((LA235_0==LineTerminator))
				{
					alt235 = 1;
				}


				} finally { DebugExitDecision(235); }
				switch ( alt235 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1020:14: LineTerminator
					{
					DebugLocation(1020, 14);
					Match(input,LineTerminator,Follow._LineTerminator_in_finallyClause5731); if (state.failed) return;

					}
					break;

				default:
					goto loop235;
				}
			}

			loop235:
				;

			} finally { DebugExitSubRule(235); }

			DebugLocation(1020, 30);
			PushFollow(Follow._blockStatement_in_finallyClause5734);
			blockStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("finallyClause", 75);
			LeaveRule("finallyClause", 75);
			LeaveRule_finallyClause();
			if (state.backtracking > 0) { Memoize(input, 75, finallyClause_StartIndex); }

		}
		DebugLocation(1021, 1);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return;

	}
	// $ANTLR end "finallyClause"

	partial void EnterRule_functionDeclaration();
	partial void LeaveRule_functionDeclaration();

	// $ANTLR start "functionDeclaration"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1027:1: functionDeclaration : 'function' ( 'get' | 'set' )? ( LineTerminator )* Identifier ( LineTerminator )* formalParameterList ( LineTerminator )* ( typeInformation )? ( LineTerminator )* '{' ( LineTerminator )* sourceElements ( LineTerminator )* '}' ;
	[GrammarRule("functionDeclaration")]
	private void functionDeclaration()
	{
		EnterRule_functionDeclaration();
		EnterRule("functionDeclaration", 76);
		TraceIn("functionDeclaration", 76);
		int functionDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "functionDeclaration");
		DebugLocation(1027, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:2: ( 'function' ( 'get' | 'set' )? ( LineTerminator )* Identifier ( LineTerminator )* formalParameterList ( LineTerminator )* ( typeInformation )? ( LineTerminator )* '{' ( LineTerminator )* sourceElements ( LineTerminator )* '}' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:4: 'function' ( 'get' | 'set' )? ( LineTerminator )* Identifier ( LineTerminator )* formalParameterList ( LineTerminator )* ( typeInformation )? ( LineTerminator )* '{' ( LineTerminator )* sourceElements ( LineTerminator )* '}'
			{
			DebugLocation(1028, 4);
			Match(input,95,Follow._95_in_functionDeclaration5749); if (state.failed) return;
			DebugLocation(1028, 15);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:15: ( 'get' | 'set' )?
			int alt236=2;
			try { DebugEnterSubRule(236);
			try { DebugEnterDecision(236, false);
			int LA236_0 = input.LA(1);

			if ((LA236_0==96||LA236_0==114))
			{
				alt236 = 1;
			}
			} finally { DebugExitDecision(236); }
			switch (alt236)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:
				{
				DebugLocation(1028, 15);
				if (input.LA(1)==96||input.LA(1)==114)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(236); }

			DebugLocation(1028, 30);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:30: ( LineTerminator )*
			try { DebugEnterSubRule(237);
			while (true)
			{
				int alt237=2;
				try { DebugEnterDecision(237, false);
				int LA237_0 = input.LA(1);

				if ((LA237_0==LineTerminator))
				{
					alt237 = 1;
				}


				} finally { DebugExitDecision(237); }
				switch ( alt237 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:30: LineTerminator
					{
					DebugLocation(1028, 30);
					Match(input,LineTerminator,Follow._LineTerminator_in_functionDeclaration5758); if (state.failed) return;

					}
					break;

				default:
					goto loop237;
				}
			}

			loop237:
				;

			} finally { DebugExitSubRule(237); }

			DebugLocation(1028, 46);
			Match(input,Identifier,Follow._Identifier_in_functionDeclaration5761); if (state.failed) return;
			DebugLocation(1028, 57);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:57: ( LineTerminator )*
			try { DebugEnterSubRule(238);
			while (true)
			{
				int alt238=2;
				try { DebugEnterDecision(238, false);
				int LA238_0 = input.LA(1);

				if ((LA238_0==LineTerminator))
				{
					alt238 = 1;
				}


				} finally { DebugExitDecision(238); }
				switch ( alt238 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:57: LineTerminator
					{
					DebugLocation(1028, 57);
					Match(input,LineTerminator,Follow._LineTerminator_in_functionDeclaration5763); if (state.failed) return;

					}
					break;

				default:
					goto loop238;
				}
			}

			loop238:
				;

			} finally { DebugExitSubRule(238); }

			DebugLocation(1028, 73);
			PushFollow(Follow._formalParameterList_in_functionDeclaration5766);
			formalParameterList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1028, 93);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:93: ( LineTerminator )*
			try { DebugEnterSubRule(239);
			while (true)
			{
				int alt239=2;
				try { DebugEnterDecision(239, false);
				int LA239_0 = input.LA(1);

				if ((LA239_0==LineTerminator))
				{
					int LA239_2 = input.LA(2);

					if ((EvaluatePredicate(synpred316_AS3_fragment)))
					{
						alt239 = 1;
					}


				}


				} finally { DebugExitDecision(239); }
				switch ( alt239 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:93: LineTerminator
					{
					DebugLocation(1028, 93);
					Match(input,LineTerminator,Follow._LineTerminator_in_functionDeclaration5768); if (state.failed) return;

					}
					break;

				default:
					goto loop239;
				}
			}

			loop239:
				;

			} finally { DebugExitSubRule(239); }

			DebugLocation(1028, 109);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:109: ( typeInformation )?
			int alt240=2;
			try { DebugEnterSubRule(240);
			try { DebugEnterDecision(240, false);
			int LA240_0 = input.LA(1);

			if ((LA240_0==59))
			{
				alt240 = 1;
			}
			} finally { DebugExitDecision(240); }
			switch (alt240)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:109: typeInformation
				{
				DebugLocation(1028, 109);
				PushFollow(Follow._typeInformation_in_functionDeclaration5771);
				typeInformation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(240); }

			DebugLocation(1028, 126);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:126: ( LineTerminator )*
			try { DebugEnterSubRule(241);
			while (true)
			{
				int alt241=2;
				try { DebugEnterDecision(241, false);
				int LA241_0 = input.LA(1);

				if ((LA241_0==LineTerminator))
				{
					alt241 = 1;
				}


				} finally { DebugExitDecision(241); }
				switch ( alt241 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:126: LineTerminator
					{
					DebugLocation(1028, 126);
					Match(input,LineTerminator,Follow._LineTerminator_in_functionDeclaration5774); if (state.failed) return;

					}
					break;

				default:
					goto loop241;
				}
			}

			loop241:
				;

			} finally { DebugExitSubRule(241); }

			DebugLocation(1028, 142);
			Match(input,127,Follow._127_in_functionDeclaration5777); if (state.failed) return;
			DebugLocation(1028, 146);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:146: ( LineTerminator )*
			try { DebugEnterSubRule(242);
			while (true)
			{
				int alt242=2;
				try { DebugEnterDecision(242, false);
				int LA242_0 = input.LA(1);

				if ((LA242_0==LineTerminator))
				{
					int LA242_1 = input.LA(2);

					if ((EvaluatePredicate(synpred319_AS3_fragment)))
					{
						alt242 = 1;
					}


				}


				} finally { DebugExitDecision(242); }
				switch ( alt242 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:146: LineTerminator
					{
					DebugLocation(1028, 146);
					Match(input,LineTerminator,Follow._LineTerminator_in_functionDeclaration5779); if (state.failed) return;

					}
					break;

				default:
					goto loop242;
				}
			}

			loop242:
				;

			} finally { DebugExitSubRule(242); }

			DebugLocation(1028, 162);
			PushFollow(Follow._sourceElements_in_functionDeclaration5782);
			sourceElements();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1028, 177);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:177: ( LineTerminator )*
			try { DebugEnterSubRule(243);
			while (true)
			{
				int alt243=2;
				try { DebugEnterDecision(243, false);
				int LA243_0 = input.LA(1);

				if ((LA243_0==LineTerminator))
				{
					alt243 = 1;
				}


				} finally { DebugExitDecision(243); }
				switch ( alt243 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:177: LineTerminator
					{
					DebugLocation(1028, 177);
					Match(input,LineTerminator,Follow._LineTerminator_in_functionDeclaration5784); if (state.failed) return;

					}
					break;

				default:
					goto loop243;
				}
			}

			loop243:
				;

			} finally { DebugExitSubRule(243); }

			DebugLocation(1028, 193);
			Match(input,131,Follow._131_in_functionDeclaration5787); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionDeclaration", 76);
			LeaveRule("functionDeclaration", 76);
			LeaveRule_functionDeclaration();
			if (state.backtracking > 0) { Memoize(input, 76, functionDeclaration_StartIndex); }

		}
		DebugLocation(1029, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDeclaration"); }
		return;

	}
	// $ANTLR end "functionDeclaration"

	partial void EnterRule_functionExpression();
	partial void LeaveRule_functionExpression();

	// $ANTLR start "functionExpression"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1031:1: functionExpression : 'function' ( LineTerminator )* ( Identifier )? ( LineTerminator )* formalParameterList ( LineTerminator )* ( typeInformation )? ( LineTerminator )* '{' ( LineTerminator )* sourceElements ( LineTerminator )* '}' ;
	[GrammarRule("functionExpression")]
	private void functionExpression()
	{
		EnterRule_functionExpression();
		EnterRule("functionExpression", 77);
		TraceIn("functionExpression", 77);
		int functionExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "functionExpression");
		DebugLocation(1031, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:2: ( 'function' ( LineTerminator )* ( Identifier )? ( LineTerminator )* formalParameterList ( LineTerminator )* ( typeInformation )? ( LineTerminator )* '{' ( LineTerminator )* sourceElements ( LineTerminator )* '}' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:4: 'function' ( LineTerminator )* ( Identifier )? ( LineTerminator )* formalParameterList ( LineTerminator )* ( typeInformation )? ( LineTerminator )* '{' ( LineTerminator )* sourceElements ( LineTerminator )* '}'
			{
			DebugLocation(1032, 4);
			Match(input,95,Follow._95_in_functionExpression5799); if (state.failed) return;
			DebugLocation(1032, 15);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:15: ( LineTerminator )*
			try { DebugEnterSubRule(244);
			while (true)
			{
				int alt244=2;
				try { DebugEnterDecision(244, false);
				int LA244_0 = input.LA(1);

				if ((LA244_0==LineTerminator))
				{
					int LA244_2 = input.LA(2);

					if ((EvaluatePredicate(synpred321_AS3_fragment)))
					{
						alt244 = 1;
					}


				}


				} finally { DebugExitDecision(244); }
				switch ( alt244 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:15: LineTerminator
					{
					DebugLocation(1032, 15);
					Match(input,LineTerminator,Follow._LineTerminator_in_functionExpression5801); if (state.failed) return;

					}
					break;

				default:
					goto loop244;
				}
			}

			loop244:
				;

			} finally { DebugExitSubRule(244); }

			DebugLocation(1032, 31);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:31: ( Identifier )?
			int alt245=2;
			try { DebugEnterSubRule(245);
			try { DebugEnterDecision(245, false);
			int LA245_0 = input.LA(1);

			if ((LA245_0==Identifier))
			{
				alt245 = 1;
			}
			} finally { DebugExitDecision(245); }
			switch (alt245)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:31: Identifier
				{
				DebugLocation(1032, 31);
				Match(input,Identifier,Follow._Identifier_in_functionExpression5804); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(245); }

			DebugLocation(1032, 43);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:43: ( LineTerminator )*
			try { DebugEnterSubRule(246);
			while (true)
			{
				int alt246=2;
				try { DebugEnterDecision(246, false);
				int LA246_0 = input.LA(1);

				if ((LA246_0==LineTerminator))
				{
					alt246 = 1;
				}


				} finally { DebugExitDecision(246); }
				switch ( alt246 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:43: LineTerminator
					{
					DebugLocation(1032, 43);
					Match(input,LineTerminator,Follow._LineTerminator_in_functionExpression5807); if (state.failed) return;

					}
					break;

				default:
					goto loop246;
				}
			}

			loop246:
				;

			} finally { DebugExitSubRule(246); }

			DebugLocation(1032, 59);
			PushFollow(Follow._formalParameterList_in_functionExpression5810);
			formalParameterList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1032, 79);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:79: ( LineTerminator )*
			try { DebugEnterSubRule(247);
			while (true)
			{
				int alt247=2;
				try { DebugEnterDecision(247, false);
				int LA247_0 = input.LA(1);

				if ((LA247_0==LineTerminator))
				{
					int LA247_2 = input.LA(2);

					if ((EvaluatePredicate(synpred324_AS3_fragment)))
					{
						alt247 = 1;
					}


				}


				} finally { DebugExitDecision(247); }
				switch ( alt247 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:79: LineTerminator
					{
					DebugLocation(1032, 79);
					Match(input,LineTerminator,Follow._LineTerminator_in_functionExpression5812); if (state.failed) return;

					}
					break;

				default:
					goto loop247;
				}
			}

			loop247:
				;

			} finally { DebugExitSubRule(247); }

			DebugLocation(1032, 95);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:95: ( typeInformation )?
			int alt248=2;
			try { DebugEnterSubRule(248);
			try { DebugEnterDecision(248, false);
			int LA248_0 = input.LA(1);

			if ((LA248_0==59))
			{
				alt248 = 1;
			}
			} finally { DebugExitDecision(248); }
			switch (alt248)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:95: typeInformation
				{
				DebugLocation(1032, 95);
				PushFollow(Follow._typeInformation_in_functionExpression5815);
				typeInformation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(248); }

			DebugLocation(1032, 112);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:112: ( LineTerminator )*
			try { DebugEnterSubRule(249);
			while (true)
			{
				int alt249=2;
				try { DebugEnterDecision(249, false);
				int LA249_0 = input.LA(1);

				if ((LA249_0==LineTerminator))
				{
					alt249 = 1;
				}


				} finally { DebugExitDecision(249); }
				switch ( alt249 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:112: LineTerminator
					{
					DebugLocation(1032, 112);
					Match(input,LineTerminator,Follow._LineTerminator_in_functionExpression5818); if (state.failed) return;

					}
					break;

				default:
					goto loop249;
				}
			}

			loop249:
				;

			} finally { DebugExitSubRule(249); }

			DebugLocation(1032, 128);
			Match(input,127,Follow._127_in_functionExpression5821); if (state.failed) return;
			DebugLocation(1032, 132);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:132: ( LineTerminator )*
			try { DebugEnterSubRule(250);
			while (true)
			{
				int alt250=2;
				try { DebugEnterDecision(250, false);
				int LA250_0 = input.LA(1);

				if ((LA250_0==LineTerminator))
				{
					int LA250_1 = input.LA(2);

					if ((EvaluatePredicate(synpred327_AS3_fragment)))
					{
						alt250 = 1;
					}


				}


				} finally { DebugExitDecision(250); }
				switch ( alt250 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:132: LineTerminator
					{
					DebugLocation(1032, 132);
					Match(input,LineTerminator,Follow._LineTerminator_in_functionExpression5823); if (state.failed) return;

					}
					break;

				default:
					goto loop250;
				}
			}

			loop250:
				;

			} finally { DebugExitSubRule(250); }

			DebugLocation(1032, 148);
			PushFollow(Follow._sourceElements_in_functionExpression5826);
			sourceElements();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1032, 163);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:163: ( LineTerminator )*
			try { DebugEnterSubRule(251);
			while (true)
			{
				int alt251=2;
				try { DebugEnterDecision(251, false);
				int LA251_0 = input.LA(1);

				if ((LA251_0==LineTerminator))
				{
					alt251 = 1;
				}


				} finally { DebugExitDecision(251); }
				switch ( alt251 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:163: LineTerminator
					{
					DebugLocation(1032, 163);
					Match(input,LineTerminator,Follow._LineTerminator_in_functionExpression5828); if (state.failed) return;

					}
					break;

				default:
					goto loop251;
				}
			}

			loop251:
				;

			} finally { DebugExitSubRule(251); }

			DebugLocation(1032, 179);
			Match(input,131,Follow._131_in_functionExpression5831); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionExpression", 77);
			LeaveRule("functionExpression", 77);
			LeaveRule_functionExpression();
			if (state.backtracking > 0) { Memoize(input, 77, functionExpression_StartIndex); }

		}
		DebugLocation(1033, 1);
		} finally { DebugExitRule(GrammarFileName, "functionExpression"); }
		return;

	}
	// $ANTLR end "functionExpression"

	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();

	// $ANTLR start "formalParameterList"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1035:1: formalParameterList : '(' ( ( LineTerminator )* formalParameter ( ( LineTerminator )* ',' ( LineTerminator )* formalParameter )* )? ( LineTerminator )* ')' ;
	[GrammarRule("formalParameterList")]
	private void formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 78);
		TraceIn("formalParameterList", 78);
		int formalParameterList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(1035, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:2: ( '(' ( ( LineTerminator )* formalParameter ( ( LineTerminator )* ',' ( LineTerminator )* formalParameter )* )? ( LineTerminator )* ')' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:4: '(' ( ( LineTerminator )* formalParameter ( ( LineTerminator )* ',' ( LineTerminator )* formalParameter )* )? ( LineTerminator )* ')'
			{
			DebugLocation(1036, 4);
			Match(input,42,Follow._42_in_formalParameterList5842); if (state.failed) return;
			DebugLocation(1036, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:8: ( ( LineTerminator )* formalParameter ( ( LineTerminator )* ',' ( LineTerminator )* formalParameter )* )?
			int alt256=2;
			try { DebugEnterSubRule(256);
			try { DebugEnterDecision(256, false);
			try
			{
				alt256 = dfa256.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(256); }
			switch (alt256)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:9: ( LineTerminator )* formalParameter ( ( LineTerminator )* ',' ( LineTerminator )* formalParameter )*
				{
				DebugLocation(1036, 9);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:9: ( LineTerminator )*
				try { DebugEnterSubRule(252);
				while (true)
				{
					int alt252=2;
					try { DebugEnterDecision(252, false);
					int LA252_0 = input.LA(1);

					if ((LA252_0==LineTerminator))
					{
						alt252 = 1;
					}


					} finally { DebugExitDecision(252); }
					switch ( alt252 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:9: LineTerminator
						{
						DebugLocation(1036, 9);
						Match(input,LineTerminator,Follow._LineTerminator_in_formalParameterList5845); if (state.failed) return;

						}
						break;

					default:
						goto loop252;
					}
				}

				loop252:
					;

				} finally { DebugExitSubRule(252); }

				DebugLocation(1036, 25);
				PushFollow(Follow._formalParameter_in_formalParameterList5848);
				formalParameter();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1036, 41);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:41: ( ( LineTerminator )* ',' ( LineTerminator )* formalParameter )*
				try { DebugEnterSubRule(255);
				while (true)
				{
					int alt255=2;
					try { DebugEnterDecision(255, false);
					try
					{
						alt255 = dfa255.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(255); }
					switch ( alt255 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:42: ( LineTerminator )* ',' ( LineTerminator )* formalParameter
						{
						DebugLocation(1036, 42);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:42: ( LineTerminator )*
						try { DebugEnterSubRule(253);
						while (true)
						{
							int alt253=2;
							try { DebugEnterDecision(253, false);
							int LA253_0 = input.LA(1);

							if ((LA253_0==LineTerminator))
							{
								alt253 = 1;
							}


							} finally { DebugExitDecision(253); }
							switch ( alt253 )
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:42: LineTerminator
								{
								DebugLocation(1036, 42);
								Match(input,LineTerminator,Follow._LineTerminator_in_formalParameterList5851); if (state.failed) return;

								}
								break;

							default:
								goto loop253;
							}
						}

						loop253:
							;

						} finally { DebugExitSubRule(253); }

						DebugLocation(1036, 58);
						Match(input,49,Follow._49_in_formalParameterList5854); if (state.failed) return;
						DebugLocation(1036, 62);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:62: ( LineTerminator )*
						try { DebugEnterSubRule(254);
						while (true)
						{
							int alt254=2;
							try { DebugEnterDecision(254, false);
							int LA254_0 = input.LA(1);

							if ((LA254_0==LineTerminator))
							{
								alt254 = 1;
							}


							} finally { DebugExitDecision(254); }
							switch ( alt254 )
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:62: LineTerminator
								{
								DebugLocation(1036, 62);
								Match(input,LineTerminator,Follow._LineTerminator_in_formalParameterList5856); if (state.failed) return;

								}
								break;

							default:
								goto loop254;
							}
						}

						loop254:
							;

						} finally { DebugExitSubRule(254); }

						DebugLocation(1036, 78);
						PushFollow(Follow._formalParameter_in_formalParameterList5859);
						formalParameter();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop255;
					}
				}

				loop255:
					;

				} finally { DebugExitSubRule(255); }


				}
				break;

			}
			} finally { DebugExitSubRule(256); }

			DebugLocation(1036, 99);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:99: ( LineTerminator )*
			try { DebugEnterSubRule(257);
			while (true)
			{
				int alt257=2;
				try { DebugEnterDecision(257, false);
				int LA257_0 = input.LA(1);

				if ((LA257_0==LineTerminator))
				{
					alt257 = 1;
				}


				} finally { DebugExitDecision(257); }
				switch ( alt257 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1036:99: LineTerminator
					{
					DebugLocation(1036, 99);
					Match(input,LineTerminator,Follow._LineTerminator_in_formalParameterList5866); if (state.failed) return;

					}
					break;

				default:
					goto loop257;
				}
			}

			loop257:
				;

			} finally { DebugExitSubRule(257); }

			DebugLocation(1036, 115);
			Match(input,43,Follow._43_in_formalParameterList5869); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterList", 78);
			LeaveRule("formalParameterList", 78);
			LeaveRule_formalParameterList();
			if (state.backtracking > 0) { Memoize(input, 78, formalParameterList_StartIndex); }

		}
		DebugLocation(1037, 1);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return;

	}
	// $ANTLR end "formalParameterList"

	partial void EnterRule_formalParameter();
	partial void LeaveRule_formalParameter();

	// $ANTLR start "formalParameter"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1039:1: formalParameter : ( Identifier ( LineTerminator )* ( typeInformation )? ( LineTerminator )* ( defaultArgumentValue )? | '...' ( LineTerminator )* Identifier | Identifier ( LineTerminator )* '...' );
	[GrammarRule("formalParameter")]
	private void formalParameter()
	{
		EnterRule_formalParameter();
		EnterRule("formalParameter", 79);
		TraceIn("formalParameter", 79);
		int formalParameter_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameter");
		DebugLocation(1039, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:2: ( Identifier ( LineTerminator )* ( typeInformation )? ( LineTerminator )* ( defaultArgumentValue )? | '...' ( LineTerminator )* Identifier | Identifier ( LineTerminator )* '...' )
			int alt264=3;
			try { DebugEnterDecision(264, false);
			try
			{
				alt264 = dfa264.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(264); }
			switch (alt264)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:4: Identifier ( LineTerminator )* ( typeInformation )? ( LineTerminator )* ( defaultArgumentValue )?
				{
				DebugLocation(1040, 4);
				Match(input,Identifier,Follow._Identifier_in_formalParameter5881); if (state.failed) return;
				DebugLocation(1040, 15);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:15: ( LineTerminator )*
				try { DebugEnterSubRule(258);
				while (true)
				{
					int alt258=2;
					try { DebugEnterDecision(258, false);
					int LA258_0 = input.LA(1);

					if ((LA258_0==LineTerminator))
					{
						int LA258_2 = input.LA(2);

						if ((EvaluatePredicate(synpred335_AS3_fragment)))
						{
							alt258 = 1;
						}


					}


					} finally { DebugExitDecision(258); }
					switch ( alt258 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:15: LineTerminator
						{
						DebugLocation(1040, 15);
						Match(input,LineTerminator,Follow._LineTerminator_in_formalParameter5883); if (state.failed) return;

						}
						break;

					default:
						goto loop258;
					}
				}

				loop258:
					;

				} finally { DebugExitSubRule(258); }

				DebugLocation(1040, 31);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:31: ( typeInformation )?
				int alt259=2;
				try { DebugEnterSubRule(259);
				try { DebugEnterDecision(259, false);
				int LA259_0 = input.LA(1);

				if ((LA259_0==59))
				{
					alt259 = 1;
				}
				} finally { DebugExitDecision(259); }
				switch (alt259)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:31: typeInformation
					{
					DebugLocation(1040, 31);
					PushFollow(Follow._typeInformation_in_formalParameter5886);
					typeInformation();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(259); }

				DebugLocation(1040, 48);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:48: ( LineTerminator )*
				try { DebugEnterSubRule(260);
				while (true)
				{
					int alt260=2;
					try { DebugEnterDecision(260, false);
					int LA260_0 = input.LA(1);

					if ((LA260_0==LineTerminator))
					{
						int LA260_2 = input.LA(2);

						if ((EvaluatePredicate(synpred337_AS3_fragment)))
						{
							alt260 = 1;
						}


					}


					} finally { DebugExitDecision(260); }
					switch ( alt260 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:48: LineTerminator
						{
						DebugLocation(1040, 48);
						Match(input,LineTerminator,Follow._LineTerminator_in_formalParameter5889); if (state.failed) return;

						}
						break;

					default:
						goto loop260;
					}
				}

				loop260:
					;

				} finally { DebugExitSubRule(260); }

				DebugLocation(1040, 64);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:64: ( defaultArgumentValue )?
				int alt261=2;
				try { DebugEnterSubRule(261);
				try { DebugEnterDecision(261, false);
				int LA261_0 = input.LA(1);

				if ((LA261_0==66))
				{
					alt261 = 1;
				}
				} finally { DebugExitDecision(261); }
				switch (alt261)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:64: defaultArgumentValue
					{
					DebugLocation(1040, 64);
					PushFollow(Follow._defaultArgumentValue_in_formalParameter5892);
					defaultArgumentValue();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(261); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1041:4: '...' ( LineTerminator )* Identifier
				{
				DebugLocation(1041, 4);
				Match(input,55,Follow._55_in_formalParameter5898); if (state.failed) return;
				DebugLocation(1041, 10);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1041:10: ( LineTerminator )*
				try { DebugEnterSubRule(262);
				while (true)
				{
					int alt262=2;
					try { DebugEnterDecision(262, false);
					int LA262_0 = input.LA(1);

					if ((LA262_0==LineTerminator))
					{
						alt262 = 1;
					}


					} finally { DebugExitDecision(262); }
					switch ( alt262 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1041:10: LineTerminator
						{
						DebugLocation(1041, 10);
						Match(input,LineTerminator,Follow._LineTerminator_in_formalParameter5900); if (state.failed) return;

						}
						break;

					default:
						goto loop262;
					}
				}

				loop262:
					;

				} finally { DebugExitSubRule(262); }

				DebugLocation(1041, 26);
				Match(input,Identifier,Follow._Identifier_in_formalParameter5903); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1042:4: Identifier ( LineTerminator )* '...'
				{
				DebugLocation(1042, 4);
				Match(input,Identifier,Follow._Identifier_in_formalParameter5908); if (state.failed) return;
				DebugLocation(1042, 15);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1042:15: ( LineTerminator )*
				try { DebugEnterSubRule(263);
				while (true)
				{
					int alt263=2;
					try { DebugEnterDecision(263, false);
					int LA263_0 = input.LA(1);

					if ((LA263_0==LineTerminator))
					{
						alt263 = 1;
					}


					} finally { DebugExitDecision(263); }
					switch ( alt263 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1042:15: LineTerminator
						{
						DebugLocation(1042, 15);
						Match(input,LineTerminator,Follow._LineTerminator_in_formalParameter5910); if (state.failed) return;

						}
						break;

					default:
						goto loop263;
					}
				}

				loop263:
					;

				} finally { DebugExitSubRule(263); }

				DebugLocation(1042, 31);
				Match(input,55,Follow._55_in_formalParameter5913); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameter", 79);
			LeaveRule("formalParameter", 79);
			LeaveRule_formalParameter();
			if (state.backtracking > 0) { Memoize(input, 79, formalParameter_StartIndex); }

		}
		DebugLocation(1043, 1);
		} finally { DebugExitRule(GrammarFileName, "formalParameter"); }
		return;

	}
	// $ANTLR end "formalParameter"

	partial void EnterRule_sourceElements();
	partial void LeaveRule_sourceElements();

	// $ANTLR start "sourceElements"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1045:1: sourceElements : ( ( LineTerminator )* sourceElement ( LineTerminator )* )* ;
	[GrammarRule("sourceElements")]
	private void sourceElements()
	{
		EnterRule_sourceElements();
		EnterRule("sourceElements", 80);
		TraceIn("sourceElements", 80);
		int sourceElements_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "sourceElements");
		DebugLocation(1045, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1046:2: ( ( ( LineTerminator )* sourceElement ( LineTerminator )* )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1046:4: ( ( LineTerminator )* sourceElement ( LineTerminator )* )*
			{
			DebugLocation(1046, 4);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1046:4: ( ( LineTerminator )* sourceElement ( LineTerminator )* )*
			try { DebugEnterSubRule(267);
			while (true)
			{
				int alt267=2;
				try { DebugEnterDecision(267, false);
				try
				{
					alt267 = dfa267.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(267); }
				switch ( alt267 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1046:5: ( LineTerminator )* sourceElement ( LineTerminator )*
					{
					DebugLocation(1046, 5);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1046:5: ( LineTerminator )*
					try { DebugEnterSubRule(265);
					while (true)
					{
						int alt265=2;
						try { DebugEnterDecision(265, false);
						int LA265_0 = input.LA(1);

						if ((LA265_0==LineTerminator))
						{
							alt265 = 1;
						}


						} finally { DebugExitDecision(265); }
						switch ( alt265 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1046:5: LineTerminator
							{
							DebugLocation(1046, 5);
							Match(input,LineTerminator,Follow._LineTerminator_in_sourceElements5927); if (state.failed) return;

							}
							break;

						default:
							goto loop265;
						}
					}

					loop265:
						;

					} finally { DebugExitSubRule(265); }

					DebugLocation(1046, 21);
					PushFollow(Follow._sourceElement_in_sourceElements5930);
					sourceElement();
					PopFollow();
					if (state.failed) return;
					DebugLocation(1046, 35);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1046:35: ( LineTerminator )*
					try { DebugEnterSubRule(266);
					while (true)
					{
						int alt266=2;
						try { DebugEnterDecision(266, false);
						int LA266_0 = input.LA(1);

						if ((LA266_0==LineTerminator))
						{
							int LA266_1 = input.LA(2);

							if ((EvaluatePredicate(synpred344_AS3_fragment)))
							{
								alt266 = 1;
							}


						}


						} finally { DebugExitDecision(266); }
						switch ( alt266 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1046:35: LineTerminator
							{
							DebugLocation(1046, 35);
							Match(input,LineTerminator,Follow._LineTerminator_in_sourceElements5932); if (state.failed) return;

							}
							break;

						default:
							goto loop266;
						}
					}

					loop266:
						;

					} finally { DebugExitSubRule(266); }


					}
					break;

				default:
					goto loop267;
				}
			}

			loop267:
				;

			} finally { DebugExitSubRule(267); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("sourceElements", 80);
			LeaveRule("sourceElements", 80);
			LeaveRule_sourceElements();
			if (state.backtracking > 0) { Memoize(input, 80, sourceElements_StartIndex); }

		}
		DebugLocation(1047, 1);
		} finally { DebugExitRule(GrammarFileName, "sourceElements"); }
		return;

	}
	// $ANTLR end "sourceElements"

	partial void EnterRule_sourceElement();
	partial void LeaveRule_sourceElement();

	// $ANTLR start "sourceElement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1049:1: sourceElement : ( functionDeclaration | statement );
	[GrammarRule("sourceElement")]
	private void sourceElement()
	{
		EnterRule_sourceElement();
		EnterRule("sourceElement", 81);
		TraceIn("sourceElement", 81);
		int sourceElement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "sourceElement");
		DebugLocation(1049, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1050:2: ( functionDeclaration | statement )
			int alt268=2;
			try { DebugEnterDecision(268, false);
			int LA268_0 = input.LA(1);

			if ((LA268_0==95))
			{
				int LA268_1 = input.LA(2);

				if ((EvaluatePredicate(synpred346_AS3_fragment)))
				{
					alt268 = 1;
				}
				else if ((true))
				{
					alt268 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 268, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA268_0==BooleanLiteral||LA268_0==Identifier||(LA268_0>=NullLiteral && LA268_0<=NumericLiteral)||LA268_0==StringLiteral||LA268_0==34||LA268_0==42||(LA268_0>=46 && LA268_0<=47)||(LA268_0>=50 && LA268_0<=51)||LA268_0==61||LA268_0==76||(LA268_0>=80 && LA268_0<=81)||(LA268_0>=85 && LA268_0<=86)||(LA268_0>=88 && LA268_0<=89)||LA268_0==94||LA268_0==97||LA268_0==99||LA268_0==101||LA268_0==107||LA268_0==113||(LA268_0>=116 && LA268_0<=127)||LA268_0==132))
			{
				alt268 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 268, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(268); }
			switch (alt268)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1050:4: functionDeclaration
				{
				DebugLocation(1050, 4);
				PushFollow(Follow._functionDeclaration_in_sourceElement5946);
				functionDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1051:4: statement
				{
				DebugLocation(1051, 4);
				PushFollow(Follow._statement_in_sourceElement5951);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("sourceElement", 81);
			LeaveRule("sourceElement", 81);
			LeaveRule_sourceElement();
			if (state.backtracking > 0) { Memoize(input, 81, sourceElement_StartIndex); }

		}
		DebugLocation(1052, 1);
		} finally { DebugExitRule(GrammarFileName, "sourceElement"); }
		return;

	}
	// $ANTLR end "sourceElement"

	partial void EnterRule_packageDeclaration();
	partial void LeaveRule_packageDeclaration();

	// $ANTLR start "packageDeclaration"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1059:1: packageDeclaration : 'package' ( LineTerminator )* ( qualifiedName )? ( LineTerminator )* '{' ( LineTerminator )* packageElements ( LineTerminator )* '}' ;
	[GrammarRule("packageDeclaration")]
	private void packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 82);
		TraceIn("packageDeclaration", 82);
		int packageDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(1059, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:2: ( 'package' ( LineTerminator )* ( qualifiedName )? ( LineTerminator )* '{' ( LineTerminator )* packageElements ( LineTerminator )* '}' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:4: 'package' ( LineTerminator )* ( qualifiedName )? ( LineTerminator )* '{' ( LineTerminator )* packageElements ( LineTerminator )* '}'
			{
			DebugLocation(1060, 4);
			Match(input,109,Follow._109_in_packageDeclaration5967); if (state.failed) return;
			DebugLocation(1060, 14);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:14: ( LineTerminator )*
			try { DebugEnterSubRule(269);
			while (true)
			{
				int alt269=2;
				try { DebugEnterDecision(269, false);
				int LA269_0 = input.LA(1);

				if ((LA269_0==LineTerminator))
				{
					int LA269_2 = input.LA(2);

					if ((EvaluatePredicate(synpred347_AS3_fragment)))
					{
						alt269 = 1;
					}


				}


				} finally { DebugExitDecision(269); }
				switch ( alt269 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:14: LineTerminator
					{
					DebugLocation(1060, 14);
					Match(input,LineTerminator,Follow._LineTerminator_in_packageDeclaration5969); if (state.failed) return;

					}
					break;

				default:
					goto loop269;
				}
			}

			loop269:
				;

			} finally { DebugExitSubRule(269); }

			DebugLocation(1060, 30);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:30: ( qualifiedName )?
			int alt270=2;
			try { DebugEnterSubRule(270);
			try { DebugEnterDecision(270, false);
			int LA270_0 = input.LA(1);

			if ((LA270_0==Identifier))
			{
				alt270 = 1;
			}
			} finally { DebugExitDecision(270); }
			switch (alt270)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:30: qualifiedName
				{
				DebugLocation(1060, 30);
				PushFollow(Follow._qualifiedName_in_packageDeclaration5972);
				qualifiedName();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(270); }

			DebugLocation(1060, 45);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:45: ( LineTerminator )*
			try { DebugEnterSubRule(271);
			while (true)
			{
				int alt271=2;
				try { DebugEnterDecision(271, false);
				int LA271_0 = input.LA(1);

				if ((LA271_0==LineTerminator))
				{
					alt271 = 1;
				}


				} finally { DebugExitDecision(271); }
				switch ( alt271 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:45: LineTerminator
					{
					DebugLocation(1060, 45);
					Match(input,LineTerminator,Follow._LineTerminator_in_packageDeclaration5975); if (state.failed) return;

					}
					break;

				default:
					goto loop271;
				}
			}

			loop271:
				;

			} finally { DebugExitSubRule(271); }

			DebugLocation(1060, 61);
			Match(input,127,Follow._127_in_packageDeclaration5978); if (state.failed) return;
			DebugLocation(1060, 65);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:65: ( LineTerminator )*
			try { DebugEnterSubRule(272);
			while (true)
			{
				int alt272=2;
				try { DebugEnterDecision(272, false);
				int LA272_0 = input.LA(1);

				if ((LA272_0==LineTerminator))
				{
					int LA272_1 = input.LA(2);

					if ((EvaluatePredicate(synpred350_AS3_fragment)))
					{
						alt272 = 1;
					}


				}


				} finally { DebugExitDecision(272); }
				switch ( alt272 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:65: LineTerminator
					{
					DebugLocation(1060, 65);
					Match(input,LineTerminator,Follow._LineTerminator_in_packageDeclaration5980); if (state.failed) return;

					}
					break;

				default:
					goto loop272;
				}
			}

			loop272:
				;

			} finally { DebugExitSubRule(272); }

			DebugLocation(1060, 81);
			PushFollow(Follow._packageElements_in_packageDeclaration5983);
			packageElements();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1060, 97);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:97: ( LineTerminator )*
			try { DebugEnterSubRule(273);
			while (true)
			{
				int alt273=2;
				try { DebugEnterDecision(273, false);
				int LA273_0 = input.LA(1);

				if ((LA273_0==LineTerminator))
				{
					alt273 = 1;
				}


				} finally { DebugExitDecision(273); }
				switch ( alt273 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:97: LineTerminator
					{
					DebugLocation(1060, 97);
					Match(input,LineTerminator,Follow._LineTerminator_in_packageDeclaration5985); if (state.failed) return;

					}
					break;

				default:
					goto loop273;
				}
			}

			loop273:
				;

			} finally { DebugExitSubRule(273); }

			DebugLocation(1060, 113);
			Match(input,131,Follow._131_in_packageDeclaration5988); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("packageDeclaration", 82);
			LeaveRule("packageDeclaration", 82);
			LeaveRule_packageDeclaration();
			if (state.backtracking > 0) { Memoize(input, 82, packageDeclaration_StartIndex); }

		}
		DebugLocation(1061, 1);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return;

	}
	// $ANTLR end "packageDeclaration"

	partial void EnterRule_packageElements();
	partial void LeaveRule_packageElements();

	// $ANTLR start "packageElements"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1063:1: packageElements : ( ( LineTerminator )* packageElement ( LineTerminator )* )* ;
	[GrammarRule("packageElements")]
	private void packageElements()
	{
		EnterRule_packageElements();
		EnterRule("packageElements", 83);
		TraceIn("packageElements", 83);
		int packageElements_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "packageElements");
		DebugLocation(1063, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1064:2: ( ( ( LineTerminator )* packageElement ( LineTerminator )* )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1064:4: ( ( LineTerminator )* packageElement ( LineTerminator )* )*
			{
			DebugLocation(1064, 4);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1064:4: ( ( LineTerminator )* packageElement ( LineTerminator )* )*
			try { DebugEnterSubRule(276);
			while (true)
			{
				int alt276=2;
				try { DebugEnterDecision(276, false);
				try
				{
					alt276 = dfa276.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(276); }
				switch ( alt276 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1064:5: ( LineTerminator )* packageElement ( LineTerminator )*
					{
					DebugLocation(1064, 5);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1064:5: ( LineTerminator )*
					try { DebugEnterSubRule(274);
					while (true)
					{
						int alt274=2;
						try { DebugEnterDecision(274, false);
						int LA274_0 = input.LA(1);

						if ((LA274_0==LineTerminator))
						{
							int LA274_2 = input.LA(2);

							if ((EvaluatePredicate(synpred352_AS3_fragment)))
							{
								alt274 = 1;
							}


						}


						} finally { DebugExitDecision(274); }
						switch ( alt274 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1064:5: LineTerminator
							{
							DebugLocation(1064, 5);
							Match(input,LineTerminator,Follow._LineTerminator_in_packageElements6001); if (state.failed) return;

							}
							break;

						default:
							goto loop274;
						}
					}

					loop274:
						;

					} finally { DebugExitSubRule(274); }

					DebugLocation(1064, 21);
					PushFollow(Follow._packageElement_in_packageElements6004);
					packageElement();
					PopFollow();
					if (state.failed) return;
					DebugLocation(1064, 36);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1064:36: ( LineTerminator )*
					try { DebugEnterSubRule(275);
					while (true)
					{
						int alt275=2;
						try { DebugEnterDecision(275, false);
						int LA275_0 = input.LA(1);

						if ((LA275_0==LineTerminator))
						{
							int LA275_1 = input.LA(2);

							if ((EvaluatePredicate(synpred353_AS3_fragment)))
							{
								alt275 = 1;
							}


						}


						} finally { DebugExitDecision(275); }
						switch ( alt275 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1064:36: LineTerminator
							{
							DebugLocation(1064, 36);
							Match(input,LineTerminator,Follow._LineTerminator_in_packageElements6006); if (state.failed) return;

							}
							break;

						default:
							goto loop275;
						}
					}

					loop275:
						;

					} finally { DebugExitSubRule(275); }


					}
					break;

				default:
					goto loop276;
				}
			}

			loop276:
				;

			} finally { DebugExitSubRule(276); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("packageElements", 83);
			LeaveRule("packageElements", 83);
			LeaveRule_packageElements();
			if (state.backtracking > 0) { Memoize(input, 83, packageElements_StartIndex); }

		}
		DebugLocation(1065, 1);
		} finally { DebugExitRule(GrammarFileName, "packageElements"); }
		return;

	}
	// $ANTLR end "packageElements"

	partial void EnterRule_packageElement();
	partial void LeaveRule_packageElement();

	// $ANTLR start "packageElement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1067:1: packageElement : ( classDeclaration | interfaceDeclaration | statement );
	[GrammarRule("packageElement")]
	private void packageElement()
	{
		EnterRule_packageElement();
		EnterRule("packageElement", 84);
		TraceIn("packageElement", 84);
		int packageElement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "packageElement");
		DebugLocation(1067, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1068:2: ( classDeclaration | interfaceDeclaration | statement )
			int alt277=3;
			try { DebugEnterDecision(277, false);
			try
			{
				alt277 = dfa277.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(277); }
			switch (alt277)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1068:4: classDeclaration
				{
				DebugLocation(1068, 4);
				PushFollow(Follow._classDeclaration_in_packageElement6020);
				classDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1069:4: interfaceDeclaration
				{
				DebugLocation(1069, 4);
				PushFollow(Follow._interfaceDeclaration_in_packageElement6025);
				interfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1070:4: statement
				{
				DebugLocation(1070, 4);
				PushFollow(Follow._statement_in_packageElement6030);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("packageElement", 84);
			LeaveRule("packageElement", 84);
			LeaveRule_packageElement();
			if (state.backtracking > 0) { Memoize(input, 84, packageElement_StartIndex); }

		}
		DebugLocation(1071, 1);
		} finally { DebugExitRule(GrammarFileName, "packageElement"); }
		return;

	}
	// $ANTLR end "packageElement"

	partial void EnterRule_importStatement();
	partial void LeaveRule_importStatement();

	// $ANTLR start "importStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1073:1: importStatement : 'import' ( LineTerminator )* qualifiedName ( '.*' )? ( ( LineTerminator )* | ';' ) ;
	[GrammarRule("importStatement")]
	private void importStatement()
	{
		EnterRule_importStatement();
		EnterRule("importStatement", 85);
		TraceIn("importStatement", 85);
		int importStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "importStatement");
		DebugLocation(1073, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:2: ( 'import' ( LineTerminator )* qualifiedName ( '.*' )? ( ( LineTerminator )* | ';' ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:4: 'import' ( LineTerminator )* qualifiedName ( '.*' )? ( ( LineTerminator )* | ';' )
			{
			DebugLocation(1074, 4);
			Match(input,99,Follow._99_in_importStatement6041); if (state.failed) return;
			DebugLocation(1074, 13);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:13: ( LineTerminator )*
			try { DebugEnterSubRule(278);
			while (true)
			{
				int alt278=2;
				try { DebugEnterDecision(278, false);
				int LA278_0 = input.LA(1);

				if ((LA278_0==LineTerminator))
				{
					alt278 = 1;
				}


				} finally { DebugExitDecision(278); }
				switch ( alt278 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:13: LineTerminator
					{
					DebugLocation(1074, 13);
					Match(input,LineTerminator,Follow._LineTerminator_in_importStatement6043); if (state.failed) return;

					}
					break;

				default:
					goto loop278;
				}
			}

			loop278:
				;

			} finally { DebugExitSubRule(278); }

			DebugLocation(1074, 29);
			PushFollow(Follow._qualifiedName_in_importStatement6046);
			qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1074, 43);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:43: ( '.*' )?
			int alt279=2;
			try { DebugEnterSubRule(279);
			try { DebugEnterDecision(279, false);
			int LA279_0 = input.LA(1);

			if ((LA279_0==54))
			{
				alt279 = 1;
			}
			} finally { DebugExitDecision(279); }
			switch (alt279)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:43: '.*'
				{
				DebugLocation(1074, 43);
				Match(input,54,Follow._54_in_importStatement6048); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(279); }

			DebugLocation(1074, 49);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:49: ( ( LineTerminator )* | ';' )
			int alt281=2;
			try { DebugEnterSubRule(281);
			try { DebugEnterDecision(281, false);
			int LA281_0 = input.LA(1);

			if ((LA281_0==EOF||LA281_0==BooleanLiteral||LA281_0==Identifier||LA281_0==LineTerminator||(LA281_0>=NullLiteral && LA281_0<=NumericLiteral)||LA281_0==StringLiteral||LA281_0==34||LA281_0==42||(LA281_0>=46 && LA281_0<=47)||(LA281_0>=50 && LA281_0<=51)||LA281_0==76||(LA281_0>=80 && LA281_0<=82)||(LA281_0>=85 && LA281_0<=90)||LA281_0==92||(LA281_0>=94 && LA281_0<=95)||LA281_0==97||LA281_0==99||LA281_0==101||LA281_0==104||(LA281_0>=107 && LA281_0<=108)||(LA281_0>=110 && LA281_0<=113)||(LA281_0>=115 && LA281_0<=127)||(LA281_0>=131 && LA281_0<=132)))
			{
				alt281 = 1;
			}
			else if ((LA281_0==61))
			{
				int LA281_2 = input.LA(2);

				if ((EvaluatePredicate(synpred360_AS3_fragment)))
				{
					alt281 = 1;
				}
				else if ((true))
				{
					alt281 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 281, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 281, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(281); }
			switch (alt281)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:50: ( LineTerminator )*
				{
				DebugLocation(1074, 50);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:50: ( LineTerminator )*
				try { DebugEnterSubRule(280);
				while (true)
				{
					int alt280=2;
					try { DebugEnterDecision(280, false);
					int LA280_0 = input.LA(1);

					if ((LA280_0==LineTerminator))
					{
						int LA280_1 = input.LA(2);

						if ((EvaluatePredicate(synpred359_AS3_fragment)))
						{
							alt280 = 1;
						}


					}


					} finally { DebugExitDecision(280); }
					switch ( alt280 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:50: LineTerminator
						{
						DebugLocation(1074, 50);
						Match(input,LineTerminator,Follow._LineTerminator_in_importStatement6052); if (state.failed) return;

						}
						break;

					default:
						goto loop280;
					}
				}

				loop280:
					;

				} finally { DebugExitSubRule(280); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:68: ';'
				{
				DebugLocation(1074, 68);
				Match(input,61,Follow._61_in_importStatement6057); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(281); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("importStatement", 85);
			LeaveRule("importStatement", 85);
			LeaveRule_importStatement();
			if (state.backtracking > 0) { Memoize(input, 85, importStatement_StartIndex); }

		}
		DebugLocation(1075, 1);
		} finally { DebugExitRule(GrammarFileName, "importStatement"); }
		return;

	}
	// $ANTLR end "importStatement"

	partial void EnterRule_classDeclaration();
	partial void LeaveRule_classDeclaration();

	// $ANTLR start "classDeclaration"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1077:1: classDeclaration : ( 'final' )? ( LineTerminator )* ( 'public' | 'internal' ) ( LineTerminator )* normalClassDeclaration ;
	[GrammarRule("classDeclaration")]
	private void classDeclaration()
	{
		EnterRule_classDeclaration();
		EnterRule("classDeclaration", 86);
		TraceIn("classDeclaration", 86);
		int classDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classDeclaration");
		DebugLocation(1077, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1078:2: ( ( 'final' )? ( LineTerminator )* ( 'public' | 'internal' ) ( LineTerminator )* normalClassDeclaration )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1078:4: ( 'final' )? ( LineTerminator )* ( 'public' | 'internal' ) ( LineTerminator )* normalClassDeclaration
			{
			DebugLocation(1078, 4);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1078:4: ( 'final' )?
			int alt282=2;
			try { DebugEnterSubRule(282);
			try { DebugEnterDecision(282, false);
			int LA282_0 = input.LA(1);

			if ((LA282_0==92))
			{
				alt282 = 1;
			}
			} finally { DebugExitDecision(282); }
			switch (alt282)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1078:4: 'final'
				{
				DebugLocation(1078, 4);
				Match(input,92,Follow._92_in_classDeclaration6069); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(282); }

			DebugLocation(1078, 13);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1078:13: ( LineTerminator )*
			try { DebugEnterSubRule(283);
			while (true)
			{
				int alt283=2;
				try { DebugEnterDecision(283, false);
				int LA283_0 = input.LA(1);

				if ((LA283_0==LineTerminator))
				{
					alt283 = 1;
				}


				} finally { DebugExitDecision(283); }
				switch ( alt283 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1078:13: LineTerminator
					{
					DebugLocation(1078, 13);
					Match(input,LineTerminator,Follow._LineTerminator_in_classDeclaration6072); if (state.failed) return;

					}
					break;

				default:
					goto loop283;
				}
			}

			loop283:
				;

			} finally { DebugExitSubRule(283); }

			DebugLocation(1078, 29);
			if (input.LA(1)==104||input.LA(1)==112)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(1078, 53);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1078:53: ( LineTerminator )*
			try { DebugEnterSubRule(284);
			while (true)
			{
				int alt284=2;
				try { DebugEnterDecision(284, false);
				int LA284_0 = input.LA(1);

				if ((LA284_0==LineTerminator))
				{
					int LA284_2 = input.LA(2);

					if ((EvaluatePredicate(synpred364_AS3_fragment)))
					{
						alt284 = 1;
					}


				}


				} finally { DebugExitDecision(284); }
				switch ( alt284 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1078:53: LineTerminator
					{
					DebugLocation(1078, 53);
					Match(input,LineTerminator,Follow._LineTerminator_in_classDeclaration6083); if (state.failed) return;

					}
					break;

				default:
					goto loop284;
				}
			}

			loop284:
				;

			} finally { DebugExitSubRule(284); }

			DebugLocation(1078, 69);
			PushFollow(Follow._normalClassDeclaration_in_classDeclaration6086);
			normalClassDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classDeclaration", 86);
			LeaveRule("classDeclaration", 86);
			LeaveRule_classDeclaration();
			if (state.backtracking > 0) { Memoize(input, 86, classDeclaration_StartIndex); }

		}
		DebugLocation(1079, 1);
		} finally { DebugExitRule(GrammarFileName, "classDeclaration"); }
		return;

	}
	// $ANTLR end "classDeclaration"

	partial void EnterRule_normalClassDeclaration();
	partial void LeaveRule_normalClassDeclaration();

	// $ANTLR start "normalClassDeclaration"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1081:1: normalClassDeclaration : ( 'final' )? ( LineTerminator )* 'class' ( LineTerminator )* qualifiedName ( LineTerminator )* ( inheritance )? ( LineTerminator )* ( interfaceImplementations )? ( LineTerminator )* '{' ( LineTerminator )* classElements ( LineTerminator )* '}' ;
	[GrammarRule("normalClassDeclaration")]
	private void normalClassDeclaration()
	{
		EnterRule_normalClassDeclaration();
		EnterRule("normalClassDeclaration", 87);
		TraceIn("normalClassDeclaration", 87);
		int normalClassDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "normalClassDeclaration");
		DebugLocation(1081, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:2: ( ( 'final' )? ( LineTerminator )* 'class' ( LineTerminator )* qualifiedName ( LineTerminator )* ( inheritance )? ( LineTerminator )* ( interfaceImplementations )? ( LineTerminator )* '{' ( LineTerminator )* classElements ( LineTerminator )* '}' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:4: ( 'final' )? ( LineTerminator )* 'class' ( LineTerminator )* qualifiedName ( LineTerminator )* ( inheritance )? ( LineTerminator )* ( interfaceImplementations )? ( LineTerminator )* '{' ( LineTerminator )* classElements ( LineTerminator )* '}'
			{
			DebugLocation(1082, 4);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:4: ( 'final' )?
			int alt285=2;
			try { DebugEnterSubRule(285);
			try { DebugEnterDecision(285, false);
			int LA285_0 = input.LA(1);

			if ((LA285_0==92))
			{
				alt285 = 1;
			}
			} finally { DebugExitDecision(285); }
			switch (alt285)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:4: 'final'
				{
				DebugLocation(1082, 4);
				Match(input,92,Follow._92_in_normalClassDeclaration6097); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(285); }

			DebugLocation(1082, 13);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:13: ( LineTerminator )*
			try { DebugEnterSubRule(286);
			while (true)
			{
				int alt286=2;
				try { DebugEnterDecision(286, false);
				int LA286_0 = input.LA(1);

				if ((LA286_0==LineTerminator))
				{
					alt286 = 1;
				}


				} finally { DebugExitDecision(286); }
				switch ( alt286 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:13: LineTerminator
					{
					DebugLocation(1082, 13);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalClassDeclaration6100); if (state.failed) return;

					}
					break;

				default:
					goto loop286;
				}
			}

			loop286:
				;

			} finally { DebugExitSubRule(286); }

			DebugLocation(1082, 29);
			Match(input,84,Follow._84_in_normalClassDeclaration6103); if (state.failed) return;
			DebugLocation(1082, 37);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:37: ( LineTerminator )*
			try { DebugEnterSubRule(287);
			while (true)
			{
				int alt287=2;
				try { DebugEnterDecision(287, false);
				int LA287_0 = input.LA(1);

				if ((LA287_0==LineTerminator))
				{
					alt287 = 1;
				}


				} finally { DebugExitDecision(287); }
				switch ( alt287 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:37: LineTerminator
					{
					DebugLocation(1082, 37);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalClassDeclaration6105); if (state.failed) return;

					}
					break;

				default:
					goto loop287;
				}
			}

			loop287:
				;

			} finally { DebugExitSubRule(287); }

			DebugLocation(1082, 53);
			PushFollow(Follow._qualifiedName_in_normalClassDeclaration6108);
			qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1082, 67);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:67: ( LineTerminator )*
			try { DebugEnterSubRule(288);
			while (true)
			{
				int alt288=2;
				try { DebugEnterDecision(288, false);
				int LA288_0 = input.LA(1);

				if ((LA288_0==LineTerminator))
				{
					int LA288_2 = input.LA(2);

					if ((EvaluatePredicate(synpred368_AS3_fragment)))
					{
						alt288 = 1;
					}


				}


				} finally { DebugExitDecision(288); }
				switch ( alt288 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:67: LineTerminator
					{
					DebugLocation(1082, 67);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalClassDeclaration6110); if (state.failed) return;

					}
					break;

				default:
					goto loop288;
				}
			}

			loop288:
				;

			} finally { DebugExitSubRule(288); }

			DebugLocation(1082, 83);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:83: ( inheritance )?
			int alt289=2;
			try { DebugEnterSubRule(289);
			try { DebugEnterDecision(289, false);
			int LA289_0 = input.LA(1);

			if ((LA289_0==91))
			{
				alt289 = 1;
			}
			} finally { DebugExitDecision(289); }
			switch (alt289)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:83: inheritance
				{
				DebugLocation(1082, 83);
				PushFollow(Follow._inheritance_in_normalClassDeclaration6113);
				inheritance();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(289); }

			DebugLocation(1082, 96);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:96: ( LineTerminator )*
			try { DebugEnterSubRule(290);
			while (true)
			{
				int alt290=2;
				try { DebugEnterDecision(290, false);
				int LA290_0 = input.LA(1);

				if ((LA290_0==LineTerminator))
				{
					int LA290_2 = input.LA(2);

					if ((EvaluatePredicate(synpred370_AS3_fragment)))
					{
						alt290 = 1;
					}


				}


				} finally { DebugExitDecision(290); }
				switch ( alt290 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:96: LineTerminator
					{
					DebugLocation(1082, 96);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalClassDeclaration6116); if (state.failed) return;

					}
					break;

				default:
					goto loop290;
				}
			}

			loop290:
				;

			} finally { DebugExitSubRule(290); }

			DebugLocation(1082, 112);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:112: ( interfaceImplementations )?
			int alt291=2;
			try { DebugEnterSubRule(291);
			try { DebugEnterDecision(291, false);
			int LA291_0 = input.LA(1);

			if ((LA291_0==98))
			{
				alt291 = 1;
			}
			} finally { DebugExitDecision(291); }
			switch (alt291)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:112: interfaceImplementations
				{
				DebugLocation(1082, 112);
				PushFollow(Follow._interfaceImplementations_in_normalClassDeclaration6119);
				interfaceImplementations();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(291); }

			DebugLocation(1082, 138);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:138: ( LineTerminator )*
			try { DebugEnterSubRule(292);
			while (true)
			{
				int alt292=2;
				try { DebugEnterDecision(292, false);
				int LA292_0 = input.LA(1);

				if ((LA292_0==LineTerminator))
				{
					alt292 = 1;
				}


				} finally { DebugExitDecision(292); }
				switch ( alt292 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:138: LineTerminator
					{
					DebugLocation(1082, 138);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalClassDeclaration6122); if (state.failed) return;

					}
					break;

				default:
					goto loop292;
				}
			}

			loop292:
				;

			} finally { DebugExitSubRule(292); }

			DebugLocation(1082, 154);
			Match(input,127,Follow._127_in_normalClassDeclaration6125); if (state.failed) return;
			DebugLocation(1082, 158);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:158: ( LineTerminator )*
			try { DebugEnterSubRule(293);
			while (true)
			{
				int alt293=2;
				try { DebugEnterDecision(293, false);
				int LA293_0 = input.LA(1);

				if ((LA293_0==LineTerminator))
				{
					int LA293_1 = input.LA(2);

					if ((EvaluatePredicate(synpred373_AS3_fragment)))
					{
						alt293 = 1;
					}


				}


				} finally { DebugExitDecision(293); }
				switch ( alt293 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:158: LineTerminator
					{
					DebugLocation(1082, 158);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalClassDeclaration6127); if (state.failed) return;

					}
					break;

				default:
					goto loop293;
				}
			}

			loop293:
				;

			} finally { DebugExitSubRule(293); }

			DebugLocation(1082, 174);
			PushFollow(Follow._classElements_in_normalClassDeclaration6130);
			classElements();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1082, 188);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:188: ( LineTerminator )*
			try { DebugEnterSubRule(294);
			while (true)
			{
				int alt294=2;
				try { DebugEnterDecision(294, false);
				int LA294_0 = input.LA(1);

				if ((LA294_0==LineTerminator))
				{
					alt294 = 1;
				}


				} finally { DebugExitDecision(294); }
				switch ( alt294 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:188: LineTerminator
					{
					DebugLocation(1082, 188);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalClassDeclaration6132); if (state.failed) return;

					}
					break;

				default:
					goto loop294;
				}
			}

			loop294:
				;

			} finally { DebugExitSubRule(294); }

			DebugLocation(1082, 204);
			Match(input,131,Follow._131_in_normalClassDeclaration6135); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("normalClassDeclaration", 87);
			LeaveRule("normalClassDeclaration", 87);
			LeaveRule_normalClassDeclaration();
			if (state.backtracking > 0) { Memoize(input, 87, normalClassDeclaration_StartIndex); }

		}
		DebugLocation(1083, 1);
		} finally { DebugExitRule(GrammarFileName, "normalClassDeclaration"); }
		return;

	}
	// $ANTLR end "normalClassDeclaration"

	partial void EnterRule_interfaceDeclaration();
	partial void LeaveRule_interfaceDeclaration();

	// $ANTLR start "interfaceDeclaration"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1085:1: interfaceDeclaration : ( 'final' )? ( LineTerminator )* ( 'public' | 'internal' ) ( LineTerminator )* normalInterfaceDeclaration ;
	[GrammarRule("interfaceDeclaration")]
	private void interfaceDeclaration()
	{
		EnterRule_interfaceDeclaration();
		EnterRule("interfaceDeclaration", 88);
		TraceIn("interfaceDeclaration", 88);
		int interfaceDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceDeclaration");
		DebugLocation(1085, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1086:2: ( ( 'final' )? ( LineTerminator )* ( 'public' | 'internal' ) ( LineTerminator )* normalInterfaceDeclaration )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1086:4: ( 'final' )? ( LineTerminator )* ( 'public' | 'internal' ) ( LineTerminator )* normalInterfaceDeclaration
			{
			DebugLocation(1086, 4);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1086:4: ( 'final' )?
			int alt295=2;
			try { DebugEnterSubRule(295);
			try { DebugEnterDecision(295, false);
			int LA295_0 = input.LA(1);

			if ((LA295_0==92))
			{
				alt295 = 1;
			}
			} finally { DebugExitDecision(295); }
			switch (alt295)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1086:4: 'final'
				{
				DebugLocation(1086, 4);
				Match(input,92,Follow._92_in_interfaceDeclaration6147); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(295); }

			DebugLocation(1086, 13);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1086:13: ( LineTerminator )*
			try { DebugEnterSubRule(296);
			while (true)
			{
				int alt296=2;
				try { DebugEnterDecision(296, false);
				int LA296_0 = input.LA(1);

				if ((LA296_0==LineTerminator))
				{
					alt296 = 1;
				}


				} finally { DebugExitDecision(296); }
				switch ( alt296 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1086:13: LineTerminator
					{
					DebugLocation(1086, 13);
					Match(input,LineTerminator,Follow._LineTerminator_in_interfaceDeclaration6150); if (state.failed) return;

					}
					break;

				default:
					goto loop296;
				}
			}

			loop296:
				;

			} finally { DebugExitSubRule(296); }

			DebugLocation(1086, 29);
			if (input.LA(1)==104||input.LA(1)==112)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(1086, 53);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1086:53: ( LineTerminator )*
			try { DebugEnterSubRule(297);
			while (true)
			{
				int alt297=2;
				try { DebugEnterDecision(297, false);
				int LA297_0 = input.LA(1);

				if ((LA297_0==LineTerminator))
				{
					int LA297_2 = input.LA(2);

					if ((EvaluatePredicate(synpred378_AS3_fragment)))
					{
						alt297 = 1;
					}


				}


				} finally { DebugExitDecision(297); }
				switch ( alt297 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1086:53: LineTerminator
					{
					DebugLocation(1086, 53);
					Match(input,LineTerminator,Follow._LineTerminator_in_interfaceDeclaration6161); if (state.failed) return;

					}
					break;

				default:
					goto loop297;
				}
			}

			loop297:
				;

			} finally { DebugExitSubRule(297); }

			DebugLocation(1086, 69);
			PushFollow(Follow._normalInterfaceDeclaration_in_interfaceDeclaration6164);
			normalInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceDeclaration", 88);
			LeaveRule("interfaceDeclaration", 88);
			LeaveRule_interfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 88, interfaceDeclaration_StartIndex); }

		}
		DebugLocation(1087, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceDeclaration"); }
		return;

	}
	// $ANTLR end "interfaceDeclaration"

	partial void EnterRule_normalInterfaceDeclaration();
	partial void LeaveRule_normalInterfaceDeclaration();

	// $ANTLR start "normalInterfaceDeclaration"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1089:1: normalInterfaceDeclaration : ( 'final' )? ( LineTerminator )* 'interface' ( LineTerminator )* qualifiedName ( LineTerminator )* ( inheritance )? ( LineTerminator )* '{' ( LineTerminator )* interfaceElements ( LineTerminator )* '}' ;
	[GrammarRule("normalInterfaceDeclaration")]
	private void normalInterfaceDeclaration()
	{
		EnterRule_normalInterfaceDeclaration();
		EnterRule("normalInterfaceDeclaration", 89);
		TraceIn("normalInterfaceDeclaration", 89);
		int normalInterfaceDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "normalInterfaceDeclaration");
		DebugLocation(1089, 2);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:3: ( ( 'final' )? ( LineTerminator )* 'interface' ( LineTerminator )* qualifiedName ( LineTerminator )* ( inheritance )? ( LineTerminator )* '{' ( LineTerminator )* interfaceElements ( LineTerminator )* '}' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:5: ( 'final' )? ( LineTerminator )* 'interface' ( LineTerminator )* qualifiedName ( LineTerminator )* ( inheritance )? ( LineTerminator )* '{' ( LineTerminator )* interfaceElements ( LineTerminator )* '}'
			{
			DebugLocation(1090, 5);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:5: ( 'final' )?
			int alt298=2;
			try { DebugEnterSubRule(298);
			try { DebugEnterDecision(298, false);
			int LA298_0 = input.LA(1);

			if ((LA298_0==92))
			{
				alt298 = 1;
			}
			} finally { DebugExitDecision(298); }
			switch (alt298)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:5: 'final'
				{
				DebugLocation(1090, 5);
				Match(input,92,Follow._92_in_normalInterfaceDeclaration6176); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(298); }

			DebugLocation(1090, 14);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:14: ( LineTerminator )*
			try { DebugEnterSubRule(299);
			while (true)
			{
				int alt299=2;
				try { DebugEnterDecision(299, false);
				int LA299_0 = input.LA(1);

				if ((LA299_0==LineTerminator))
				{
					alt299 = 1;
				}


				} finally { DebugExitDecision(299); }
				switch ( alt299 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:14: LineTerminator
					{
					DebugLocation(1090, 14);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalInterfaceDeclaration6179); if (state.failed) return;

					}
					break;

				default:
					goto loop299;
				}
			}

			loop299:
				;

			} finally { DebugExitSubRule(299); }

			DebugLocation(1090, 30);
			Match(input,103,Follow._103_in_normalInterfaceDeclaration6182); if (state.failed) return;
			DebugLocation(1090, 42);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:42: ( LineTerminator )*
			try { DebugEnterSubRule(300);
			while (true)
			{
				int alt300=2;
				try { DebugEnterDecision(300, false);
				int LA300_0 = input.LA(1);

				if ((LA300_0==LineTerminator))
				{
					alt300 = 1;
				}


				} finally { DebugExitDecision(300); }
				switch ( alt300 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:42: LineTerminator
					{
					DebugLocation(1090, 42);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalInterfaceDeclaration6184); if (state.failed) return;

					}
					break;

				default:
					goto loop300;
				}
			}

			loop300:
				;

			} finally { DebugExitSubRule(300); }

			DebugLocation(1090, 58);
			PushFollow(Follow._qualifiedName_in_normalInterfaceDeclaration6187);
			qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1090, 72);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:72: ( LineTerminator )*
			try { DebugEnterSubRule(301);
			while (true)
			{
				int alt301=2;
				try { DebugEnterDecision(301, false);
				int LA301_0 = input.LA(1);

				if ((LA301_0==LineTerminator))
				{
					int LA301_2 = input.LA(2);

					if ((EvaluatePredicate(synpred382_AS3_fragment)))
					{
						alt301 = 1;
					}


				}


				} finally { DebugExitDecision(301); }
				switch ( alt301 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:72: LineTerminator
					{
					DebugLocation(1090, 72);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalInterfaceDeclaration6189); if (state.failed) return;

					}
					break;

				default:
					goto loop301;
				}
			}

			loop301:
				;

			} finally { DebugExitSubRule(301); }

			DebugLocation(1090, 88);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:88: ( inheritance )?
			int alt302=2;
			try { DebugEnterSubRule(302);
			try { DebugEnterDecision(302, false);
			int LA302_0 = input.LA(1);

			if ((LA302_0==91))
			{
				alt302 = 1;
			}
			} finally { DebugExitDecision(302); }
			switch (alt302)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:88: inheritance
				{
				DebugLocation(1090, 88);
				PushFollow(Follow._inheritance_in_normalInterfaceDeclaration6192);
				inheritance();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(302); }

			DebugLocation(1090, 101);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:101: ( LineTerminator )*
			try { DebugEnterSubRule(303);
			while (true)
			{
				int alt303=2;
				try { DebugEnterDecision(303, false);
				int LA303_0 = input.LA(1);

				if ((LA303_0==LineTerminator))
				{
					alt303 = 1;
				}


				} finally { DebugExitDecision(303); }
				switch ( alt303 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:101: LineTerminator
					{
					DebugLocation(1090, 101);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalInterfaceDeclaration6195); if (state.failed) return;

					}
					break;

				default:
					goto loop303;
				}
			}

			loop303:
				;

			} finally { DebugExitSubRule(303); }

			DebugLocation(1090, 117);
			Match(input,127,Follow._127_in_normalInterfaceDeclaration6198); if (state.failed) return;
			DebugLocation(1090, 121);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:121: ( LineTerminator )*
			try { DebugEnterSubRule(304);
			while (true)
			{
				int alt304=2;
				try { DebugEnterDecision(304, false);
				int LA304_0 = input.LA(1);

				if ((LA304_0==LineTerminator))
				{
					int LA304_1 = input.LA(2);

					if ((EvaluatePredicate(synpred385_AS3_fragment)))
					{
						alt304 = 1;
					}


				}


				} finally { DebugExitDecision(304); }
				switch ( alt304 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:121: LineTerminator
					{
					DebugLocation(1090, 121);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalInterfaceDeclaration6200); if (state.failed) return;

					}
					break;

				default:
					goto loop304;
				}
			}

			loop304:
				;

			} finally { DebugExitSubRule(304); }

			DebugLocation(1090, 137);
			PushFollow(Follow._interfaceElements_in_normalInterfaceDeclaration6203);
			interfaceElements();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1090, 155);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:155: ( LineTerminator )*
			try { DebugEnterSubRule(305);
			while (true)
			{
				int alt305=2;
				try { DebugEnterDecision(305, false);
				int LA305_0 = input.LA(1);

				if ((LA305_0==LineTerminator))
				{
					alt305 = 1;
				}


				} finally { DebugExitDecision(305); }
				switch ( alt305 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:155: LineTerminator
					{
					DebugLocation(1090, 155);
					Match(input,LineTerminator,Follow._LineTerminator_in_normalInterfaceDeclaration6205); if (state.failed) return;

					}
					break;

				default:
					goto loop305;
				}
			}

			loop305:
				;

			} finally { DebugExitSubRule(305); }

			DebugLocation(1090, 171);
			Match(input,131,Follow._131_in_normalInterfaceDeclaration6208); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("normalInterfaceDeclaration", 89);
			LeaveRule("normalInterfaceDeclaration", 89);
			LeaveRule_normalInterfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 89, normalInterfaceDeclaration_StartIndex); }

		}
		DebugLocation(1091, 2);
		} finally { DebugExitRule(GrammarFileName, "normalInterfaceDeclaration"); }
		return;

	}
	// $ANTLR end "normalInterfaceDeclaration"

	partial void EnterRule_inheritance();
	partial void LeaveRule_inheritance();

	// $ANTLR start "inheritance"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1101:1: inheritance : 'extends' ( LineTerminator )* qualifiedName ;
	[GrammarRule("inheritance")]
	private void inheritance()
	{
		EnterRule_inheritance();
		EnterRule("inheritance", 90);
		TraceIn("inheritance", 90);
		int inheritance_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "inheritance");
		DebugLocation(1101, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1102:2: ( 'extends' ( LineTerminator )* qualifiedName )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1102:4: 'extends' ( LineTerminator )* qualifiedName
			{
			DebugLocation(1102, 4);
			Match(input,91,Follow._91_in_inheritance6228); if (state.failed) return;
			DebugLocation(1102, 14);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1102:14: ( LineTerminator )*
			try { DebugEnterSubRule(306);
			while (true)
			{
				int alt306=2;
				try { DebugEnterDecision(306, false);
				int LA306_0 = input.LA(1);

				if ((LA306_0==LineTerminator))
				{
					alt306 = 1;
				}


				} finally { DebugExitDecision(306); }
				switch ( alt306 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1102:14: LineTerminator
					{
					DebugLocation(1102, 14);
					Match(input,LineTerminator,Follow._LineTerminator_in_inheritance6230); if (state.failed) return;

					}
					break;

				default:
					goto loop306;
				}
			}

			loop306:
				;

			} finally { DebugExitSubRule(306); }

			DebugLocation(1102, 30);
			PushFollow(Follow._qualifiedName_in_inheritance6233);
			qualifiedName();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("inheritance", 90);
			LeaveRule("inheritance", 90);
			LeaveRule_inheritance();
			if (state.backtracking > 0) { Memoize(input, 90, inheritance_StartIndex); }

		}
		DebugLocation(1103, 1);
		} finally { DebugExitRule(GrammarFileName, "inheritance"); }
		return;

	}
	// $ANTLR end "inheritance"

	partial void EnterRule_interfaceImplementations();
	partial void LeaveRule_interfaceImplementations();

	// $ANTLR start "interfaceImplementations"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1105:1: interfaceImplementations : 'implements' ( LineTerminator )* qualifiedName ( ( LineTerminator )* ',' ( LineTerminator )* qualifiedName )* ;
	[GrammarRule("interfaceImplementations")]
	private void interfaceImplementations()
	{
		EnterRule_interfaceImplementations();
		EnterRule("interfaceImplementations", 91);
		TraceIn("interfaceImplementations", 91);
		int interfaceImplementations_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceImplementations");
		DebugLocation(1105, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1106:2: ( 'implements' ( LineTerminator )* qualifiedName ( ( LineTerminator )* ',' ( LineTerminator )* qualifiedName )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1106:4: 'implements' ( LineTerminator )* qualifiedName ( ( LineTerminator )* ',' ( LineTerminator )* qualifiedName )*
			{
			DebugLocation(1106, 4);
			Match(input,98,Follow._98_in_interfaceImplementations6244); if (state.failed) return;
			DebugLocation(1106, 17);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1106:17: ( LineTerminator )*
			try { DebugEnterSubRule(307);
			while (true)
			{
				int alt307=2;
				try { DebugEnterDecision(307, false);
				int LA307_0 = input.LA(1);

				if ((LA307_0==LineTerminator))
				{
					alt307 = 1;
				}


				} finally { DebugExitDecision(307); }
				switch ( alt307 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1106:17: LineTerminator
					{
					DebugLocation(1106, 17);
					Match(input,LineTerminator,Follow._LineTerminator_in_interfaceImplementations6246); if (state.failed) return;

					}
					break;

				default:
					goto loop307;
				}
			}

			loop307:
				;

			} finally { DebugExitSubRule(307); }

			DebugLocation(1106, 33);
			PushFollow(Follow._qualifiedName_in_interfaceImplementations6249);
			qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1106, 47);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1106:47: ( ( LineTerminator )* ',' ( LineTerminator )* qualifiedName )*
			try { DebugEnterSubRule(310);
			while (true)
			{
				int alt310=2;
				try { DebugEnterDecision(310, false);
				try
				{
					alt310 = dfa310.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(310); }
				switch ( alt310 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1106:48: ( LineTerminator )* ',' ( LineTerminator )* qualifiedName
					{
					DebugLocation(1106, 48);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1106:48: ( LineTerminator )*
					try { DebugEnterSubRule(308);
					while (true)
					{
						int alt308=2;
						try { DebugEnterDecision(308, false);
						int LA308_0 = input.LA(1);

						if ((LA308_0==LineTerminator))
						{
							alt308 = 1;
						}


						} finally { DebugExitDecision(308); }
						switch ( alt308 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1106:48: LineTerminator
							{
							DebugLocation(1106, 48);
							Match(input,LineTerminator,Follow._LineTerminator_in_interfaceImplementations6252); if (state.failed) return;

							}
							break;

						default:
							goto loop308;
						}
					}

					loop308:
						;

					} finally { DebugExitSubRule(308); }

					DebugLocation(1106, 64);
					Match(input,49,Follow._49_in_interfaceImplementations6255); if (state.failed) return;
					DebugLocation(1106, 68);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1106:68: ( LineTerminator )*
					try { DebugEnterSubRule(309);
					while (true)
					{
						int alt309=2;
						try { DebugEnterDecision(309, false);
						int LA309_0 = input.LA(1);

						if ((LA309_0==LineTerminator))
						{
							alt309 = 1;
						}


						} finally { DebugExitDecision(309); }
						switch ( alt309 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1106:68: LineTerminator
							{
							DebugLocation(1106, 68);
							Match(input,LineTerminator,Follow._LineTerminator_in_interfaceImplementations6257); if (state.failed) return;

							}
							break;

						default:
							goto loop309;
						}
					}

					loop309:
						;

					} finally { DebugExitSubRule(309); }

					DebugLocation(1106, 84);
					PushFollow(Follow._qualifiedName_in_interfaceImplementations6260);
					qualifiedName();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop310;
				}
			}

			loop310:
				;

			} finally { DebugExitSubRule(310); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceImplementations", 91);
			LeaveRule("interfaceImplementations", 91);
			LeaveRule_interfaceImplementations();
			if (state.backtracking > 0) { Memoize(input, 91, interfaceImplementations_StartIndex); }

		}
		DebugLocation(1107, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceImplementations"); }
		return;

	}
	// $ANTLR end "interfaceImplementations"

	partial void EnterRule_classElements();
	partial void LeaveRule_classElements();

	// $ANTLR start "classElements"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1109:1: classElements : ( ( LineTerminator )* classElement ( LineTerminator )* )* ;
	[GrammarRule("classElements")]
	private void classElements()
	{
		EnterRule_classElements();
		EnterRule("classElements", 92);
		TraceIn("classElements", 92);
		int classElements_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classElements");
		DebugLocation(1109, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1110:2: ( ( ( LineTerminator )* classElement ( LineTerminator )* )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1110:4: ( ( LineTerminator )* classElement ( LineTerminator )* )*
			{
			DebugLocation(1110, 4);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1110:4: ( ( LineTerminator )* classElement ( LineTerminator )* )*
			try { DebugEnterSubRule(313);
			while (true)
			{
				int alt313=2;
				try { DebugEnterDecision(313, false);
				try
				{
					alt313 = dfa313.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(313); }
				switch ( alt313 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1110:5: ( LineTerminator )* classElement ( LineTerminator )*
					{
					DebugLocation(1110, 5);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1110:5: ( LineTerminator )*
					try { DebugEnterSubRule(311);
					while (true)
					{
						int alt311=2;
						try { DebugEnterDecision(311, false);
						int LA311_0 = input.LA(1);

						if ((LA311_0==LineTerminator))
						{
							int LA311_2 = input.LA(2);

							if ((EvaluatePredicate(synpred392_AS3_fragment)))
							{
								alt311 = 1;
							}


						}


						} finally { DebugExitDecision(311); }
						switch ( alt311 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1110:5: LineTerminator
							{
							DebugLocation(1110, 5);
							Match(input,LineTerminator,Follow._LineTerminator_in_classElements6274); if (state.failed) return;

							}
							break;

						default:
							goto loop311;
						}
					}

					loop311:
						;

					} finally { DebugExitSubRule(311); }

					DebugLocation(1110, 21);
					PushFollow(Follow._classElement_in_classElements6277);
					classElement();
					PopFollow();
					if (state.failed) return;
					DebugLocation(1110, 34);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1110:34: ( LineTerminator )*
					try { DebugEnterSubRule(312);
					while (true)
					{
						int alt312=2;
						try { DebugEnterDecision(312, false);
						int LA312_0 = input.LA(1);

						if ((LA312_0==LineTerminator))
						{
							int LA312_1 = input.LA(2);

							if ((EvaluatePredicate(synpred393_AS3_fragment)))
							{
								alt312 = 1;
							}


						}


						} finally { DebugExitDecision(312); }
						switch ( alt312 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1110:34: LineTerminator
							{
							DebugLocation(1110, 34);
							Match(input,LineTerminator,Follow._LineTerminator_in_classElements6279); if (state.failed) return;

							}
							break;

						default:
							goto loop312;
						}
					}

					loop312:
						;

					} finally { DebugExitSubRule(312); }


					}
					break;

				default:
					goto loop313;
				}
			}

			loop313:
				;

			} finally { DebugExitSubRule(313); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classElements", 92);
			LeaveRule("classElements", 92);
			LeaveRule_classElements();
			if (state.backtracking > 0) { Memoize(input, 92, classElements_StartIndex); }

		}
		DebugLocation(1111, 1);
		} finally { DebugExitRule(GrammarFileName, "classElements"); }
		return;

	}
	// $ANTLR end "classElements"

	partial void EnterRule_classMember();
	partial void LeaveRule_classMember();

	// $ANTLR start "classMember"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1113:1: classMember : ( ( 'override' )? ( LineTerminator )* ( namespace )? ( LineTerminator )* ( 'override' )? ( LineTerminator )* functionDeclaration | ( 'static' )? ( LineTerminator )* ( namespace )? ( LineTerminator )* ( 'static' )? ( LineTerminator )* ( functionDeclaration | variableStatement ) );
	[GrammarRule("classMember")]
	private void classMember()
	{
		EnterRule_classMember();
		EnterRule("classMember", 93);
		TraceIn("classMember", 93);
		int classMember_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classMember");
		DebugLocation(1113, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:2: ( ( 'override' )? ( LineTerminator )* ( namespace )? ( LineTerminator )* ( 'override' )? ( LineTerminator )* functionDeclaration | ( 'static' )? ( LineTerminator )* ( namespace )? ( LineTerminator )* ( 'static' )? ( LineTerminator )* ( functionDeclaration | variableStatement ) )
			int alt327=2;
			try { DebugEnterDecision(327, false);
			switch (input.LA(1))
			{
			case 108:
				{
				alt327 = 1;
				}
				break;
			case LineTerminator:
				{
				int LA327_2 = input.LA(2);

				if ((EvaluatePredicate(synpred401_AS3_fragment)))
				{
					alt327 = 1;
				}
				else if ((true))
				{
					alt327 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 327, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 112:
				{
				int LA327_3 = input.LA(2);

				if ((EvaluatePredicate(synpred401_AS3_fragment)))
				{
					alt327 = 1;
				}
				else if ((true))
				{
					alt327 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 327, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 110:
				{
				int LA327_4 = input.LA(2);

				if ((EvaluatePredicate(synpred401_AS3_fragment)))
				{
					alt327 = 1;
				}
				else if ((true))
				{
					alt327 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 327, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 111:
				{
				int LA327_5 = input.LA(2);

				if ((EvaluatePredicate(synpred401_AS3_fragment)))
				{
					alt327 = 1;
				}
				else if ((true))
				{
					alt327 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 327, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 104:
				{
				int LA327_6 = input.LA(2);

				if ((EvaluatePredicate(synpred401_AS3_fragment)))
				{
					alt327 = 1;
				}
				else if ((true))
				{
					alt327 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 327, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA327_7 = input.LA(2);

				if ((EvaluatePredicate(synpred401_AS3_fragment)))
				{
					alt327 = 1;
				}
				else if ((true))
				{
					alt327 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 327, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 95:
				{
				int LA327_8 = input.LA(2);

				if ((EvaluatePredicate(synpred401_AS3_fragment)))
				{
					alt327 = 1;
				}
				else if ((true))
				{
					alt327 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 327, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 85:
			case 115:
			case 123:
				{
				alt327 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 327, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(327); }
			switch (alt327)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:4: ( 'override' )? ( LineTerminator )* ( namespace )? ( LineTerminator )* ( 'override' )? ( LineTerminator )* functionDeclaration
				{
				DebugLocation(1114, 4);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:4: ( 'override' )?
				int alt314=2;
				try { DebugEnterSubRule(314);
				try { DebugEnterDecision(314, false);
				int LA314_0 = input.LA(1);

				if ((LA314_0==108))
				{
					int LA314_1 = input.LA(2);

					if ((EvaluatePredicate(synpred395_AS3_fragment)))
					{
						alt314 = 1;
					}
				}
				} finally { DebugExitDecision(314); }
				switch (alt314)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:4: 'override'
					{
					DebugLocation(1114, 4);
					Match(input,108,Follow._108_in_classMember6293); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(314); }

				DebugLocation(1114, 16);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:16: ( LineTerminator )*
				try { DebugEnterSubRule(315);
				while (true)
				{
					int alt315=2;
					try { DebugEnterDecision(315, false);
					int LA315_0 = input.LA(1);

					if ((LA315_0==LineTerminator))
					{
						int LA315_2 = input.LA(2);

						if ((EvaluatePredicate(synpred396_AS3_fragment)))
						{
							alt315 = 1;
						}


					}


					} finally { DebugExitDecision(315); }
					switch ( alt315 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:16: LineTerminator
						{
						DebugLocation(1114, 16);
						Match(input,LineTerminator,Follow._LineTerminator_in_classMember6296); if (state.failed) return;

						}
						break;

					default:
						goto loop315;
					}
				}

				loop315:
					;

				} finally { DebugExitSubRule(315); }

				DebugLocation(1114, 32);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:32: ( namespace )?
				int alt316=2;
				try { DebugEnterSubRule(316);
				try { DebugEnterDecision(316, false);
				int LA316_0 = input.LA(1);

				if ((LA316_0==Identifier||LA316_0==104||(LA316_0>=110 && LA316_0<=112)))
				{
					alt316 = 1;
				}
				} finally { DebugExitDecision(316); }
				switch (alt316)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:32: namespace
					{
					DebugLocation(1114, 32);
					PushFollow(Follow._namespace_in_classMember6299);
					@namespace();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(316); }

				DebugLocation(1114, 43);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:43: ( LineTerminator )*
				try { DebugEnterSubRule(317);
				while (true)
				{
					int alt317=2;
					try { DebugEnterDecision(317, false);
					int LA317_0 = input.LA(1);

					if ((LA317_0==LineTerminator))
					{
						int LA317_2 = input.LA(2);

						if ((EvaluatePredicate(synpred398_AS3_fragment)))
						{
							alt317 = 1;
						}


					}


					} finally { DebugExitDecision(317); }
					switch ( alt317 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:43: LineTerminator
						{
						DebugLocation(1114, 43);
						Match(input,LineTerminator,Follow._LineTerminator_in_classMember6302); if (state.failed) return;

						}
						break;

					default:
						goto loop317;
					}
				}

				loop317:
					;

				} finally { DebugExitSubRule(317); }

				DebugLocation(1114, 59);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:59: ( 'override' )?
				int alt318=2;
				try { DebugEnterSubRule(318);
				try { DebugEnterDecision(318, false);
				int LA318_0 = input.LA(1);

				if ((LA318_0==108))
				{
					alt318 = 1;
				}
				} finally { DebugExitDecision(318); }
				switch (alt318)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:59: 'override'
					{
					DebugLocation(1114, 59);
					Match(input,108,Follow._108_in_classMember6305); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(318); }

				DebugLocation(1114, 71);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:71: ( LineTerminator )*
				try { DebugEnterSubRule(319);
				while (true)
				{
					int alt319=2;
					try { DebugEnterDecision(319, false);
					int LA319_0 = input.LA(1);

					if ((LA319_0==LineTerminator))
					{
						alt319 = 1;
					}


					} finally { DebugExitDecision(319); }
					switch ( alt319 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:71: LineTerminator
						{
						DebugLocation(1114, 71);
						Match(input,LineTerminator,Follow._LineTerminator_in_classMember6308); if (state.failed) return;

						}
						break;

					default:
						goto loop319;
					}
				}

				loop319:
					;

				} finally { DebugExitSubRule(319); }

				DebugLocation(1114, 87);
				PushFollow(Follow._functionDeclaration_in_classMember6311);
				functionDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:4: ( 'static' )? ( LineTerminator )* ( namespace )? ( LineTerminator )* ( 'static' )? ( LineTerminator )* ( functionDeclaration | variableStatement )
				{
				DebugLocation(1115, 4);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:4: ( 'static' )?
				int alt320=2;
				try { DebugEnterSubRule(320);
				try { DebugEnterDecision(320, false);
				int LA320_0 = input.LA(1);

				if ((LA320_0==115))
				{
					int LA320_1 = input.LA(2);

					if ((EvaluatePredicate(synpred402_AS3_fragment)))
					{
						alt320 = 1;
					}
				}
				} finally { DebugExitDecision(320); }
				switch (alt320)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:4: 'static'
					{
					DebugLocation(1115, 4);
					Match(input,115,Follow._115_in_classMember6316); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(320); }

				DebugLocation(1115, 14);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:14: ( LineTerminator )*
				try { DebugEnterSubRule(321);
				while (true)
				{
					int alt321=2;
					try { DebugEnterDecision(321, false);
					int LA321_0 = input.LA(1);

					if ((LA321_0==LineTerminator))
					{
						int LA321_2 = input.LA(2);

						if ((EvaluatePredicate(synpred403_AS3_fragment)))
						{
							alt321 = 1;
						}


					}


					} finally { DebugExitDecision(321); }
					switch ( alt321 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:14: LineTerminator
						{
						DebugLocation(1115, 14);
						Match(input,LineTerminator,Follow._LineTerminator_in_classMember6319); if (state.failed) return;

						}
						break;

					default:
						goto loop321;
					}
				}

				loop321:
					;

				} finally { DebugExitSubRule(321); }

				DebugLocation(1115, 30);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:30: ( namespace )?
				int alt322=2;
				try { DebugEnterSubRule(322);
				try { DebugEnterDecision(322, false);
				int LA322_0 = input.LA(1);

				if ((LA322_0==Identifier||LA322_0==104||(LA322_0>=110 && LA322_0<=112)))
				{
					alt322 = 1;
				}
				} finally { DebugExitDecision(322); }
				switch (alt322)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:30: namespace
					{
					DebugLocation(1115, 30);
					PushFollow(Follow._namespace_in_classMember6322);
					@namespace();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(322); }

				DebugLocation(1115, 41);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:41: ( LineTerminator )*
				try { DebugEnterSubRule(323);
				while (true)
				{
					int alt323=2;
					try { DebugEnterDecision(323, false);
					int LA323_0 = input.LA(1);

					if ((LA323_0==LineTerminator))
					{
						int LA323_2 = input.LA(2);

						if ((EvaluatePredicate(synpred405_AS3_fragment)))
						{
							alt323 = 1;
						}


					}


					} finally { DebugExitDecision(323); }
					switch ( alt323 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:41: LineTerminator
						{
						DebugLocation(1115, 41);
						Match(input,LineTerminator,Follow._LineTerminator_in_classMember6325); if (state.failed) return;

						}
						break;

					default:
						goto loop323;
					}
				}

				loop323:
					;

				} finally { DebugExitSubRule(323); }

				DebugLocation(1115, 57);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:57: ( 'static' )?
				int alt324=2;
				try { DebugEnterSubRule(324);
				try { DebugEnterDecision(324, false);
				int LA324_0 = input.LA(1);

				if ((LA324_0==115))
				{
					alt324 = 1;
				}
				} finally { DebugExitDecision(324); }
				switch (alt324)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:57: 'static'
					{
					DebugLocation(1115, 57);
					Match(input,115,Follow._115_in_classMember6328); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(324); }

				DebugLocation(1115, 67);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:67: ( LineTerminator )*
				try { DebugEnterSubRule(325);
				while (true)
				{
					int alt325=2;
					try { DebugEnterDecision(325, false);
					int LA325_0 = input.LA(1);

					if ((LA325_0==LineTerminator))
					{
						alt325 = 1;
					}


					} finally { DebugExitDecision(325); }
					switch ( alt325 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:67: LineTerminator
						{
						DebugLocation(1115, 67);
						Match(input,LineTerminator,Follow._LineTerminator_in_classMember6331); if (state.failed) return;

						}
						break;

					default:
						goto loop325;
					}
				}

				loop325:
					;

				} finally { DebugExitSubRule(325); }

				DebugLocation(1115, 83);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:83: ( functionDeclaration | variableStatement )
				int alt326=2;
				try { DebugEnterSubRule(326);
				try { DebugEnterDecision(326, false);
				int LA326_0 = input.LA(1);

				if ((LA326_0==95))
				{
					alt326 = 1;
				}
				else if ((LA326_0==85||LA326_0==123))
				{
					alt326 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 326, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(326); }
				switch (alt326)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:84: functionDeclaration
					{
					DebugLocation(1115, 84);
					PushFollow(Follow._functionDeclaration_in_classMember6335);
					functionDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:106: variableStatement
					{
					DebugLocation(1115, 106);
					PushFollow(Follow._variableStatement_in_classMember6339);
					variableStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(326); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classMember", 93);
			LeaveRule("classMember", 93);
			LeaveRule_classMember();
			if (state.backtracking > 0) { Memoize(input, 93, classMember_StartIndex); }

		}
		DebugLocation(1116, 1);
		} finally { DebugExitRule(GrammarFileName, "classMember"); }
		return;

	}
	// $ANTLR end "classMember"

	partial void EnterRule_classElement();
	partial void LeaveRule_classElement();

	// $ANTLR start "classElement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1118:1: classElement : ( classMember | statement );
	[GrammarRule("classElement")]
	private void classElement()
	{
		EnterRule_classElement();
		EnterRule("classElement", 94);
		TraceIn("classElement", 94);
		int classElement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classElement");
		DebugLocation(1118, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1119:2: ( classMember | statement )
			int alt328=2;
			try { DebugEnterDecision(328, false);
			switch (input.LA(1))
			{
			case LineTerminator:
			case 104:
			case 108:
			case 110:
			case 111:
			case 112:
			case 115:
				{
				alt328 = 1;
				}
				break;
			case Identifier:
				{
				int LA328_7 = input.LA(2);

				if ((EvaluatePredicate(synpred409_AS3_fragment)))
				{
					alt328 = 1;
				}
				else if ((true))
				{
					alt328 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 328, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 95:
				{
				int LA328_8 = input.LA(2);

				if ((EvaluatePredicate(synpred409_AS3_fragment)))
				{
					alt328 = 1;
				}
				else if ((true))
				{
					alt328 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 328, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 85:
			case 123:
				{
				int LA328_10 = input.LA(2);

				if ((EvaluatePredicate(synpred409_AS3_fragment)))
				{
					alt328 = 1;
				}
				else if ((true))
				{
					alt328 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 328, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BooleanLiteral:
			case NullLiteral:
			case NumericLiteral:
			case StringLiteral:
			case 34:
			case 42:
			case 46:
			case 47:
			case 50:
			case 51:
			case 61:
			case 76:
			case 80:
			case 81:
			case 86:
			case 88:
			case 89:
			case 94:
			case 97:
			case 99:
			case 101:
			case 107:
			case 113:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 124:
			case 125:
			case 126:
			case 127:
			case 132:
				{
				alt328 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 328, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(328); }
			switch (alt328)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1119:4: classMember
				{
				DebugLocation(1119, 4);
				PushFollow(Follow._classMember_in_classElement6353);
				classMember();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1120:4: statement
				{
				DebugLocation(1120, 4);
				PushFollow(Follow._statement_in_classElement6358);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classElement", 94);
			LeaveRule("classElement", 94);
			LeaveRule_classElement();
			if (state.backtracking > 0) { Memoize(input, 94, classElement_StartIndex); }

		}
		DebugLocation(1121, 1);
		} finally { DebugExitRule(GrammarFileName, "classElement"); }
		return;

	}
	// $ANTLR end "classElement"

	partial void EnterRule_interfaceElements();
	partial void LeaveRule_interfaceElements();

	// $ANTLR start "interfaceElements"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1123:1: interfaceElements : ( ( LineTerminator )* interfaceElement ( LineTerminator )* )* ;
	[GrammarRule("interfaceElements")]
	private void interfaceElements()
	{
		EnterRule_interfaceElements();
		EnterRule("interfaceElements", 95);
		TraceIn("interfaceElements", 95);
		int interfaceElements_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceElements");
		DebugLocation(1123, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1124:2: ( ( ( LineTerminator )* interfaceElement ( LineTerminator )* )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1124:4: ( ( LineTerminator )* interfaceElement ( LineTerminator )* )*
			{
			DebugLocation(1124, 4);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1124:4: ( ( LineTerminator )* interfaceElement ( LineTerminator )* )*
			try { DebugEnterSubRule(331);
			while (true)
			{
				int alt331=2;
				try { DebugEnterDecision(331, false);
				try
				{
					alt331 = dfa331.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(331); }
				switch ( alt331 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1124:5: ( LineTerminator )* interfaceElement ( LineTerminator )*
					{
					DebugLocation(1124, 5);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1124:5: ( LineTerminator )*
					try { DebugEnterSubRule(329);
					while (true)
					{
						int alt329=2;
						try { DebugEnterDecision(329, false);
						int LA329_0 = input.LA(1);

						if ((LA329_0==LineTerminator))
						{
							alt329 = 1;
						}


						} finally { DebugExitDecision(329); }
						switch ( alt329 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1124:5: LineTerminator
							{
							DebugLocation(1124, 5);
							Match(input,LineTerminator,Follow._LineTerminator_in_interfaceElements6370); if (state.failed) return;

							}
							break;

						default:
							goto loop329;
						}
					}

					loop329:
						;

					} finally { DebugExitSubRule(329); }

					DebugLocation(1124, 21);
					PushFollow(Follow._interfaceElement_in_interfaceElements6373);
					interfaceElement();
					PopFollow();
					if (state.failed) return;
					DebugLocation(1124, 38);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1124:38: ( LineTerminator )*
					try { DebugEnterSubRule(330);
					while (true)
					{
						int alt330=2;
						try { DebugEnterDecision(330, false);
						int LA330_0 = input.LA(1);

						if ((LA330_0==LineTerminator))
						{
							int LA330_1 = input.LA(2);

							if ((EvaluatePredicate(synpred411_AS3_fragment)))
							{
								alt330 = 1;
							}


						}


						} finally { DebugExitDecision(330); }
						switch ( alt330 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1124:38: LineTerminator
							{
							DebugLocation(1124, 38);
							Match(input,LineTerminator,Follow._LineTerminator_in_interfaceElements6375); if (state.failed) return;

							}
							break;

						default:
							goto loop330;
						}
					}

					loop330:
						;

					} finally { DebugExitSubRule(330); }


					}
					break;

				default:
					goto loop331;
				}
			}

			loop331:
				;

			} finally { DebugExitSubRule(331); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceElements", 95);
			LeaveRule("interfaceElements", 95);
			LeaveRule_interfaceElements();
			if (state.backtracking > 0) { Memoize(input, 95, interfaceElements_StartIndex); }

		}
		DebugLocation(1125, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceElements"); }
		return;

	}
	// $ANTLR end "interfaceElements"

	partial void EnterRule_interfaceElement();
	partial void LeaveRule_interfaceElement();

	// $ANTLR start "interfaceElement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1127:1: interfaceElement : functionDeclaration ;
	[GrammarRule("interfaceElement")]
	private void interfaceElement()
	{
		EnterRule_interfaceElement();
		EnterRule("interfaceElement", 96);
		TraceIn("interfaceElement", 96);
		int interfaceElement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceElement");
		DebugLocation(1127, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1128:2: ( functionDeclaration )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1128:4: functionDeclaration
			{
			DebugLocation(1128, 4);
			PushFollow(Follow._functionDeclaration_in_interfaceElement6389);
			functionDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceElement", 96);
			LeaveRule("interfaceElement", 96);
			LeaveRule_interfaceElement();
			if (state.backtracking > 0) { Memoize(input, 96, interfaceElement_StartIndex); }

		}
		DebugLocation(1129, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceElement"); }
		return;

	}
	// $ANTLR end "interfaceElement"

	partial void EnterRule_qualifiedName();
	partial void LeaveRule_qualifiedName();

	// $ANTLR start "qualifiedName"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1131:1: qualifiedName : Identifier ( '.' Identifier )* ;
	[GrammarRule("qualifiedName")]
	private void qualifiedName()
	{
		EnterRule_qualifiedName();
		EnterRule("qualifiedName", 97);
		TraceIn("qualifiedName", 97);
		int qualifiedName_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "qualifiedName");
		DebugLocation(1131, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1132:2: ( Identifier ( '.' Identifier )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1132:4: Identifier ( '.' Identifier )*
			{
			DebugLocation(1132, 4);
			Match(input,Identifier,Follow._Identifier_in_qualifiedName6402); if (state.failed) return;
			DebugLocation(1132, 15);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1132:15: ( '.' Identifier )*
			try { DebugEnterSubRule(332);
			while (true)
			{
				int alt332=2;
				try { DebugEnterDecision(332, false);
				int LA332_0 = input.LA(1);

				if ((LA332_0==53))
				{
					int LA332_2 = input.LA(2);

					if ((LA332_2==Identifier))
					{
						int LA332_3 = input.LA(3);

						if ((EvaluatePredicate(synpred413_AS3_fragment)))
						{
							alt332 = 1;
						}


					}


				}


				} finally { DebugExitDecision(332); }
				switch ( alt332 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1132:16: '.' Identifier
					{
					DebugLocation(1132, 16);
					Match(input,53,Follow._53_in_qualifiedName6405); if (state.failed) return;
					DebugLocation(1132, 20);
					Match(input,Identifier,Follow._Identifier_in_qualifiedName6407); if (state.failed) return;

					}
					break;

				default:
					goto loop332;
				}
			}

			loop332:
				;

			} finally { DebugExitSubRule(332); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedName", 97);
			LeaveRule("qualifiedName", 97);
			LeaveRule_qualifiedName();
			if (state.backtracking > 0) { Memoize(input, 97, qualifiedName_StartIndex); }

		}
		DebugLocation(1133, 1);
		} finally { DebugExitRule(GrammarFileName, "qualifiedName"); }
		return;

	}
	// $ANTLR end "qualifiedName"

	partial void EnterRule_defaultArgumentValue();
	partial void LeaveRule_defaultArgumentValue();

	// $ANTLR start "defaultArgumentValue"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1135:1: defaultArgumentValue : '=' ( LineTerminator )* assignmentExpressionNoIn ;
	[GrammarRule("defaultArgumentValue")]
	private void defaultArgumentValue()
	{
		EnterRule_defaultArgumentValue();
		EnterRule("defaultArgumentValue", 98);
		TraceIn("defaultArgumentValue", 98);
		int defaultArgumentValue_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "defaultArgumentValue");
		DebugLocation(1135, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1136:2: ( '=' ( LineTerminator )* assignmentExpressionNoIn )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1136:4: '=' ( LineTerminator )* assignmentExpressionNoIn
			{
			DebugLocation(1136, 4);
			Match(input,66,Follow._66_in_defaultArgumentValue6422); if (state.failed) return;
			DebugLocation(1136, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1136:8: ( LineTerminator )*
			try { DebugEnterSubRule(333);
			while (true)
			{
				int alt333=2;
				try { DebugEnterDecision(333, false);
				int LA333_0 = input.LA(1);

				if ((LA333_0==LineTerminator))
				{
					alt333 = 1;
				}


				} finally { DebugExitDecision(333); }
				switch ( alt333 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1136:8: LineTerminator
					{
					DebugLocation(1136, 8);
					Match(input,LineTerminator,Follow._LineTerminator_in_defaultArgumentValue6424); if (state.failed) return;

					}
					break;

				default:
					goto loop333;
				}
			}

			loop333:
				;

			} finally { DebugExitSubRule(333); }

			DebugLocation(1136, 24);
			PushFollow(Follow._assignmentExpressionNoIn_in_defaultArgumentValue6427);
			assignmentExpressionNoIn();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("defaultArgumentValue", 98);
			LeaveRule("defaultArgumentValue", 98);
			LeaveRule_defaultArgumentValue();
			if (state.backtracking > 0) { Memoize(input, 98, defaultArgumentValue_StartIndex); }

		}
		DebugLocation(1137, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultArgumentValue"); }
		return;

	}
	// $ANTLR end "defaultArgumentValue"

	partial void EnterRule_useNamespaceStatement();
	partial void LeaveRule_useNamespaceStatement();

	// $ANTLR start "useNamespaceStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1139:1: useNamespaceStatement : 'use' ( LineTerminator )* 'namespace' ( LineTerminator )* Identifier ( ( LineTerminator )* | ';' ) ;
	[GrammarRule("useNamespaceStatement")]
	private void useNamespaceStatement()
	{
		EnterRule_useNamespaceStatement();
		EnterRule("useNamespaceStatement", 99);
		TraceIn("useNamespaceStatement", 99);
		int useNamespaceStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "useNamespaceStatement");
		DebugLocation(1139, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:2: ( 'use' ( LineTerminator )* 'namespace' ( LineTerminator )* Identifier ( ( LineTerminator )* | ';' ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:4: 'use' ( LineTerminator )* 'namespace' ( LineTerminator )* Identifier ( ( LineTerminator )* | ';' )
			{
			DebugLocation(1140, 4);
			Match(input,122,Follow._122_in_useNamespaceStatement6439); if (state.failed) return;
			DebugLocation(1140, 10);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:10: ( LineTerminator )*
			try { DebugEnterSubRule(334);
			while (true)
			{
				int alt334=2;
				try { DebugEnterDecision(334, false);
				int LA334_0 = input.LA(1);

				if ((LA334_0==LineTerminator))
				{
					alt334 = 1;
				}


				} finally { DebugExitDecision(334); }
				switch ( alt334 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:10: LineTerminator
					{
					DebugLocation(1140, 10);
					Match(input,LineTerminator,Follow._LineTerminator_in_useNamespaceStatement6441); if (state.failed) return;

					}
					break;

				default:
					goto loop334;
				}
			}

			loop334:
				;

			} finally { DebugExitSubRule(334); }

			DebugLocation(1140, 26);
			Match(input,106,Follow._106_in_useNamespaceStatement6444); if (state.failed) return;
			DebugLocation(1140, 38);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:38: ( LineTerminator )*
			try { DebugEnterSubRule(335);
			while (true)
			{
				int alt335=2;
				try { DebugEnterDecision(335, false);
				int LA335_0 = input.LA(1);

				if ((LA335_0==LineTerminator))
				{
					alt335 = 1;
				}


				} finally { DebugExitDecision(335); }
				switch ( alt335 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:38: LineTerminator
					{
					DebugLocation(1140, 38);
					Match(input,LineTerminator,Follow._LineTerminator_in_useNamespaceStatement6446); if (state.failed) return;

					}
					break;

				default:
					goto loop335;
				}
			}

			loop335:
				;

			} finally { DebugExitSubRule(335); }

			DebugLocation(1140, 54);
			Match(input,Identifier,Follow._Identifier_in_useNamespaceStatement6449); if (state.failed) return;
			DebugLocation(1140, 65);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:65: ( ( LineTerminator )* | ';' )
			int alt337=2;
			try { DebugEnterSubRule(337);
			try { DebugEnterDecision(337, false);
			int LA337_0 = input.LA(1);

			if ((LA337_0==EOF||LA337_0==BooleanLiteral||LA337_0==Identifier||LA337_0==LineTerminator||(LA337_0>=NullLiteral && LA337_0<=NumericLiteral)||LA337_0==StringLiteral||LA337_0==34||LA337_0==42||(LA337_0>=46 && LA337_0<=47)||(LA337_0>=50 && LA337_0<=51)||LA337_0==76||(LA337_0>=80 && LA337_0<=82)||(LA337_0>=85 && LA337_0<=90)||LA337_0==92||(LA337_0>=94 && LA337_0<=95)||LA337_0==97||LA337_0==99||LA337_0==101||LA337_0==104||(LA337_0>=107 && LA337_0<=108)||(LA337_0>=110 && LA337_0<=113)||(LA337_0>=115 && LA337_0<=127)||(LA337_0>=131 && LA337_0<=132)))
			{
				alt337 = 1;
			}
			else if ((LA337_0==61))
			{
				int LA337_2 = input.LA(2);

				if ((EvaluatePredicate(synpred418_AS3_fragment)))
				{
					alt337 = 1;
				}
				else if ((true))
				{
					alt337 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 337, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 337, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(337); }
			switch (alt337)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:66: ( LineTerminator )*
				{
				DebugLocation(1140, 66);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:66: ( LineTerminator )*
				try { DebugEnterSubRule(336);
				while (true)
				{
					int alt336=2;
					try { DebugEnterDecision(336, false);
					int LA336_0 = input.LA(1);

					if ((LA336_0==LineTerminator))
					{
						int LA336_1 = input.LA(2);

						if ((EvaluatePredicate(synpred417_AS3_fragment)))
						{
							alt336 = 1;
						}


					}


					} finally { DebugExitDecision(336); }
					switch ( alt336 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:66: LineTerminator
						{
						DebugLocation(1140, 66);
						Match(input,LineTerminator,Follow._LineTerminator_in_useNamespaceStatement6452); if (state.failed) return;

						}
						break;

					default:
						goto loop336;
					}
				}

				loop336:
					;

				} finally { DebugExitSubRule(336); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:84: ';'
				{
				DebugLocation(1140, 84);
				Match(input,61,Follow._61_in_useNamespaceStatement6457); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(337); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("useNamespaceStatement", 99);
			LeaveRule("useNamespaceStatement", 99);
			LeaveRule_useNamespaceStatement();
			if (state.backtracking > 0) { Memoize(input, 99, useNamespaceStatement_StartIndex); }

		}
		DebugLocation(1141, 1);
		} finally { DebugExitRule(GrammarFileName, "useNamespaceStatement"); }
		return;

	}
	// $ANTLR end "useNamespaceStatement"

	partial void EnterRule_metaDataStatement();
	partial void LeaveRule_metaDataStatement();

	// $ANTLR start "metaDataStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1143:1: metaDataStatement : '[' ( LineTerminator )* Identifier ( LineTerminator )* ( formalParameterList )? ( LineTerminator )* ']' ;
	[GrammarRule("metaDataStatement")]
	private void metaDataStatement()
	{
		EnterRule_metaDataStatement();
		EnterRule("metaDataStatement", 100);
		TraceIn("metaDataStatement", 100);
		int metaDataStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "metaDataStatement");
		DebugLocation(1143, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1144:2: ( '[' ( LineTerminator )* Identifier ( LineTerminator )* ( formalParameterList )? ( LineTerminator )* ']' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1144:4: '[' ( LineTerminator )* Identifier ( LineTerminator )* ( formalParameterList )? ( LineTerminator )* ']'
			{
			DebugLocation(1144, 4);
			Match(input,76,Follow._76_in_metaDataStatement6469); if (state.failed) return;
			DebugLocation(1144, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1144:8: ( LineTerminator )*
			try { DebugEnterSubRule(338);
			while (true)
			{
				int alt338=2;
				try { DebugEnterDecision(338, false);
				int LA338_0 = input.LA(1);

				if ((LA338_0==LineTerminator))
				{
					alt338 = 1;
				}


				} finally { DebugExitDecision(338); }
				switch ( alt338 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1144:8: LineTerminator
					{
					DebugLocation(1144, 8);
					Match(input,LineTerminator,Follow._LineTerminator_in_metaDataStatement6471); if (state.failed) return;

					}
					break;

				default:
					goto loop338;
				}
			}

			loop338:
				;

			} finally { DebugExitSubRule(338); }

			DebugLocation(1144, 24);
			Match(input,Identifier,Follow._Identifier_in_metaDataStatement6474); if (state.failed) return;
			DebugLocation(1144, 35);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1144:35: ( LineTerminator )*
			try { DebugEnterSubRule(339);
			while (true)
			{
				int alt339=2;
				try { DebugEnterDecision(339, false);
				int LA339_0 = input.LA(1);

				if ((LA339_0==LineTerminator))
				{
					int LA339_2 = input.LA(2);

					if ((EvaluatePredicate(synpred420_AS3_fragment)))
					{
						alt339 = 1;
					}


				}


				} finally { DebugExitDecision(339); }
				switch ( alt339 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1144:35: LineTerminator
					{
					DebugLocation(1144, 35);
					Match(input,LineTerminator,Follow._LineTerminator_in_metaDataStatement6476); if (state.failed) return;

					}
					break;

				default:
					goto loop339;
				}
			}

			loop339:
				;

			} finally { DebugExitSubRule(339); }

			DebugLocation(1144, 51);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1144:51: ( formalParameterList )?
			int alt340=2;
			try { DebugEnterSubRule(340);
			try { DebugEnterDecision(340, false);
			int LA340_0 = input.LA(1);

			if ((LA340_0==42))
			{
				alt340 = 1;
			}
			} finally { DebugExitDecision(340); }
			switch (alt340)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1144:51: formalParameterList
				{
				DebugLocation(1144, 51);
				PushFollow(Follow._formalParameterList_in_metaDataStatement6479);
				formalParameterList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(340); }

			DebugLocation(1144, 72);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1144:72: ( LineTerminator )*
			try { DebugEnterSubRule(341);
			while (true)
			{
				int alt341=2;
				try { DebugEnterDecision(341, false);
				int LA341_0 = input.LA(1);

				if ((LA341_0==LineTerminator))
				{
					alt341 = 1;
				}


				} finally { DebugExitDecision(341); }
				switch ( alt341 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1144:72: LineTerminator
					{
					DebugLocation(1144, 72);
					Match(input,LineTerminator,Follow._LineTerminator_in_metaDataStatement6482); if (state.failed) return;

					}
					break;

				default:
					goto loop341;
				}
			}

			loop341:
				;

			} finally { DebugExitSubRule(341); }

			DebugLocation(1144, 88);
			Match(input,77,Follow._77_in_metaDataStatement6485); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("metaDataStatement", 100);
			LeaveRule("metaDataStatement", 100);
			LeaveRule_metaDataStatement();
			if (state.backtracking > 0) { Memoize(input, 100, metaDataStatement_StartIndex); }

		}
		DebugLocation(1145, 1);
		} finally { DebugExitRule(GrammarFileName, "metaDataStatement"); }
		return;

	}
	// $ANTLR end "metaDataStatement"

	partial void EnterRule_includeStatement();
	partial void LeaveRule_includeStatement();

	// $ANTLR start "includeStatement"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1147:1: includeStatement : 'include' ( LineTerminator )* StringLiteral ( ( LineTerminator )* | ';' ) ;
	[GrammarRule("includeStatement")]
	private void includeStatement()
	{
		EnterRule_includeStatement();
		EnterRule("includeStatement", 101);
		TraceIn("includeStatement", 101);
		int includeStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "includeStatement");
		DebugLocation(1147, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:2: ( 'include' ( LineTerminator )* StringLiteral ( ( LineTerminator )* | ';' ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:4: 'include' ( LineTerminator )* StringLiteral ( ( LineTerminator )* | ';' )
			{
			DebugLocation(1148, 4);
			Match(input,101,Follow._101_in_includeStatement6497); if (state.failed) return;
			DebugLocation(1148, 14);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:14: ( LineTerminator )*
			try { DebugEnterSubRule(342);
			while (true)
			{
				int alt342=2;
				try { DebugEnterDecision(342, false);
				int LA342_0 = input.LA(1);

				if ((LA342_0==LineTerminator))
				{
					alt342 = 1;
				}


				} finally { DebugExitDecision(342); }
				switch ( alt342 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:14: LineTerminator
					{
					DebugLocation(1148, 14);
					Match(input,LineTerminator,Follow._LineTerminator_in_includeStatement6499); if (state.failed) return;

					}
					break;

				default:
					goto loop342;
				}
			}

			loop342:
				;

			} finally { DebugExitSubRule(342); }

			DebugLocation(1148, 30);
			Match(input,StringLiteral,Follow._StringLiteral_in_includeStatement6502); if (state.failed) return;
			DebugLocation(1148, 44);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:44: ( ( LineTerminator )* | ';' )
			int alt344=2;
			try { DebugEnterSubRule(344);
			try { DebugEnterDecision(344, false);
			int LA344_0 = input.LA(1);

			if ((LA344_0==EOF||LA344_0==BooleanLiteral||LA344_0==Identifier||LA344_0==LineTerminator||(LA344_0>=NullLiteral && LA344_0<=NumericLiteral)||LA344_0==StringLiteral||LA344_0==34||LA344_0==42||(LA344_0>=46 && LA344_0<=47)||(LA344_0>=50 && LA344_0<=51)||LA344_0==76||(LA344_0>=80 && LA344_0<=82)||(LA344_0>=85 && LA344_0<=90)||LA344_0==92||(LA344_0>=94 && LA344_0<=95)||LA344_0==97||LA344_0==99||LA344_0==101||LA344_0==104||(LA344_0>=107 && LA344_0<=108)||(LA344_0>=110 && LA344_0<=113)||(LA344_0>=115 && LA344_0<=127)||(LA344_0>=131 && LA344_0<=132)))
			{
				alt344 = 1;
			}
			else if ((LA344_0==61))
			{
				int LA344_2 = input.LA(2);

				if ((EvaluatePredicate(synpred425_AS3_fragment)))
				{
					alt344 = 1;
				}
				else if ((true))
				{
					alt344 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 344, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 344, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(344); }
			switch (alt344)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:45: ( LineTerminator )*
				{
				DebugLocation(1148, 45);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:45: ( LineTerminator )*
				try { DebugEnterSubRule(343);
				while (true)
				{
					int alt343=2;
					try { DebugEnterDecision(343, false);
					int LA343_0 = input.LA(1);

					if ((LA343_0==LineTerminator))
					{
						int LA343_1 = input.LA(2);

						if ((EvaluatePredicate(synpred424_AS3_fragment)))
						{
							alt343 = 1;
						}


					}


					} finally { DebugExitDecision(343); }
					switch ( alt343 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:45: LineTerminator
						{
						DebugLocation(1148, 45);
						Match(input,LineTerminator,Follow._LineTerminator_in_includeStatement6505); if (state.failed) return;

						}
						break;

					default:
						goto loop343;
					}
				}

				loop343:
					;

				} finally { DebugExitSubRule(343); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:63: ';'
				{
				DebugLocation(1148, 63);
				Match(input,61,Follow._61_in_includeStatement6510); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(344); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("includeStatement", 101);
			LeaveRule("includeStatement", 101);
			LeaveRule_includeStatement();
			if (state.backtracking > 0) { Memoize(input, 101, includeStatement_StartIndex); }

		}
		DebugLocation(1149, 1);
		} finally { DebugExitRule(GrammarFileName, "includeStatement"); }
		return;

	}
	// $ANTLR end "includeStatement"

	partial void EnterRule_namespace();
	partial void LeaveRule_namespace();

	// $ANTLR start "namespace"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1151:1: namespace : ( 'public' | 'private' | 'protected' | 'internal' | qualifiedName );
	[GrammarRule("namespace")]
	private void @namespace()
	{
		EnterRule_namespace();
		EnterRule("namespace", 102);
		TraceIn("namespace", 102);
		int namespace_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "namespace");
		DebugLocation(1151, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1152:2: ( 'public' | 'private' | 'protected' | 'internal' | qualifiedName )
			int alt345=5;
			try { DebugEnterDecision(345, false);
			switch (input.LA(1))
			{
			case 112:
				{
				alt345 = 1;
				}
				break;
			case 110:
				{
				alt345 = 2;
				}
				break;
			case 111:
				{
				alt345 = 3;
				}
				break;
			case 104:
				{
				alt345 = 4;
				}
				break;
			case Identifier:
				{
				alt345 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 345, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(345); }
			switch (alt345)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1152:4: 'public'
				{
				DebugLocation(1152, 4);
				Match(input,112,Follow._112_in_namespace6522); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1153:4: 'private'
				{
				DebugLocation(1153, 4);
				Match(input,110,Follow._110_in_namespace6527); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1154:4: 'protected'
				{
				DebugLocation(1154, 4);
				Match(input,111,Follow._111_in_namespace6532); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1155:4: 'internal'
				{
				DebugLocation(1155, 4);
				Match(input,104,Follow._104_in_namespace6537); if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1156:4: qualifiedName
				{
				DebugLocation(1156, 4);
				PushFollow(Follow._qualifiedName_in_namespace6542);
				qualifiedName();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace", 102);
			LeaveRule("namespace", 102);
			LeaveRule_namespace();
			if (state.backtracking > 0) { Memoize(input, 102, namespace_StartIndex); }

		}
		DebugLocation(1157, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace"); }
		return;

	}
	// $ANTLR end "namespace"

	partial void EnterRule_typeInformation();
	partial void LeaveRule_typeInformation();

	// $ANTLR start "typeInformation"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1159:2: typeInformation : ':' ( LineTerminator )* ( type | 'void' | '*' ) ;
	[GrammarRule("typeInformation")]
	private void typeInformation()
	{
		EnterRule_typeInformation();
		EnterRule("typeInformation", 103);
		TraceIn("typeInformation", 103);
		int typeInformation_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeInformation");
		DebugLocation(1159, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1160:2: ( ':' ( LineTerminator )* ( type | 'void' | '*' ) )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1160:4: ':' ( LineTerminator )* ( type | 'void' | '*' )
			{
			DebugLocation(1160, 4);
			Match(input,59,Follow._59_in_typeInformation6555); if (state.failed) return;
			DebugLocation(1160, 8);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1160:8: ( LineTerminator )*
			try { DebugEnterSubRule(346);
			while (true)
			{
				int alt346=2;
				try { DebugEnterDecision(346, false);
				int LA346_0 = input.LA(1);

				if ((LA346_0==LineTerminator))
				{
					alt346 = 1;
				}


				} finally { DebugExitDecision(346); }
				switch ( alt346 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1160:8: LineTerminator
					{
					DebugLocation(1160, 8);
					Match(input,LineTerminator,Follow._LineTerminator_in_typeInformation6557); if (state.failed) return;

					}
					break;

				default:
					goto loop346;
				}
			}

			loop346:
				;

			} finally { DebugExitSubRule(346); }

			DebugLocation(1160, 24);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1160:24: ( type | 'void' | '*' )
			int alt347=3;
			try { DebugEnterSubRule(347);
			try { DebugEnterDecision(347, false);
			switch (input.LA(1))
			{
			case Identifier:
				{
				alt347 = 1;
				}
				break;
			case 124:
				{
				alt347 = 2;
				}
				break;
			case 44:
				{
				alt347 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 347, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(347); }
			switch (alt347)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1160:26: type
				{
				DebugLocation(1160, 26);
				PushFollow(Follow._type_in_typeInformation6562);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1160:33: 'void'
				{
				DebugLocation(1160, 33);
				Match(input,124,Follow._124_in_typeInformation6566); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1160:42: '*'
				{
				DebugLocation(1160, 42);
				Match(input,44,Follow._44_in_typeInformation6570); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(347); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeInformation", 103);
			LeaveRule("typeInformation", 103);
			LeaveRule_typeInformation();
			if (state.backtracking > 0) { Memoize(input, 103, typeInformation_StartIndex); }

		}
		DebugLocation(1161, 1);
		} finally { DebugExitRule(GrammarFileName, "typeInformation"); }
		return;

	}
	// $ANTLR end "typeInformation"

	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1163:2: type : qualifiedName ( typeModifier )? ;
	[GrammarRule("type")]
	private void type()
	{
		EnterRule_type();
		EnterRule("type", 104);
		TraceIn("type", 104);
		int type_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(1163, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1164:2: ( qualifiedName ( typeModifier )? )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1164:4: qualifiedName ( typeModifier )?
			{
			DebugLocation(1164, 4);
			PushFollow(Follow._qualifiedName_in_type6585);
			qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1164, 18);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1164:18: ( typeModifier )?
			int alt348=2;
			try { DebugEnterSubRule(348);
			try { DebugEnterDecision(348, false);
			int LA348_0 = input.LA(1);

			if ((LA348_0==56))
			{
				alt348 = 1;
			}
			} finally { DebugExitDecision(348); }
			switch (alt348)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1164:18: typeModifier
				{
				DebugLocation(1164, 18);
				PushFollow(Follow._typeModifier_in_type6587);
				typeModifier();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(348); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type", 104);
			LeaveRule("type", 104);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 104, type_StartIndex); }

		}
		DebugLocation(1165, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return;

	}
	// $ANTLR end "type"

	partial void EnterRule_typeModifier();
	partial void LeaveRule_typeModifier();

	// $ANTLR start "typeModifier"
	// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1167:2: typeModifier : '.<' ( LineTerminator )* type ( LineTerminator )* '>' ;
	[GrammarRule("typeModifier")]
	private void typeModifier()
	{
		EnterRule_typeModifier();
		EnterRule("typeModifier", 105);
		TraceIn("typeModifier", 105);
		int typeModifier_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeModifier");
		DebugLocation(1167, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return; }

			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1168:2: ( '.<' ( LineTerminator )* type ( LineTerminator )* '>' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1168:4: '.<' ( LineTerminator )* type ( LineTerminator )* '>'
			{
			DebugLocation(1168, 4);
			Match(input,56,Follow._56_in_typeModifier6602); if (state.failed) return;
			DebugLocation(1168, 9);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1168:9: ( LineTerminator )*
			try { DebugEnterSubRule(349);
			while (true)
			{
				int alt349=2;
				try { DebugEnterDecision(349, false);
				int LA349_0 = input.LA(1);

				if ((LA349_0==LineTerminator))
				{
					alt349 = 1;
				}


				} finally { DebugExitDecision(349); }
				switch ( alt349 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1168:9: LineTerminator
					{
					DebugLocation(1168, 9);
					Match(input,LineTerminator,Follow._LineTerminator_in_typeModifier6604); if (state.failed) return;

					}
					break;

				default:
					goto loop349;
				}
			}

			loop349:
				;

			} finally { DebugExitSubRule(349); }

			DebugLocation(1168, 25);
			PushFollow(Follow._type_in_typeModifier6607);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1168, 30);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1168:30: ( LineTerminator )*
			try { DebugEnterSubRule(350);
			while (true)
			{
				int alt350=2;
				try { DebugEnterDecision(350, false);
				int LA350_0 = input.LA(1);

				if ((LA350_0==LineTerminator))
				{
					alt350 = 1;
				}


				} finally { DebugExitDecision(350); }
				switch ( alt350 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1168:30: LineTerminator
					{
					DebugLocation(1168, 30);
					Match(input,LineTerminator,Follow._LineTerminator_in_typeModifier6609); if (state.failed) return;

					}
					break;

				default:
					goto loop350;
				}
			}

			loop350:
				;

			} finally { DebugExitSubRule(350); }

			DebugLocation(1168, 46);
			Match(input,69,Follow._69_in_typeModifier6612); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeModifier", 105);
			LeaveRule("typeModifier", 105);
			LeaveRule_typeModifier();
			if (state.backtracking > 0) { Memoize(input, 105, typeModifier_StartIndex); }

		}
		DebugLocation(1169, 1);
		} finally { DebugExitRule(GrammarFileName, "typeModifier"); }
		return;

	}
	// $ANTLR end "typeModifier"

	partial void EnterRule_synpred2_AS3_fragment();
	partial void LeaveRule_synpred2_AS3_fragment();

	// $ANTLR start synpred2_AS3
	public void synpred2_AS3_fragment()
	{
		EnterRule_synpred2_AS3_fragment();
		EnterRule("synpred2_AS3_fragment", 107);
		TraceIn("synpred2_AS3_fragment", 107);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:39: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:32:39: LineTerminator
			{
			DebugLocation(32, 39);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred2_AS341); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_AS3_fragment", 107);
			LeaveRule("synpred2_AS3_fragment", 107);
			LeaveRule_synpred2_AS3_fragment();
		}
	}
	// $ANTLR end synpred2_AS3

	partial void EnterRule_synpred11_AS3_fragment();
	partial void LeaveRule_synpred11_AS3_fragment();

	// $ANTLR start synpred11_AS3
	public void synpred11_AS3_fragment()
	{
		EnterRule_synpred11_AS3_fragment();
		EnterRule("synpred11_AS3_fragment", 116);
		TraceIn("synpred11_AS3_fragment", 116);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:689:4: ( Identifier )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:689:4: Identifier
			{
			DebugLocation(689, 4);
			Match(input,Identifier,Follow._Identifier_in_synpred11_AS33522); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred11_AS3_fragment", 116);
			LeaveRule("synpred11_AS3_fragment", 116);
			LeaveRule_synpred11_AS3_fragment();
		}
	}
	// $ANTLR end synpred11_AS3

	partial void EnterRule_synpred12_AS3_fragment();
	partial void LeaveRule_synpred12_AS3_fragment();

	// $ANTLR start synpred12_AS3
	public void synpred12_AS3_fragment()
	{
		EnterRule_synpred12_AS3_fragment();
		EnterRule("synpred12_AS3_fragment", 117);
		TraceIn("synpred12_AS3_fragment", 117);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:690:4: ( qualifiedName )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:690:4: qualifiedName
			{
			DebugLocation(690, 4);
			PushFollow(Follow._qualifiedName_in_synpred12_AS33527);
			qualifiedName();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_AS3_fragment", 117);
			LeaveRule("synpred12_AS3_fragment", 117);
			LeaveRule_synpred12_AS3_fragment();
		}
	}
	// $ANTLR end synpred12_AS3

	partial void EnterRule_synpred18_AS3_fragment();
	partial void LeaveRule_synpred18_AS3_fragment();

	// $ANTLR start synpred18_AS3
	public void synpred18_AS3_fragment()
	{
		EnterRule_synpred18_AS3_fragment();
		EnterRule("synpred18_AS3_fragment", 123);
		TraceIn("synpred18_AS3_fragment", 123);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:8: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:698:8: LineTerminator
			{
			DebugLocation(698, 8);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred18_AS33572); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred18_AS3_fragment", 123);
			LeaveRule("synpred18_AS3_fragment", 123);
			LeaveRule_synpred18_AS3_fragment();
		}
	}
	// $ANTLR end synpred18_AS3

	partial void EnterRule_synpred40_AS3_fragment();
	partial void LeaveRule_synpred40_AS3_fragment();

	// $ANTLR start synpred40_AS3
	public void synpred40_AS3_fragment()
	{
		EnterRule_synpred40_AS3_fragment();
		EnterRule("synpred40_AS3_fragment", 145);
		TraceIn("synpred40_AS3_fragment", 145);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:116: ( ( LineTerminator )* memberExpressionSuffix )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:116: ( LineTerminator )* memberExpressionSuffix
			{
			DebugLocation(716, 116);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:116: ( LineTerminator )*
			try { DebugEnterSubRule(361);
			while (true)
			{
				int alt361=2;
				try { DebugEnterDecision(361, false);
				int LA361_0 = input.LA(1);

				if ((LA361_0==LineTerminator))
				{
					alt361 = 1;
				}


				} finally { DebugExitDecision(361); }
				switch ( alt361 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:716:116: LineTerminator
					{
					DebugLocation(716, 116);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred40_AS33712); if (state.failed) return;

					}
					break;

				default:
					goto loop361;
				}
			}

			loop361:
				;

			} finally { DebugExitSubRule(361); }

			DebugLocation(716, 132);
			PushFollow(Follow._memberExpressionSuffix_in_synpred40_AS33715);
			memberExpressionSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred40_AS3_fragment", 145);
			LeaveRule("synpred40_AS3_fragment", 145);
			LeaveRule_synpred40_AS3_fragment();
		}
	}
	// $ANTLR end synpred40_AS3

	partial void EnterRule_synpred42_AS3_fragment();
	partial void LeaveRule_synpred42_AS3_fragment();

	// $ANTLR start synpred42_AS3
	public void synpred42_AS3_fragment()
	{
		EnterRule_synpred42_AS3_fragment();
		EnterRule("synpred42_AS3_fragment", 147);
		TraceIn("synpred42_AS3_fragment", 147);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:725:4: ( memberExpression )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:725:4: memberExpression
			{
			DebugLocation(725, 4);
			PushFollow(Follow._memberExpression_in_synpred42_AS33746);
			memberExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred42_AS3_fragment", 147);
			LeaveRule("synpred42_AS3_fragment", 147);
			LeaveRule_synpred42_AS3_fragment();
		}
	}
	// $ANTLR end synpred42_AS3

	partial void EnterRule_synpred46_AS3_fragment();
	partial void LeaveRule_synpred46_AS3_fragment();

	// $ANTLR start synpred46_AS3
	public void synpred46_AS3_fragment()
	{
		EnterRule_synpred46_AS3_fragment();
		EnterRule("synpred46_AS3_fragment", 151);
		TraceIn("synpred46_AS3_fragment", 151);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:730:51: ( ( LineTerminator )* callExpressionSuffix )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:730:51: ( LineTerminator )* callExpressionSuffix
			{
			DebugLocation(730, 51);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:730:51: ( LineTerminator )*
			try { DebugEnterSubRule(362);
			while (true)
			{
				int alt362=2;
				try { DebugEnterDecision(362, false);
				int LA362_0 = input.LA(1);

				if ((LA362_0==LineTerminator))
				{
					alt362 = 1;
				}


				} finally { DebugExitDecision(362); }
				switch ( alt362 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:730:51: LineTerminator
					{
					DebugLocation(730, 51);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred46_AS33776); if (state.failed) return;

					}
					break;

				default:
					goto loop362;
				}
			}

			loop362:
				;

			} finally { DebugExitSubRule(362); }

			DebugLocation(730, 67);
			PushFollow(Follow._callExpressionSuffix_in_synpred46_AS33779);
			callExpressionSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred46_AS3_fragment", 151);
			LeaveRule("synpred46_AS3_fragment", 151);
			LeaveRule_synpred46_AS3_fragment();
		}
	}
	// $ANTLR end synpred46_AS3

	partial void EnterRule_synpred60_AS3_fragment();
	partial void LeaveRule_synpred60_AS3_fragment();

	// $ANTLR start synpred60_AS3
	public void synpred60_AS3_fragment()
	{
		EnterRule_synpred60_AS3_fragment();
		EnterRule("synpred60_AS3_fragment", 165);
		TraceIn("synpred60_AS3_fragment", 165);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:752:4: ( callExpression )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:752:4: callExpression
			{
			DebugLocation(752, 4);
			PushFollow(Follow._callExpression_in_synpred60_AS33902);
			callExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred60_AS3_fragment", 165);
			LeaveRule("synpred60_AS3_fragment", 165);
			LeaveRule_synpred60_AS3_fragment();
		}
	}
	// $ANTLR end synpred60_AS3

	partial void EnterRule_synpred61_AS3_fragment();
	partial void LeaveRule_synpred61_AS3_fragment();

	// $ANTLR start synpred61_AS3
	public void synpred61_AS3_fragment()
	{
		EnterRule_synpred61_AS3_fragment();
		EnterRule("synpred61_AS3_fragment", 166);
		TraceIn("synpred61_AS3_fragment", 166);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:757:4: ( leftHandSideExpression '++' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:757:4: leftHandSideExpression '++'
			{
			DebugLocation(757, 4);
			PushFollow(Follow._leftHandSideExpression_in_synpred61_AS33918);
			leftHandSideExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(757, 27);
			Match(input,47,Follow._47_in_synpred61_AS33920); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred61_AS3_fragment", 166);
			LeaveRule("synpred61_AS3_fragment", 166);
			LeaveRule_synpred61_AS3_fragment();
		}
	}
	// $ANTLR end synpred61_AS3

	partial void EnterRule_synpred62_AS3_fragment();
	partial void LeaveRule_synpred62_AS3_fragment();

	// $ANTLR start synpred62_AS3
	public void synpred62_AS3_fragment()
	{
		EnterRule_synpred62_AS3_fragment();
		EnterRule("synpred62_AS3_fragment", 167);
		TraceIn("synpred62_AS3_fragment", 167);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:758:4: ( leftHandSideExpression '--' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:758:4: leftHandSideExpression '--'
			{
			DebugLocation(758, 4);
			PushFollow(Follow._leftHandSideExpression_in_synpred62_AS33925);
			leftHandSideExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(758, 27);
			Match(input,51,Follow._51_in_synpred62_AS33927); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred62_AS3_fragment", 167);
			LeaveRule("synpred62_AS3_fragment", 167);
			LeaveRule_synpred62_AS3_fragment();
		}
	}
	// $ANTLR end synpred62_AS3

	partial void EnterRule_synpred81_AS3_fragment();
	partial void LeaveRule_synpred81_AS3_fragment();

	// $ANTLR start synpred81_AS3
	public void synpred81_AS3_fragment()
	{
		EnterRule_synpred81_AS3_fragment();
		EnterRule("synpred81_AS3_fragment", 186);
		TraceIn("synpred81_AS3_fragment", 186);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:30: ( ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:30: ( LineTerminator )* ( '+' | '-' ) ( LineTerminator )* multiplicativeExpression
			{
			DebugLocation(772, 30);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:30: ( LineTerminator )*
			try { DebugEnterSubRule(372);
			while (true)
			{
				int alt372=2;
				try { DebugEnterDecision(372, false);
				int LA372_0 = input.LA(1);

				if ((LA372_0==LineTerminator))
				{
					alt372 = 1;
				}


				} finally { DebugExitDecision(372); }
				switch ( alt372 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:30: LineTerminator
					{
					DebugLocation(772, 30);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred81_AS34036); if (state.failed) return;

					}
					break;

				default:
					goto loop372;
				}
			}

			loop372:
				;

			} finally { DebugExitSubRule(372); }

			DebugLocation(772, 46);
			if (input.LA(1)==46||input.LA(1)==50)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(772, 58);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:58: ( LineTerminator )*
			try { DebugEnterSubRule(373);
			while (true)
			{
				int alt373=2;
				try { DebugEnterDecision(373, false);
				int LA373_0 = input.LA(1);

				if ((LA373_0==LineTerminator))
				{
					alt373 = 1;
				}


				} finally { DebugExitDecision(373); }
				switch ( alt373 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:772:58: LineTerminator
					{
					DebugLocation(772, 58);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred81_AS34047); if (state.failed) return;

					}
					break;

				default:
					goto loop373;
				}
			}

			loop373:
				;

			} finally { DebugExitSubRule(373); }

			DebugLocation(772, 74);
			PushFollow(Follow._multiplicativeExpression_in_synpred81_AS34050);
			multiplicativeExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred81_AS3_fragment", 186);
			LeaveRule("synpred81_AS3_fragment", 186);
			LeaveRule_synpred81_AS3_fragment();
		}
	}
	// $ANTLR end synpred81_AS3

	partial void EnterRule_synpred95_AS3_fragment();
	partial void LeaveRule_synpred95_AS3_fragment();

	// $ANTLR start synpred95_AS3
	public void synpred95_AS3_fragment()
	{
		EnterRule_synpred95_AS3_fragment();
		EnterRule("synpred95_AS3_fragment", 200);
		TraceIn("synpred95_AS3_fragment", 200);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:21: ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' | 'in' ) ( LineTerminator )* shiftExpression )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:21: ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' | 'in' ) ( LineTerminator )* shiftExpression
			{
			DebugLocation(780, 21);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:21: ( LineTerminator )*
			try { DebugEnterSubRule(376);
			while (true)
			{
				int alt376=2;
				try { DebugEnterDecision(376, false);
				int LA376_0 = input.LA(1);

				if ((LA376_0==LineTerminator))
				{
					alt376 = 1;
				}


				} finally { DebugExitDecision(376); }
				switch ( alt376 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:21: LineTerminator
					{
					DebugLocation(780, 21);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred95_AS34100); if (state.failed) return;

					}
					break;

				default:
					goto loop376;
				}
			}

			loop376:
				;

			} finally { DebugExitSubRule(376); }

			DebugLocation(780, 37);
			if (input.LA(1)==62||input.LA(1)==65||(input.LA(1)>=69 && input.LA(1)<=70)||input.LA(1)==100||input.LA(1)==102||input.LA(1)==105)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(780, 92);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:92: ( LineTerminator )*
			try { DebugEnterSubRule(377);
			while (true)
			{
				int alt377=2;
				try { DebugEnterDecision(377, false);
				int LA377_0 = input.LA(1);

				if ((LA377_0==LineTerminator))
				{
					alt377 = 1;
				}


				} finally { DebugExitDecision(377); }
				switch ( alt377 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:780:92: LineTerminator
					{
					DebugLocation(780, 92);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred95_AS34131); if (state.failed) return;

					}
					break;

				default:
					goto loop377;
				}
			}

			loop377:
				;

			} finally { DebugExitSubRule(377); }

			DebugLocation(780, 108);
			PushFollow(Follow._shiftExpression_in_synpred95_AS34134);
			shiftExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred95_AS3_fragment", 200);
			LeaveRule("synpred95_AS3_fragment", 200);
			LeaveRule_synpred95_AS3_fragment();
		}
	}
	// $ANTLR end synpred95_AS3

	partial void EnterRule_synpred156_AS3_fragment();
	partial void LeaveRule_synpred156_AS3_fragment();

	// $ANTLR start synpred156_AS3
	public void synpred156_AS3_fragment()
	{
		EnterRule_synpred156_AS3_fragment();
		EnterRule("synpred156_AS3_fragment", 261);
		TraceIn("synpred156_AS3_fragment", 261);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:844:4: ( conditionalExpression )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:844:4: conditionalExpression
			{
			DebugLocation(844, 4);
			PushFollow(Follow._conditionalExpression_in_synpred156_AS34588);
			conditionalExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred156_AS3_fragment", 261);
			LeaveRule("synpred156_AS3_fragment", 261);
			LeaveRule_synpred156_AS3_fragment();
		}
	}
	// $ANTLR end synpred156_AS3

	partial void EnterRule_synpred159_AS3_fragment();
	partial void LeaveRule_synpred159_AS3_fragment();

	// $ANTLR start synpred159_AS3
	public void synpred159_AS3_fragment()
	{
		EnterRule_synpred159_AS3_fragment();
		EnterRule("synpred159_AS3_fragment", 264);
		TraceIn("synpred159_AS3_fragment", 264);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:849:4: ( conditionalExpressionNoIn )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:849:4: conditionalExpressionNoIn
			{
			DebugLocation(849, 4);
			PushFollow(Follow._conditionalExpressionNoIn_in_synpred159_AS34615);
			conditionalExpressionNoIn();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred159_AS3_fragment", 264);
			LeaveRule("synpred159_AS3_fragment", 264);
			LeaveRule_synpred159_AS3_fragment();
		}
	}
	// $ANTLR end synpred159_AS3

	partial void EnterRule_synpred179_AS3_fragment();
	partial void LeaveRule_synpred179_AS3_fragment();

	// $ANTLR start synpred179_AS3
	public void synpred179_AS3_fragment()
	{
		EnterRule_synpred179_AS3_fragment();
		EnterRule("synpred179_AS3_fragment", 284);
		TraceIn("synpred179_AS3_fragment", 284);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:870:4: ( blockStatement )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:870:4: blockStatement
			{
			DebugLocation(870, 4);
			PushFollow(Follow._blockStatement_in_synpred179_AS34754);
			blockStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred179_AS3_fragment", 284);
			LeaveRule("synpred179_AS3_fragment", 284);
			LeaveRule_synpred179_AS3_fragment();
		}
	}
	// $ANTLR end synpred179_AS3

	partial void EnterRule_synpred182_AS3_fragment();
	partial void LeaveRule_synpred182_AS3_fragment();

	// $ANTLR start synpred182_AS3
	public void synpred182_AS3_fragment()
	{
		EnterRule_synpred182_AS3_fragment();
		EnterRule("synpred182_AS3_fragment", 287);
		TraceIn("synpred182_AS3_fragment", 287);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:873:4: ( expressionStatement )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:873:4: expressionStatement
			{
			DebugLocation(873, 4);
			PushFollow(Follow._expressionStatement_in_synpred182_AS34769);
			expressionStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred182_AS3_fragment", 287);
			LeaveRule("synpred182_AS3_fragment", 287);
			LeaveRule_synpred182_AS3_fragment();
		}
	}
	// $ANTLR end synpred182_AS3

	partial void EnterRule_synpred189_AS3_fragment();
	partial void LeaveRule_synpred189_AS3_fragment();

	// $ANTLR start synpred189_AS3
	public void synpred189_AS3_fragment()
	{
		EnterRule_synpred189_AS3_fragment();
		EnterRule("synpred189_AS3_fragment", 294);
		TraceIn("synpred189_AS3_fragment", 294);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:880:4: ( labelledStatement )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:880:4: labelledStatement
			{
			DebugLocation(880, 4);
			PushFollow(Follow._labelledStatement_in_synpred189_AS34804);
			labelledStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred189_AS3_fragment", 294);
			LeaveRule("synpred189_AS3_fragment", 294);
			LeaveRule_synpred189_AS3_fragment();
		}
	}
	// $ANTLR end synpred189_AS3

	partial void EnterRule_synpred196_AS3_fragment();
	partial void LeaveRule_synpred196_AS3_fragment();

	// $ANTLR start synpred196_AS3
	public void synpred196_AS3_fragment()
	{
		EnterRule_synpred196_AS3_fragment();
		EnterRule("synpred196_AS3_fragment", 301);
		TraceIn("synpred196_AS3_fragment", 301);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:891:8: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:891:8: LineTerminator
			{
			DebugLocation(891, 8);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred196_AS34852); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred196_AS3_fragment", 301);
			LeaveRule("synpred196_AS3_fragment", 301);
			LeaveRule_synpred196_AS3_fragment();
		}
	}
	// $ANTLR end synpred196_AS3

	partial void EnterRule_synpred197_AS3_fragment();
	partial void LeaveRule_synpred197_AS3_fragment();

	// $ANTLR start synpred197_AS3
	public void synpred197_AS3_fragment()
	{
		EnterRule_synpred197_AS3_fragment();
		EnterRule("synpred197_AS3_fragment", 302);
		TraceIn("synpred197_AS3_fragment", 302);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:891:24: ( statementList )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:891:24: statementList
			{
			DebugLocation(891, 24);
			PushFollow(Follow._statementList_in_synpred197_AS34855);
			statementList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred197_AS3_fragment", 302);
			LeaveRule("synpred197_AS3_fragment", 302);
			LeaveRule_synpred197_AS3_fragment();
		}
	}
	// $ANTLR end synpred197_AS3

	partial void EnterRule_synpred200_AS3_fragment();
	partial void LeaveRule_synpred200_AS3_fragment();

	// $ANTLR start synpred200_AS3
	public void synpred200_AS3_fragment()
	{
		EnterRule_synpred200_AS3_fragment();
		EnterRule("synpred200_AS3_fragment", 305);
		TraceIn("synpred200_AS3_fragment", 305);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:895:31: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:895:31: LineTerminator
			{
			DebugLocation(895, 31);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred200_AS34879); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred200_AS3_fragment", 305);
			LeaveRule("synpred200_AS3_fragment", 305);
			LeaveRule_synpred200_AS3_fragment();
		}
	}
	// $ANTLR end synpred200_AS3

	partial void EnterRule_synpred204_AS3_fragment();
	partial void LeaveRule_synpred204_AS3_fragment();

	// $ANTLR start synpred204_AS3
	public void synpred204_AS3_fragment()
	{
		EnterRule_synpred204_AS3_fragment();
		EnterRule("synpred204_AS3_fragment", 309);
		TraceIn("synpred204_AS3_fragment", 309);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:63: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:63: LineTerminator
			{
			DebugLocation(899, 63);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred204_AS34908); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred204_AS3_fragment", 309);
			LeaveRule("synpred204_AS3_fragment", 309);
			LeaveRule_synpred204_AS3_fragment();
		}
	}
	// $ANTLR end synpred204_AS3

	partial void EnterRule_synpred205_AS3_fragment();
	partial void LeaveRule_synpred205_AS3_fragment();

	// $ANTLR start synpred205_AS3
	public void synpred205_AS3_fragment()
	{
		EnterRule_synpred205_AS3_fragment();
		EnterRule("synpred205_AS3_fragment", 310);
		TraceIn("synpred205_AS3_fragment", 310);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:63: ( ( LineTerminator )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:63: ( LineTerminator )*
			{
			DebugLocation(899, 63);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:63: ( LineTerminator )*
			try { DebugEnterSubRule(418);
			while (true)
			{
				int alt418=2;
				try { DebugEnterDecision(418, false);
				int LA418_0 = input.LA(1);

				if ((LA418_0==LineTerminator))
				{
					alt418 = 1;
				}


				} finally { DebugExitDecision(418); }
				switch ( alt418 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:899:63: LineTerminator
					{
					DebugLocation(899, 63);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred205_AS34908); if (state.failed) return;

					}
					break;

				default:
					goto loop418;
				}
			}

			loop418:
				;

			} finally { DebugExitSubRule(418); }


			}

		}
		finally
		{
			TraceOut("synpred205_AS3_fragment", 310);
			LeaveRule("synpred205_AS3_fragment", 310);
			LeaveRule_synpred205_AS3_fragment();
		}
	}
	// $ANTLR end synpred205_AS3

	partial void EnterRule_synpred212_AS3_fragment();
	partial void LeaveRule_synpred212_AS3_fragment();

	// $ANTLR start synpred212_AS3
	public void synpred212_AS3_fragment()
	{
		EnterRule_synpred212_AS3_fragment();
		EnterRule("synpred212_AS3_fragment", 317);
		TraceIn("synpred212_AS3_fragment", 317);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:15: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:15: LineTerminator
			{
			DebugLocation(911, 15);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred212_AS34977); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred212_AS3_fragment", 317);
			LeaveRule("synpred212_AS3_fragment", 317);
			LeaveRule_synpred212_AS3_fragment();
		}
	}
	// $ANTLR end synpred212_AS3

	partial void EnterRule_synpred214_AS3_fragment();
	partial void LeaveRule_synpred214_AS3_fragment();

	// $ANTLR start synpred214_AS3
	public void synpred214_AS3_fragment()
	{
		EnterRule_synpred214_AS3_fragment();
		EnterRule("synpred214_AS3_fragment", 319);
		TraceIn("synpred214_AS3_fragment", 319);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:48: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:911:48: LineTerminator
			{
			DebugLocation(911, 48);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred214_AS34983); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred214_AS3_fragment", 319);
			LeaveRule("synpred214_AS3_fragment", 319);
			LeaveRule_synpred214_AS3_fragment();
		}
	}
	// $ANTLR end synpred214_AS3

	partial void EnterRule_synpred216_AS3_fragment();
	partial void LeaveRule_synpred216_AS3_fragment();

	// $ANTLR start synpred216_AS3
	public void synpred216_AS3_fragment()
	{
		EnterRule_synpred216_AS3_fragment();
		EnterRule("synpred216_AS3_fragment", 321);
		TraceIn("synpred216_AS3_fragment", 321);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:15: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:15: LineTerminator
			{
			DebugLocation(915, 15);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred216_AS35000); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred216_AS3_fragment", 321);
			LeaveRule("synpred216_AS3_fragment", 321);
			LeaveRule_synpred216_AS3_fragment();
		}
	}
	// $ANTLR end synpred216_AS3

	partial void EnterRule_synpred218_AS3_fragment();
	partial void LeaveRule_synpred218_AS3_fragment();

	// $ANTLR start synpred218_AS3
	public void synpred218_AS3_fragment()
	{
		EnterRule_synpred218_AS3_fragment();
		EnterRule("synpred218_AS3_fragment", 323);
		TraceIn("synpred218_AS3_fragment", 323);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:48: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:915:48: LineTerminator
			{
			DebugLocation(915, 48);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred218_AS35006); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred218_AS3_fragment", 323);
			LeaveRule("synpred218_AS3_fragment", 323);
			LeaveRule_synpred218_AS3_fragment();
		}
	}
	// $ANTLR end synpred218_AS3

	partial void EnterRule_synpred222_AS3_fragment();
	partial void LeaveRule_synpred222_AS3_fragment();

	// $ANTLR start synpred222_AS3
	public void synpred222_AS3_fragment()
	{
		EnterRule_synpred222_AS3_fragment();
		EnterRule("synpred222_AS3_fragment", 327);
		TraceIn("synpred222_AS3_fragment", 327);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:16: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:16: LineTerminator
			{
			DebugLocation(931, 16);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred222_AS35070); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred222_AS3_fragment", 327);
			LeaveRule("synpred222_AS3_fragment", 327);
			LeaveRule_synpred222_AS3_fragment();
		}
	}
	// $ANTLR end synpred222_AS3

	partial void EnterRule_synpred223_AS3_fragment();
	partial void LeaveRule_synpred223_AS3_fragment();

	// $ANTLR start synpred223_AS3
	public void synpred223_AS3_fragment()
	{
		EnterRule_synpred223_AS3_fragment();
		EnterRule("synpred223_AS3_fragment", 328);
		TraceIn("synpred223_AS3_fragment", 328);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:16: ( ( LineTerminator )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:16: ( LineTerminator )*
			{
			DebugLocation(931, 16);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:16: ( LineTerminator )*
			try { DebugEnterSubRule(423);
			while (true)
			{
				int alt423=2;
				try { DebugEnterDecision(423, false);
				int LA423_0 = input.LA(1);

				if ((LA423_0==LineTerminator))
				{
					alt423 = 1;
				}


				} finally { DebugExitDecision(423); }
				switch ( alt423 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:931:16: LineTerminator
					{
					DebugLocation(931, 16);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred223_AS35070); if (state.failed) return;

					}
					break;

				default:
					goto loop423;
				}
			}

			loop423:
				;

			} finally { DebugExitSubRule(423); }


			}

		}
		finally
		{
			TraceOut("synpred223_AS3_fragment", 328);
			LeaveRule("synpred223_AS3_fragment", 328);
			LeaveRule_synpred223_AS3_fragment();
		}
	}
	// $ANTLR end synpred223_AS3

	partial void EnterRule_synpred230_AS3_fragment();
	partial void LeaveRule_synpred230_AS3_fragment();

	// $ANTLR start synpred230_AS3
	public void synpred230_AS3_fragment()
	{
		EnterRule_synpred230_AS3_fragment();
		EnterRule("synpred230_AS3_fragment", 335);
		TraceIn("synpred230_AS3_fragment", 335);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:103: ( ( LineTerminator )* 'else' ( LineTerminator )* statement )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:103: ( LineTerminator )* 'else' ( LineTerminator )* statement
			{
			DebugLocation(935, 103);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:103: ( LineTerminator )*
			try { DebugEnterSubRule(424);
			while (true)
			{
				int alt424=2;
				try { DebugEnterDecision(424, false);
				int LA424_0 = input.LA(1);

				if ((LA424_0==LineTerminator))
				{
					alt424 = 1;
				}


				} finally { DebugExitDecision(424); }
				switch ( alt424 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:103: LineTerminator
					{
					DebugLocation(935, 103);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred230_AS35110); if (state.failed) return;

					}
					break;

				default:
					goto loop424;
				}
			}

			loop424:
				;

			} finally { DebugExitSubRule(424); }

			DebugLocation(935, 119);
			Match(input,90,Follow._90_in_synpred230_AS35113); if (state.failed) return;
			DebugLocation(935, 126);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:126: ( LineTerminator )*
			try { DebugEnterSubRule(425);
			while (true)
			{
				int alt425=2;
				try { DebugEnterDecision(425, false);
				int LA425_0 = input.LA(1);

				if ((LA425_0==LineTerminator))
				{
					alt425 = 1;
				}


				} finally { DebugExitDecision(425); }
				switch ( alt425 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:935:126: LineTerminator
					{
					DebugLocation(935, 126);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred230_AS35115); if (state.failed) return;

					}
					break;

				default:
					goto loop425;
				}
			}

			loop425:
				;

			} finally { DebugExitSubRule(425); }

			DebugLocation(935, 142);
			PushFollow(Follow._statement_in_synpred230_AS35118);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred230_AS3_fragment", 335);
			LeaveRule("synpred230_AS3_fragment", 335);
			LeaveRule_synpred230_AS3_fragment();
		}
	}
	// $ANTLR end synpred230_AS3

	partial void EnterRule_synpred233_AS3_fragment();
	partial void LeaveRule_synpred233_AS3_fragment();

	// $ANTLR start synpred233_AS3
	public void synpred233_AS3_fragment()
	{
		EnterRule_synpred233_AS3_fragment();
		EnterRule("synpred233_AS3_fragment", 338);
		TraceIn("synpred233_AS3_fragment", 338);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:941:4: ( forStatement )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:941:4: forStatement
			{
			DebugLocation(941, 4);
			PushFollow(Follow._forStatement_in_synpred233_AS35141);
			forStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred233_AS3_fragment", 338);
			LeaveRule("synpred233_AS3_fragment", 338);
			LeaveRule_synpred233_AS3_fragment();
		}
	}
	// $ANTLR end synpred233_AS3

	partial void EnterRule_synpred237_AS3_fragment();
	partial void LeaveRule_synpred237_AS3_fragment();

	// $ANTLR start synpred237_AS3
	public void synpred237_AS3_fragment()
	{
		EnterRule_synpred237_AS3_fragment();
		EnterRule("synpred237_AS3_fragment", 342);
		TraceIn("synpred237_AS3_fragment", 342);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:95: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:95: LineTerminator
			{
			DebugLocation(946, 95);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred237_AS35180); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred237_AS3_fragment", 342);
			LeaveRule("synpred237_AS3_fragment", 342);
			LeaveRule_synpred237_AS3_fragment();
		}
	}
	// $ANTLR end synpred237_AS3

	partial void EnterRule_synpred238_AS3_fragment();
	partial void LeaveRule_synpred238_AS3_fragment();

	// $ANTLR start synpred238_AS3
	public void synpred238_AS3_fragment()
	{
		EnterRule_synpred238_AS3_fragment();
		EnterRule("synpred238_AS3_fragment", 343);
		TraceIn("synpred238_AS3_fragment", 343);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:95: ( ( LineTerminator )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:95: ( LineTerminator )*
			{
			DebugLocation(946, 95);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:95: ( LineTerminator )*
			try { DebugEnterSubRule(426);
			while (true)
			{
				int alt426=2;
				try { DebugEnterDecision(426, false);
				int LA426_0 = input.LA(1);

				if ((LA426_0==LineTerminator))
				{
					alt426 = 1;
				}


				} finally { DebugExitDecision(426); }
				switch ( alt426 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:946:95: LineTerminator
					{
					DebugLocation(946, 95);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred238_AS35180); if (state.failed) return;

					}
					break;

				default:
					goto loop426;
				}
			}

			loop426:
				;

			} finally { DebugExitSubRule(426); }


			}

		}
		finally
		{
			TraceOut("synpred238_AS3_fragment", 343);
			LeaveRule("synpred238_AS3_fragment", 343);
			LeaveRule_synpred238_AS3_fragment();
		}
	}
	// $ANTLR end synpred238_AS3

	partial void EnterRule_synpred264_AS3_fragment();
	partial void LeaveRule_synpred264_AS3_fragment();

	// $ANTLR start synpred264_AS3
	public void synpred264_AS3_fragment()
	{
		EnterRule_synpred264_AS3_fragment();
		EnterRule("synpred264_AS3_fragment", 369);
		TraceIn("synpred264_AS3_fragment", 369);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:15: ( Identifier )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:15: Identifier
			{
			DebugLocation(972, 15);
			Match(input,Identifier,Follow._Identifier_in_synpred264_AS35378); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred264_AS3_fragment", 369);
			LeaveRule("synpred264_AS3_fragment", 369);
			LeaveRule_synpred264_AS3_fragment();
		}
	}
	// $ANTLR end synpred264_AS3

	partial void EnterRule_synpred265_AS3_fragment();
	partial void LeaveRule_synpred265_AS3_fragment();

	// $ANTLR start synpred265_AS3
	public void synpred265_AS3_fragment()
	{
		EnterRule_synpred265_AS3_fragment();
		EnterRule("synpred265_AS3_fragment", 370);
		TraceIn("synpred265_AS3_fragment", 370);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:28: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:28: LineTerminator
			{
			DebugLocation(972, 28);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred265_AS35382); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred265_AS3_fragment", 370);
			LeaveRule("synpred265_AS3_fragment", 370);
			LeaveRule_synpred265_AS3_fragment();
		}
	}
	// $ANTLR end synpred265_AS3

	partial void EnterRule_synpred266_AS3_fragment();
	partial void LeaveRule_synpred266_AS3_fragment();

	// $ANTLR start synpred266_AS3
	public void synpred266_AS3_fragment()
	{
		EnterRule_synpred266_AS3_fragment();
		EnterRule("synpred266_AS3_fragment", 371);
		TraceIn("synpred266_AS3_fragment", 371);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:28: ( ( LineTerminator )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:28: ( LineTerminator )*
			{
			DebugLocation(972, 28);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:28: ( LineTerminator )*
			try { DebugEnterSubRule(430);
			while (true)
			{
				int alt430=2;
				try { DebugEnterDecision(430, false);
				int LA430_0 = input.LA(1);

				if ((LA430_0==LineTerminator))
				{
					alt430 = 1;
				}


				} finally { DebugExitDecision(430); }
				switch ( alt430 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:972:28: LineTerminator
					{
					DebugLocation(972, 28);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred266_AS35382); if (state.failed) return;

					}
					break;

				default:
					goto loop430;
				}
			}

			loop430:
				;

			} finally { DebugExitSubRule(430); }


			}

		}
		finally
		{
			TraceOut("synpred266_AS3_fragment", 371);
			LeaveRule("synpred266_AS3_fragment", 371);
			LeaveRule_synpred266_AS3_fragment();
		}
	}
	// $ANTLR end synpred266_AS3

	partial void EnterRule_synpred267_AS3_fragment();
	partial void LeaveRule_synpred267_AS3_fragment();

	// $ANTLR start synpred267_AS3
	public void synpred267_AS3_fragment()
	{
		EnterRule_synpred267_AS3_fragment();
		EnterRule("synpred267_AS3_fragment", 372);
		TraceIn("synpred267_AS3_fragment", 372);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:12: ( Identifier )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:12: Identifier
			{
			DebugLocation(976, 12);
			Match(input,Identifier,Follow._Identifier_in_synpred267_AS35401); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred267_AS3_fragment", 372);
			LeaveRule("synpred267_AS3_fragment", 372);
			LeaveRule_synpred267_AS3_fragment();
		}
	}
	// $ANTLR end synpred267_AS3

	partial void EnterRule_synpred268_AS3_fragment();
	partial void LeaveRule_synpred268_AS3_fragment();

	// $ANTLR start synpred268_AS3
	public void synpred268_AS3_fragment()
	{
		EnterRule_synpred268_AS3_fragment();
		EnterRule("synpred268_AS3_fragment", 373);
		TraceIn("synpred268_AS3_fragment", 373);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:25: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:25: LineTerminator
			{
			DebugLocation(976, 25);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred268_AS35405); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred268_AS3_fragment", 373);
			LeaveRule("synpred268_AS3_fragment", 373);
			LeaveRule_synpred268_AS3_fragment();
		}
	}
	// $ANTLR end synpred268_AS3

	partial void EnterRule_synpred269_AS3_fragment();
	partial void LeaveRule_synpred269_AS3_fragment();

	// $ANTLR start synpred269_AS3
	public void synpred269_AS3_fragment()
	{
		EnterRule_synpred269_AS3_fragment();
		EnterRule("synpred269_AS3_fragment", 374);
		TraceIn("synpred269_AS3_fragment", 374);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:25: ( ( LineTerminator )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:25: ( LineTerminator )*
			{
			DebugLocation(976, 25);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:25: ( LineTerminator )*
			try { DebugEnterSubRule(431);
			while (true)
			{
				int alt431=2;
				try { DebugEnterDecision(431, false);
				int LA431_0 = input.LA(1);

				if ((LA431_0==LineTerminator))
				{
					alt431 = 1;
				}


				} finally { DebugExitDecision(431); }
				switch ( alt431 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:976:25: LineTerminator
					{
					DebugLocation(976, 25);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred269_AS35405); if (state.failed) return;

					}
					break;

				default:
					goto loop431;
				}
			}

			loop431:
				;

			} finally { DebugExitSubRule(431); }


			}

		}
		finally
		{
			TraceOut("synpred269_AS3_fragment", 374);
			LeaveRule("synpred269_AS3_fragment", 374);
			LeaveRule_synpred269_AS3_fragment();
		}
	}
	// $ANTLR end synpred269_AS3

	partial void EnterRule_synpred270_AS3_fragment();
	partial void LeaveRule_synpred270_AS3_fragment();

	// $ANTLR start synpred270_AS3
	public void synpred270_AS3_fragment()
	{
		EnterRule_synpred270_AS3_fragment();
		EnterRule("synpred270_AS3_fragment", 375);
		TraceIn("synpred270_AS3_fragment", 375);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:13: ( expression )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:13: expression
			{
			DebugLocation(980, 13);
			PushFollow(Follow._expression_in_synpred270_AS35424);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred270_AS3_fragment", 375);
			LeaveRule("synpred270_AS3_fragment", 375);
			LeaveRule_synpred270_AS3_fragment();
		}
	}
	// $ANTLR end synpred270_AS3

	partial void EnterRule_synpred271_AS3_fragment();
	partial void LeaveRule_synpred271_AS3_fragment();

	// $ANTLR start synpred271_AS3
	public void synpred271_AS3_fragment()
	{
		EnterRule_synpred271_AS3_fragment();
		EnterRule("synpred271_AS3_fragment", 376);
		TraceIn("synpred271_AS3_fragment", 376);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:26: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:26: LineTerminator
			{
			DebugLocation(980, 26);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred271_AS35428); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred271_AS3_fragment", 376);
			LeaveRule("synpred271_AS3_fragment", 376);
			LeaveRule_synpred271_AS3_fragment();
		}
	}
	// $ANTLR end synpred271_AS3

	partial void EnterRule_synpred272_AS3_fragment();
	partial void LeaveRule_synpred272_AS3_fragment();

	// $ANTLR start synpred272_AS3
	public void synpred272_AS3_fragment()
	{
		EnterRule_synpred272_AS3_fragment();
		EnterRule("synpred272_AS3_fragment", 377);
		TraceIn("synpred272_AS3_fragment", 377);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:26: ( ( LineTerminator )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:26: ( LineTerminator )*
			{
			DebugLocation(980, 26);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:26: ( LineTerminator )*
			try { DebugEnterSubRule(432);
			while (true)
			{
				int alt432=2;
				try { DebugEnterDecision(432, false);
				int LA432_0 = input.LA(1);

				if ((LA432_0==LineTerminator))
				{
					alt432 = 1;
				}


				} finally { DebugExitDecision(432); }
				switch ( alt432 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:980:26: LineTerminator
					{
					DebugLocation(980, 26);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred272_AS35428); if (state.failed) return;

					}
					break;

				default:
					goto loop432;
				}
			}

			loop432:
				;

			} finally { DebugExitSubRule(432); }


			}

		}
		finally
		{
			TraceOut("synpred272_AS3_fragment", 377);
			LeaveRule("synpred272_AS3_fragment", 377);
			LeaveRule_synpred272_AS3_fragment();
		}
	}
	// $ANTLR end synpred272_AS3

	partial void EnterRule_synpred290_AS3_fragment();
	partial void LeaveRule_synpred290_AS3_fragment();

	// $ANTLR start synpred290_AS3
	public void synpred290_AS3_fragment()
	{
		EnterRule_synpred290_AS3_fragment();
		EnterRule("synpred290_AS3_fragment", 395);
		TraceIn("synpred290_AS3_fragment", 395);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:58: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:58: LineTerminator
			{
			DebugLocation(996, 58);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred290_AS35562); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred290_AS3_fragment", 395);
			LeaveRule("synpred290_AS3_fragment", 395);
			LeaveRule_synpred290_AS3_fragment();
		}
	}
	// $ANTLR end synpred290_AS3

	partial void EnterRule_synpred291_AS3_fragment();
	partial void LeaveRule_synpred291_AS3_fragment();

	// $ANTLR start synpred291_AS3
	public void synpred291_AS3_fragment()
	{
		EnterRule_synpred291_AS3_fragment();
		EnterRule("synpred291_AS3_fragment", 396);
		TraceIn("synpred291_AS3_fragment", 396);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:74: ( statementList )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:996:74: statementList
			{
			DebugLocation(996, 74);
			PushFollow(Follow._statementList_in_synpred291_AS35565);
			statementList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred291_AS3_fragment", 396);
			LeaveRule("synpred291_AS3_fragment", 396);
			LeaveRule_synpred291_AS3_fragment();
		}
	}
	// $ANTLR end synpred291_AS3

	partial void EnterRule_synpred293_AS3_fragment();
	partial void LeaveRule_synpred293_AS3_fragment();

	// $ANTLR start synpred293_AS3
	public void synpred293_AS3_fragment()
	{
		EnterRule_synpred293_AS3_fragment();
		EnterRule("synpred293_AS3_fragment", 398);
		TraceIn("synpred293_AS3_fragment", 398);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1000:34: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1000:34: LineTerminator
			{
			DebugLocation(1000, 34);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred293_AS35585); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred293_AS3_fragment", 398);
			LeaveRule("synpred293_AS3_fragment", 398);
			LeaveRule_synpred293_AS3_fragment();
		}
	}
	// $ANTLR end synpred293_AS3

	partial void EnterRule_synpred294_AS3_fragment();
	partial void LeaveRule_synpred294_AS3_fragment();

	// $ANTLR start synpred294_AS3
	public void synpred294_AS3_fragment()
	{
		EnterRule_synpred294_AS3_fragment();
		EnterRule("synpred294_AS3_fragment", 399);
		TraceIn("synpred294_AS3_fragment", 399);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1000:50: ( statementList )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1000:50: statementList
			{
			DebugLocation(1000, 50);
			PushFollow(Follow._statementList_in_synpred294_AS35588);
			statementList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred294_AS3_fragment", 399);
			LeaveRule("synpred294_AS3_fragment", 399);
			LeaveRule_synpred294_AS3_fragment();
		}
	}
	// $ANTLR end synpred294_AS3

	partial void EnterRule_synpred297_AS3_fragment();
	partial void LeaveRule_synpred297_AS3_fragment();

	// $ANTLR start synpred297_AS3
	public void synpred297_AS3_fragment()
	{
		EnterRule_synpred297_AS3_fragment();
		EnterRule("synpred297_AS3_fragment", 402);
		TraceIn("synpred297_AS3_fragment", 402);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:24: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:24: LineTerminator
			{
			DebugLocation(1008, 24);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred297_AS35628); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred297_AS3_fragment", 402);
			LeaveRule("synpred297_AS3_fragment", 402);
			LeaveRule_synpred297_AS3_fragment();
		}
	}
	// $ANTLR end synpred297_AS3

	partial void EnterRule_synpred298_AS3_fragment();
	partial void LeaveRule_synpred298_AS3_fragment();

	// $ANTLR start synpred298_AS3
	public void synpred298_AS3_fragment()
	{
		EnterRule_synpred298_AS3_fragment();
		EnterRule("synpred298_AS3_fragment", 403);
		TraceIn("synpred298_AS3_fragment", 403);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:24: ( ( LineTerminator )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:24: ( LineTerminator )*
			{
			DebugLocation(1008, 24);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:24: ( LineTerminator )*
			try { DebugEnterSubRule(438);
			while (true)
			{
				int alt438=2;
				try { DebugEnterDecision(438, false);
				int LA438_0 = input.LA(1);

				if ((LA438_0==LineTerminator))
				{
					alt438 = 1;
				}


				} finally { DebugExitDecision(438); }
				switch ( alt438 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1008:24: LineTerminator
					{
					DebugLocation(1008, 24);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred298_AS35628); if (state.failed) return;

					}
					break;

				default:
					goto loop438;
				}
			}

			loop438:
				;

			} finally { DebugExitSubRule(438); }


			}

		}
		finally
		{
			TraceOut("synpred298_AS3_fragment", 403);
			LeaveRule("synpred298_AS3_fragment", 403);
			LeaveRule_synpred298_AS3_fragment();
		}
	}
	// $ANTLR end synpred298_AS3

	partial void EnterRule_synpred301_AS3_fragment();
	partial void LeaveRule_synpred301_AS3_fragment();

	// $ANTLR start synpred301_AS3
	public void synpred301_AS3_fragment()
	{
		EnterRule_synpred301_AS3_fragment();
		EnterRule("synpred301_AS3_fragment", 406);
		TraceIn("synpred301_AS3_fragment", 406);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:73: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:73: LineTerminator
			{
			DebugLocation(1012, 73);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred301_AS35659); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred301_AS3_fragment", 406);
			LeaveRule("synpred301_AS3_fragment", 406);
			LeaveRule_synpred301_AS3_fragment();
		}
	}
	// $ANTLR end synpred301_AS3

	partial void EnterRule_synpred303_AS3_fragment();
	partial void LeaveRule_synpred303_AS3_fragment();

	// $ANTLR start synpred303_AS3
	public void synpred303_AS3_fragment()
	{
		EnterRule_synpred303_AS3_fragment();
		EnterRule("synpred303_AS3_fragment", 408);
		TraceIn("synpred303_AS3_fragment", 408);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:105: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1012:105: LineTerminator
			{
			DebugLocation(1012, 105);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred303_AS35668); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred303_AS3_fragment", 408);
			LeaveRule("synpred303_AS3_fragment", 408);
			LeaveRule_synpred303_AS3_fragment();
		}
	}
	// $ANTLR end synpred303_AS3

	partial void EnterRule_synpred316_AS3_fragment();
	partial void LeaveRule_synpred316_AS3_fragment();

	// $ANTLR start synpred316_AS3
	public void synpred316_AS3_fragment()
	{
		EnterRule_synpred316_AS3_fragment();
		EnterRule("synpred316_AS3_fragment", 421);
		TraceIn("synpred316_AS3_fragment", 421);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:93: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:93: LineTerminator
			{
			DebugLocation(1028, 93);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred316_AS35768); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred316_AS3_fragment", 421);
			LeaveRule("synpred316_AS3_fragment", 421);
			LeaveRule_synpred316_AS3_fragment();
		}
	}
	// $ANTLR end synpred316_AS3

	partial void EnterRule_synpred319_AS3_fragment();
	partial void LeaveRule_synpred319_AS3_fragment();

	// $ANTLR start synpred319_AS3
	public void synpred319_AS3_fragment()
	{
		EnterRule_synpred319_AS3_fragment();
		EnterRule("synpred319_AS3_fragment", 424);
		TraceIn("synpred319_AS3_fragment", 424);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:146: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1028:146: LineTerminator
			{
			DebugLocation(1028, 146);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred319_AS35779); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred319_AS3_fragment", 424);
			LeaveRule("synpred319_AS3_fragment", 424);
			LeaveRule_synpred319_AS3_fragment();
		}
	}
	// $ANTLR end synpred319_AS3

	partial void EnterRule_synpred321_AS3_fragment();
	partial void LeaveRule_synpred321_AS3_fragment();

	// $ANTLR start synpred321_AS3
	public void synpred321_AS3_fragment()
	{
		EnterRule_synpred321_AS3_fragment();
		EnterRule("synpred321_AS3_fragment", 426);
		TraceIn("synpred321_AS3_fragment", 426);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:15: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:15: LineTerminator
			{
			DebugLocation(1032, 15);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred321_AS35801); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred321_AS3_fragment", 426);
			LeaveRule("synpred321_AS3_fragment", 426);
			LeaveRule_synpred321_AS3_fragment();
		}
	}
	// $ANTLR end synpred321_AS3

	partial void EnterRule_synpred324_AS3_fragment();
	partial void LeaveRule_synpred324_AS3_fragment();

	// $ANTLR start synpred324_AS3
	public void synpred324_AS3_fragment()
	{
		EnterRule_synpred324_AS3_fragment();
		EnterRule("synpred324_AS3_fragment", 429);
		TraceIn("synpred324_AS3_fragment", 429);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:79: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:79: LineTerminator
			{
			DebugLocation(1032, 79);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred324_AS35812); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred324_AS3_fragment", 429);
			LeaveRule("synpred324_AS3_fragment", 429);
			LeaveRule_synpred324_AS3_fragment();
		}
	}
	// $ANTLR end synpred324_AS3

	partial void EnterRule_synpred327_AS3_fragment();
	partial void LeaveRule_synpred327_AS3_fragment();

	// $ANTLR start synpred327_AS3
	public void synpred327_AS3_fragment()
	{
		EnterRule_synpred327_AS3_fragment();
		EnterRule("synpred327_AS3_fragment", 432);
		TraceIn("synpred327_AS3_fragment", 432);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:132: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1032:132: LineTerminator
			{
			DebugLocation(1032, 132);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred327_AS35823); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred327_AS3_fragment", 432);
			LeaveRule("synpred327_AS3_fragment", 432);
			LeaveRule_synpred327_AS3_fragment();
		}
	}
	// $ANTLR end synpred327_AS3

	partial void EnterRule_synpred335_AS3_fragment();
	partial void LeaveRule_synpred335_AS3_fragment();

	// $ANTLR start synpred335_AS3
	public void synpred335_AS3_fragment()
	{
		EnterRule_synpred335_AS3_fragment();
		EnterRule("synpred335_AS3_fragment", 440);
		TraceIn("synpred335_AS3_fragment", 440);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:15: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:15: LineTerminator
			{
			DebugLocation(1040, 15);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred335_AS35883); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred335_AS3_fragment", 440);
			LeaveRule("synpred335_AS3_fragment", 440);
			LeaveRule_synpred335_AS3_fragment();
		}
	}
	// $ANTLR end synpred335_AS3

	partial void EnterRule_synpred337_AS3_fragment();
	partial void LeaveRule_synpred337_AS3_fragment();

	// $ANTLR start synpred337_AS3
	public void synpred337_AS3_fragment()
	{
		EnterRule_synpred337_AS3_fragment();
		EnterRule("synpred337_AS3_fragment", 442);
		TraceIn("synpred337_AS3_fragment", 442);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:48: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1040:48: LineTerminator
			{
			DebugLocation(1040, 48);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred337_AS35889); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred337_AS3_fragment", 442);
			LeaveRule("synpred337_AS3_fragment", 442);
			LeaveRule_synpred337_AS3_fragment();
		}
	}
	// $ANTLR end synpred337_AS3

	partial void EnterRule_synpred344_AS3_fragment();
	partial void LeaveRule_synpred344_AS3_fragment();

	// $ANTLR start synpred344_AS3
	public void synpred344_AS3_fragment()
	{
		EnterRule_synpred344_AS3_fragment();
		EnterRule("synpred344_AS3_fragment", 449);
		TraceIn("synpred344_AS3_fragment", 449);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1046:35: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1046:35: LineTerminator
			{
			DebugLocation(1046, 35);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred344_AS35932); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred344_AS3_fragment", 449);
			LeaveRule("synpred344_AS3_fragment", 449);
			LeaveRule_synpred344_AS3_fragment();
		}
	}
	// $ANTLR end synpred344_AS3

	partial void EnterRule_synpred346_AS3_fragment();
	partial void LeaveRule_synpred346_AS3_fragment();

	// $ANTLR start synpred346_AS3
	public void synpred346_AS3_fragment()
	{
		EnterRule_synpred346_AS3_fragment();
		EnterRule("synpred346_AS3_fragment", 451);
		TraceIn("synpred346_AS3_fragment", 451);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1050:4: ( functionDeclaration )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1050:4: functionDeclaration
			{
			DebugLocation(1050, 4);
			PushFollow(Follow._functionDeclaration_in_synpred346_AS35946);
			functionDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred346_AS3_fragment", 451);
			LeaveRule("synpred346_AS3_fragment", 451);
			LeaveRule_synpred346_AS3_fragment();
		}
	}
	// $ANTLR end synpred346_AS3

	partial void EnterRule_synpred347_AS3_fragment();
	partial void LeaveRule_synpred347_AS3_fragment();

	// $ANTLR start synpred347_AS3
	public void synpred347_AS3_fragment()
	{
		EnterRule_synpred347_AS3_fragment();
		EnterRule("synpred347_AS3_fragment", 452);
		TraceIn("synpred347_AS3_fragment", 452);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:14: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:14: LineTerminator
			{
			DebugLocation(1060, 14);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred347_AS35969); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred347_AS3_fragment", 452);
			LeaveRule("synpred347_AS3_fragment", 452);
			LeaveRule_synpred347_AS3_fragment();
		}
	}
	// $ANTLR end synpred347_AS3

	partial void EnterRule_synpred350_AS3_fragment();
	partial void LeaveRule_synpred350_AS3_fragment();

	// $ANTLR start synpred350_AS3
	public void synpred350_AS3_fragment()
	{
		EnterRule_synpred350_AS3_fragment();
		EnterRule("synpred350_AS3_fragment", 455);
		TraceIn("synpred350_AS3_fragment", 455);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:65: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1060:65: LineTerminator
			{
			DebugLocation(1060, 65);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred350_AS35980); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred350_AS3_fragment", 455);
			LeaveRule("synpred350_AS3_fragment", 455);
			LeaveRule_synpred350_AS3_fragment();
		}
	}
	// $ANTLR end synpred350_AS3

	partial void EnterRule_synpred352_AS3_fragment();
	partial void LeaveRule_synpred352_AS3_fragment();

	// $ANTLR start synpred352_AS3
	public void synpred352_AS3_fragment()
	{
		EnterRule_synpred352_AS3_fragment();
		EnterRule("synpred352_AS3_fragment", 457);
		TraceIn("synpred352_AS3_fragment", 457);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1064:5: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1064:5: LineTerminator
			{
			DebugLocation(1064, 5);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred352_AS36001); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred352_AS3_fragment", 457);
			LeaveRule("synpred352_AS3_fragment", 457);
			LeaveRule_synpred352_AS3_fragment();
		}
	}
	// $ANTLR end synpred352_AS3

	partial void EnterRule_synpred353_AS3_fragment();
	partial void LeaveRule_synpred353_AS3_fragment();

	// $ANTLR start synpred353_AS3
	public void synpred353_AS3_fragment()
	{
		EnterRule_synpred353_AS3_fragment();
		EnterRule("synpred353_AS3_fragment", 458);
		TraceIn("synpred353_AS3_fragment", 458);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1064:36: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1064:36: LineTerminator
			{
			DebugLocation(1064, 36);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred353_AS36006); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred353_AS3_fragment", 458);
			LeaveRule("synpred353_AS3_fragment", 458);
			LeaveRule_synpred353_AS3_fragment();
		}
	}
	// $ANTLR end synpred353_AS3

	partial void EnterRule_synpred359_AS3_fragment();
	partial void LeaveRule_synpred359_AS3_fragment();

	// $ANTLR start synpred359_AS3
	public void synpred359_AS3_fragment()
	{
		EnterRule_synpred359_AS3_fragment();
		EnterRule("synpred359_AS3_fragment", 464);
		TraceIn("synpred359_AS3_fragment", 464);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:50: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:50: LineTerminator
			{
			DebugLocation(1074, 50);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred359_AS36052); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred359_AS3_fragment", 464);
			LeaveRule("synpred359_AS3_fragment", 464);
			LeaveRule_synpred359_AS3_fragment();
		}
	}
	// $ANTLR end synpred359_AS3

	partial void EnterRule_synpred360_AS3_fragment();
	partial void LeaveRule_synpred360_AS3_fragment();

	// $ANTLR start synpred360_AS3
	public void synpred360_AS3_fragment()
	{
		EnterRule_synpred360_AS3_fragment();
		EnterRule("synpred360_AS3_fragment", 465);
		TraceIn("synpred360_AS3_fragment", 465);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:50: ( ( LineTerminator )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:50: ( LineTerminator )*
			{
			DebugLocation(1074, 50);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:50: ( LineTerminator )*
			try { DebugEnterSubRule(456);
			while (true)
			{
				int alt456=2;
				try { DebugEnterDecision(456, false);
				int LA456_0 = input.LA(1);

				if ((LA456_0==LineTerminator))
				{
					alt456 = 1;
				}


				} finally { DebugExitDecision(456); }
				switch ( alt456 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1074:50: LineTerminator
					{
					DebugLocation(1074, 50);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred360_AS36052); if (state.failed) return;

					}
					break;

				default:
					goto loop456;
				}
			}

			loop456:
				;

			} finally { DebugExitSubRule(456); }


			}

		}
		finally
		{
			TraceOut("synpred360_AS3_fragment", 465);
			LeaveRule("synpred360_AS3_fragment", 465);
			LeaveRule_synpred360_AS3_fragment();
		}
	}
	// $ANTLR end synpred360_AS3

	partial void EnterRule_synpred364_AS3_fragment();
	partial void LeaveRule_synpred364_AS3_fragment();

	// $ANTLR start synpred364_AS3
	public void synpred364_AS3_fragment()
	{
		EnterRule_synpred364_AS3_fragment();
		EnterRule("synpred364_AS3_fragment", 469);
		TraceIn("synpred364_AS3_fragment", 469);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1078:53: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1078:53: LineTerminator
			{
			DebugLocation(1078, 53);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred364_AS36083); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred364_AS3_fragment", 469);
			LeaveRule("synpred364_AS3_fragment", 469);
			LeaveRule_synpred364_AS3_fragment();
		}
	}
	// $ANTLR end synpred364_AS3

	partial void EnterRule_synpred368_AS3_fragment();
	partial void LeaveRule_synpred368_AS3_fragment();

	// $ANTLR start synpred368_AS3
	public void synpred368_AS3_fragment()
	{
		EnterRule_synpred368_AS3_fragment();
		EnterRule("synpred368_AS3_fragment", 473);
		TraceIn("synpred368_AS3_fragment", 473);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:67: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:67: LineTerminator
			{
			DebugLocation(1082, 67);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred368_AS36110); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred368_AS3_fragment", 473);
			LeaveRule("synpred368_AS3_fragment", 473);
			LeaveRule_synpred368_AS3_fragment();
		}
	}
	// $ANTLR end synpred368_AS3

	partial void EnterRule_synpred370_AS3_fragment();
	partial void LeaveRule_synpred370_AS3_fragment();

	// $ANTLR start synpred370_AS3
	public void synpred370_AS3_fragment()
	{
		EnterRule_synpred370_AS3_fragment();
		EnterRule("synpred370_AS3_fragment", 475);
		TraceIn("synpred370_AS3_fragment", 475);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:96: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:96: LineTerminator
			{
			DebugLocation(1082, 96);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred370_AS36116); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred370_AS3_fragment", 475);
			LeaveRule("synpred370_AS3_fragment", 475);
			LeaveRule_synpred370_AS3_fragment();
		}
	}
	// $ANTLR end synpred370_AS3

	partial void EnterRule_synpred373_AS3_fragment();
	partial void LeaveRule_synpred373_AS3_fragment();

	// $ANTLR start synpred373_AS3
	public void synpred373_AS3_fragment()
	{
		EnterRule_synpred373_AS3_fragment();
		EnterRule("synpred373_AS3_fragment", 478);
		TraceIn("synpred373_AS3_fragment", 478);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:158: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1082:158: LineTerminator
			{
			DebugLocation(1082, 158);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred373_AS36127); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred373_AS3_fragment", 478);
			LeaveRule("synpred373_AS3_fragment", 478);
			LeaveRule_synpred373_AS3_fragment();
		}
	}
	// $ANTLR end synpred373_AS3

	partial void EnterRule_synpred378_AS3_fragment();
	partial void LeaveRule_synpred378_AS3_fragment();

	// $ANTLR start synpred378_AS3
	public void synpred378_AS3_fragment()
	{
		EnterRule_synpred378_AS3_fragment();
		EnterRule("synpred378_AS3_fragment", 483);
		TraceIn("synpred378_AS3_fragment", 483);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1086:53: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1086:53: LineTerminator
			{
			DebugLocation(1086, 53);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred378_AS36161); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred378_AS3_fragment", 483);
			LeaveRule("synpred378_AS3_fragment", 483);
			LeaveRule_synpred378_AS3_fragment();
		}
	}
	// $ANTLR end synpred378_AS3

	partial void EnterRule_synpred382_AS3_fragment();
	partial void LeaveRule_synpred382_AS3_fragment();

	// $ANTLR start synpred382_AS3
	public void synpred382_AS3_fragment()
	{
		EnterRule_synpred382_AS3_fragment();
		EnterRule("synpred382_AS3_fragment", 487);
		TraceIn("synpred382_AS3_fragment", 487);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:72: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:72: LineTerminator
			{
			DebugLocation(1090, 72);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred382_AS36189); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred382_AS3_fragment", 487);
			LeaveRule("synpred382_AS3_fragment", 487);
			LeaveRule_synpred382_AS3_fragment();
		}
	}
	// $ANTLR end synpred382_AS3

	partial void EnterRule_synpred385_AS3_fragment();
	partial void LeaveRule_synpred385_AS3_fragment();

	// $ANTLR start synpred385_AS3
	public void synpred385_AS3_fragment()
	{
		EnterRule_synpred385_AS3_fragment();
		EnterRule("synpred385_AS3_fragment", 490);
		TraceIn("synpred385_AS3_fragment", 490);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:121: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1090:121: LineTerminator
			{
			DebugLocation(1090, 121);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred385_AS36200); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred385_AS3_fragment", 490);
			LeaveRule("synpred385_AS3_fragment", 490);
			LeaveRule_synpred385_AS3_fragment();
		}
	}
	// $ANTLR end synpred385_AS3

	partial void EnterRule_synpred392_AS3_fragment();
	partial void LeaveRule_synpred392_AS3_fragment();

	// $ANTLR start synpred392_AS3
	public void synpred392_AS3_fragment()
	{
		EnterRule_synpred392_AS3_fragment();
		EnterRule("synpred392_AS3_fragment", 497);
		TraceIn("synpred392_AS3_fragment", 497);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1110:5: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1110:5: LineTerminator
			{
			DebugLocation(1110, 5);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred392_AS36274); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred392_AS3_fragment", 497);
			LeaveRule("synpred392_AS3_fragment", 497);
			LeaveRule_synpred392_AS3_fragment();
		}
	}
	// $ANTLR end synpred392_AS3

	partial void EnterRule_synpred393_AS3_fragment();
	partial void LeaveRule_synpred393_AS3_fragment();

	// $ANTLR start synpred393_AS3
	public void synpred393_AS3_fragment()
	{
		EnterRule_synpred393_AS3_fragment();
		EnterRule("synpred393_AS3_fragment", 498);
		TraceIn("synpred393_AS3_fragment", 498);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1110:34: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1110:34: LineTerminator
			{
			DebugLocation(1110, 34);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred393_AS36279); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred393_AS3_fragment", 498);
			LeaveRule("synpred393_AS3_fragment", 498);
			LeaveRule_synpred393_AS3_fragment();
		}
	}
	// $ANTLR end synpred393_AS3

	partial void EnterRule_synpred395_AS3_fragment();
	partial void LeaveRule_synpred395_AS3_fragment();

	// $ANTLR start synpred395_AS3
	public void synpred395_AS3_fragment()
	{
		EnterRule_synpred395_AS3_fragment();
		EnterRule("synpred395_AS3_fragment", 500);
		TraceIn("synpred395_AS3_fragment", 500);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:4: ( 'override' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:4: 'override'
			{
			DebugLocation(1114, 4);
			Match(input,108,Follow._108_in_synpred395_AS36293); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred395_AS3_fragment", 500);
			LeaveRule("synpred395_AS3_fragment", 500);
			LeaveRule_synpred395_AS3_fragment();
		}
	}
	// $ANTLR end synpred395_AS3

	partial void EnterRule_synpred396_AS3_fragment();
	partial void LeaveRule_synpred396_AS3_fragment();

	// $ANTLR start synpred396_AS3
	public void synpred396_AS3_fragment()
	{
		EnterRule_synpred396_AS3_fragment();
		EnterRule("synpred396_AS3_fragment", 501);
		TraceIn("synpred396_AS3_fragment", 501);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:16: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:16: LineTerminator
			{
			DebugLocation(1114, 16);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred396_AS36296); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred396_AS3_fragment", 501);
			LeaveRule("synpred396_AS3_fragment", 501);
			LeaveRule_synpred396_AS3_fragment();
		}
	}
	// $ANTLR end synpred396_AS3

	partial void EnterRule_synpred398_AS3_fragment();
	partial void LeaveRule_synpred398_AS3_fragment();

	// $ANTLR start synpred398_AS3
	public void synpred398_AS3_fragment()
	{
		EnterRule_synpred398_AS3_fragment();
		EnterRule("synpred398_AS3_fragment", 503);
		TraceIn("synpred398_AS3_fragment", 503);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:43: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:43: LineTerminator
			{
			DebugLocation(1114, 43);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred398_AS36302); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred398_AS3_fragment", 503);
			LeaveRule("synpred398_AS3_fragment", 503);
			LeaveRule_synpred398_AS3_fragment();
		}
	}
	// $ANTLR end synpred398_AS3

	partial void EnterRule_synpred401_AS3_fragment();
	partial void LeaveRule_synpred401_AS3_fragment();

	// $ANTLR start synpred401_AS3
	public void synpred401_AS3_fragment()
	{
		EnterRule_synpred401_AS3_fragment();
		EnterRule("synpred401_AS3_fragment", 506);
		TraceIn("synpred401_AS3_fragment", 506);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:4: ( ( 'override' )? ( LineTerminator )* ( namespace )? ( LineTerminator )* ( 'override' )? ( LineTerminator )* functionDeclaration )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:4: ( 'override' )? ( LineTerminator )* ( namespace )? ( LineTerminator )* ( 'override' )? ( LineTerminator )* functionDeclaration
			{
			DebugLocation(1114, 4);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:4: ( 'override' )?
			int alt461=2;
			try { DebugEnterSubRule(461);
			try { DebugEnterDecision(461, false);
			int LA461_0 = input.LA(1);

			if ((LA461_0==108))
			{
				int LA461_1 = input.LA(2);

				if ((EvaluatePredicate(synpred395_AS3_fragment)))
				{
					alt461 = 1;
				}
			}
			} finally { DebugExitDecision(461); }
			switch (alt461)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:4: 'override'
				{
				DebugLocation(1114, 4);
				Match(input,108,Follow._108_in_synpred401_AS36293); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(461); }

			DebugLocation(1114, 16);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:16: ( LineTerminator )*
			try { DebugEnterSubRule(462);
			while (true)
			{
				int alt462=2;
				try { DebugEnterDecision(462, false);
				int LA462_0 = input.LA(1);

				if ((LA462_0==LineTerminator))
				{
					int LA462_2 = input.LA(2);

					if ((EvaluatePredicate(synpred396_AS3_fragment)))
					{
						alt462 = 1;
					}


				}


				} finally { DebugExitDecision(462); }
				switch ( alt462 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:16: LineTerminator
					{
					DebugLocation(1114, 16);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred401_AS36296); if (state.failed) return;

					}
					break;

				default:
					goto loop462;
				}
			}

			loop462:
				;

			} finally { DebugExitSubRule(462); }

			DebugLocation(1114, 32);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:32: ( namespace )?
			int alt463=2;
			try { DebugEnterSubRule(463);
			try { DebugEnterDecision(463, false);
			int LA463_0 = input.LA(1);

			if ((LA463_0==Identifier||LA463_0==104||(LA463_0>=110 && LA463_0<=112)))
			{
				alt463 = 1;
			}
			} finally { DebugExitDecision(463); }
			switch (alt463)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:32: namespace
				{
				DebugLocation(1114, 32);
				PushFollow(Follow._namespace_in_synpred401_AS36299);
				@namespace();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(463); }

			DebugLocation(1114, 43);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:43: ( LineTerminator )*
			try { DebugEnterSubRule(464);
			while (true)
			{
				int alt464=2;
				try { DebugEnterDecision(464, false);
				int LA464_0 = input.LA(1);

				if ((LA464_0==LineTerminator))
				{
					int LA464_2 = input.LA(2);

					if ((EvaluatePredicate(synpred398_AS3_fragment)))
					{
						alt464 = 1;
					}


				}


				} finally { DebugExitDecision(464); }
				switch ( alt464 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:43: LineTerminator
					{
					DebugLocation(1114, 43);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred401_AS36302); if (state.failed) return;

					}
					break;

				default:
					goto loop464;
				}
			}

			loop464:
				;

			} finally { DebugExitSubRule(464); }

			DebugLocation(1114, 59);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:59: ( 'override' )?
			int alt465=2;
			try { DebugEnterSubRule(465);
			try { DebugEnterDecision(465, false);
			int LA465_0 = input.LA(1);

			if ((LA465_0==108))
			{
				alt465 = 1;
			}
			} finally { DebugExitDecision(465); }
			switch (alt465)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:59: 'override'
				{
				DebugLocation(1114, 59);
				Match(input,108,Follow._108_in_synpred401_AS36305); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(465); }

			DebugLocation(1114, 71);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:71: ( LineTerminator )*
			try { DebugEnterSubRule(466);
			while (true)
			{
				int alt466=2;
				try { DebugEnterDecision(466, false);
				int LA466_0 = input.LA(1);

				if ((LA466_0==LineTerminator))
				{
					alt466 = 1;
				}


				} finally { DebugExitDecision(466); }
				switch ( alt466 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1114:71: LineTerminator
					{
					DebugLocation(1114, 71);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred401_AS36308); if (state.failed) return;

					}
					break;

				default:
					goto loop466;
				}
			}

			loop466:
				;

			} finally { DebugExitSubRule(466); }

			DebugLocation(1114, 87);
			PushFollow(Follow._functionDeclaration_in_synpred401_AS36311);
			functionDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred401_AS3_fragment", 506);
			LeaveRule("synpred401_AS3_fragment", 506);
			LeaveRule_synpred401_AS3_fragment();
		}
	}
	// $ANTLR end synpred401_AS3

	partial void EnterRule_synpred402_AS3_fragment();
	partial void LeaveRule_synpred402_AS3_fragment();

	// $ANTLR start synpred402_AS3
	public void synpred402_AS3_fragment()
	{
		EnterRule_synpred402_AS3_fragment();
		EnterRule("synpred402_AS3_fragment", 507);
		TraceIn("synpred402_AS3_fragment", 507);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:4: ( 'static' )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:4: 'static'
			{
			DebugLocation(1115, 4);
			Match(input,115,Follow._115_in_synpred402_AS36316); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred402_AS3_fragment", 507);
			LeaveRule("synpred402_AS3_fragment", 507);
			LeaveRule_synpred402_AS3_fragment();
		}
	}
	// $ANTLR end synpred402_AS3

	partial void EnterRule_synpred403_AS3_fragment();
	partial void LeaveRule_synpred403_AS3_fragment();

	// $ANTLR start synpred403_AS3
	public void synpred403_AS3_fragment()
	{
		EnterRule_synpred403_AS3_fragment();
		EnterRule("synpred403_AS3_fragment", 508);
		TraceIn("synpred403_AS3_fragment", 508);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:14: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:14: LineTerminator
			{
			DebugLocation(1115, 14);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred403_AS36319); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred403_AS3_fragment", 508);
			LeaveRule("synpred403_AS3_fragment", 508);
			LeaveRule_synpred403_AS3_fragment();
		}
	}
	// $ANTLR end synpred403_AS3

	partial void EnterRule_synpred405_AS3_fragment();
	partial void LeaveRule_synpred405_AS3_fragment();

	// $ANTLR start synpred405_AS3
	public void synpred405_AS3_fragment()
	{
		EnterRule_synpred405_AS3_fragment();
		EnterRule("synpred405_AS3_fragment", 510);
		TraceIn("synpred405_AS3_fragment", 510);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:41: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1115:41: LineTerminator
			{
			DebugLocation(1115, 41);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred405_AS36325); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred405_AS3_fragment", 510);
			LeaveRule("synpred405_AS3_fragment", 510);
			LeaveRule_synpred405_AS3_fragment();
		}
	}
	// $ANTLR end synpred405_AS3

	partial void EnterRule_synpred409_AS3_fragment();
	partial void LeaveRule_synpred409_AS3_fragment();

	// $ANTLR start synpred409_AS3
	public void synpred409_AS3_fragment()
	{
		EnterRule_synpred409_AS3_fragment();
		EnterRule("synpred409_AS3_fragment", 514);
		TraceIn("synpred409_AS3_fragment", 514);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1119:4: ( classMember )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1119:4: classMember
			{
			DebugLocation(1119, 4);
			PushFollow(Follow._classMember_in_synpred409_AS36353);
			classMember();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred409_AS3_fragment", 514);
			LeaveRule("synpred409_AS3_fragment", 514);
			LeaveRule_synpred409_AS3_fragment();
		}
	}
	// $ANTLR end synpred409_AS3

	partial void EnterRule_synpred411_AS3_fragment();
	partial void LeaveRule_synpred411_AS3_fragment();

	// $ANTLR start synpred411_AS3
	public void synpred411_AS3_fragment()
	{
		EnterRule_synpred411_AS3_fragment();
		EnterRule("synpred411_AS3_fragment", 516);
		TraceIn("synpred411_AS3_fragment", 516);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1124:38: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1124:38: LineTerminator
			{
			DebugLocation(1124, 38);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred411_AS36375); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred411_AS3_fragment", 516);
			LeaveRule("synpred411_AS3_fragment", 516);
			LeaveRule_synpred411_AS3_fragment();
		}
	}
	// $ANTLR end synpred411_AS3

	partial void EnterRule_synpred413_AS3_fragment();
	partial void LeaveRule_synpred413_AS3_fragment();

	// $ANTLR start synpred413_AS3
	public void synpred413_AS3_fragment()
	{
		EnterRule_synpred413_AS3_fragment();
		EnterRule("synpred413_AS3_fragment", 518);
		TraceIn("synpred413_AS3_fragment", 518);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1132:16: ( '.' Identifier )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1132:16: '.' Identifier
			{
			DebugLocation(1132, 16);
			Match(input,53,Follow._53_in_synpred413_AS36405); if (state.failed) return;
			DebugLocation(1132, 20);
			Match(input,Identifier,Follow._Identifier_in_synpred413_AS36407); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred413_AS3_fragment", 518);
			LeaveRule("synpred413_AS3_fragment", 518);
			LeaveRule_synpred413_AS3_fragment();
		}
	}
	// $ANTLR end synpred413_AS3

	partial void EnterRule_synpred417_AS3_fragment();
	partial void LeaveRule_synpred417_AS3_fragment();

	// $ANTLR start synpred417_AS3
	public void synpred417_AS3_fragment()
	{
		EnterRule_synpred417_AS3_fragment();
		EnterRule("synpred417_AS3_fragment", 522);
		TraceIn("synpred417_AS3_fragment", 522);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:66: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:66: LineTerminator
			{
			DebugLocation(1140, 66);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred417_AS36452); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred417_AS3_fragment", 522);
			LeaveRule("synpred417_AS3_fragment", 522);
			LeaveRule_synpred417_AS3_fragment();
		}
	}
	// $ANTLR end synpred417_AS3

	partial void EnterRule_synpred418_AS3_fragment();
	partial void LeaveRule_synpred418_AS3_fragment();

	// $ANTLR start synpred418_AS3
	public void synpred418_AS3_fragment()
	{
		EnterRule_synpred418_AS3_fragment();
		EnterRule("synpred418_AS3_fragment", 523);
		TraceIn("synpred418_AS3_fragment", 523);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:66: ( ( LineTerminator )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:66: ( LineTerminator )*
			{
			DebugLocation(1140, 66);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:66: ( LineTerminator )*
			try { DebugEnterSubRule(469);
			while (true)
			{
				int alt469=2;
				try { DebugEnterDecision(469, false);
				int LA469_0 = input.LA(1);

				if ((LA469_0==LineTerminator))
				{
					alt469 = 1;
				}


				} finally { DebugExitDecision(469); }
				switch ( alt469 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1140:66: LineTerminator
					{
					DebugLocation(1140, 66);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred418_AS36452); if (state.failed) return;

					}
					break;

				default:
					goto loop469;
				}
			}

			loop469:
				;

			} finally { DebugExitSubRule(469); }


			}

		}
		finally
		{
			TraceOut("synpred418_AS3_fragment", 523);
			LeaveRule("synpred418_AS3_fragment", 523);
			LeaveRule_synpred418_AS3_fragment();
		}
	}
	// $ANTLR end synpred418_AS3

	partial void EnterRule_synpred420_AS3_fragment();
	partial void LeaveRule_synpred420_AS3_fragment();

	// $ANTLR start synpred420_AS3
	public void synpred420_AS3_fragment()
	{
		EnterRule_synpred420_AS3_fragment();
		EnterRule("synpred420_AS3_fragment", 525);
		TraceIn("synpred420_AS3_fragment", 525);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1144:35: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1144:35: LineTerminator
			{
			DebugLocation(1144, 35);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred420_AS36476); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred420_AS3_fragment", 525);
			LeaveRule("synpred420_AS3_fragment", 525);
			LeaveRule_synpred420_AS3_fragment();
		}
	}
	// $ANTLR end synpred420_AS3

	partial void EnterRule_synpred424_AS3_fragment();
	partial void LeaveRule_synpred424_AS3_fragment();

	// $ANTLR start synpred424_AS3
	public void synpred424_AS3_fragment()
	{
		EnterRule_synpred424_AS3_fragment();
		EnterRule("synpred424_AS3_fragment", 529);
		TraceIn("synpred424_AS3_fragment", 529);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:45: ( LineTerminator )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:45: LineTerminator
			{
			DebugLocation(1148, 45);
			Match(input,LineTerminator,Follow._LineTerminator_in_synpred424_AS36505); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred424_AS3_fragment", 529);
			LeaveRule("synpred424_AS3_fragment", 529);
			LeaveRule_synpred424_AS3_fragment();
		}
	}
	// $ANTLR end synpred424_AS3

	partial void EnterRule_synpred425_AS3_fragment();
	partial void LeaveRule_synpred425_AS3_fragment();

	// $ANTLR start synpred425_AS3
	public void synpred425_AS3_fragment()
	{
		EnterRule_synpred425_AS3_fragment();
		EnterRule("synpred425_AS3_fragment", 530);
		TraceIn("synpred425_AS3_fragment", 530);
		try
		{
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:45: ( ( LineTerminator )* )
			DebugEnterAlt(1);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:45: ( LineTerminator )*
			{
			DebugLocation(1148, 45);
			// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:45: ( LineTerminator )*
			try { DebugEnterSubRule(470);
			while (true)
			{
				int alt470=2;
				try { DebugEnterDecision(470, false);
				int LA470_0 = input.LA(1);

				if ((LA470_0==LineTerminator))
				{
					alt470 = 1;
				}


				} finally { DebugExitDecision(470); }
				switch ( alt470 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Library\\hg\\xas\\xas\\as3\\AS3.g:1148:45: LineTerminator
					{
					DebugLocation(1148, 45);
					Match(input,LineTerminator,Follow._LineTerminator_in_synpred425_AS36505); if (state.failed) return;

					}
					break;

				default:
					goto loop470;
				}
			}

			loop470:
				;

			} finally { DebugExitSubRule(470); }


			}

		}
		finally
		{
			TraceOut("synpred425_AS3_fragment", 530);
			LeaveRule("synpred425_AS3_fragment", 530);
			LeaveRule_synpred425_AS3_fragment();
		}
	}
	// $ANTLR end synpred425_AS3
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA3 dfa3;
	private DFA13 dfa13;
	private DFA12 dfa12;
	private DFA18 dfa18;
	private DFA27 dfa27;
	private DFA33 dfa33;
	private DFA44 dfa44;
	private DFA43 dfa43;
	private DFA51 dfa51;
	private DFA57 dfa57;
	private DFA63 dfa63;
	private DFA66 dfa66;
	private DFA69 dfa69;
	private DFA72 dfa72;
	private DFA75 dfa75;
	private DFA78 dfa78;
	private DFA81 dfa81;
	private DFA84 dfa84;
	private DFA87 dfa87;
	private DFA90 dfa90;
	private DFA93 dfa93;
	private DFA96 dfa96;
	private DFA99 dfa99;
	private DFA104 dfa104;
	private DFA109 dfa109;
	private DFA118 dfa118;
	private DFA121 dfa121;
	private DFA128 dfa128;
	private DFA134 dfa134;
	private DFA137 dfa137;
	private DFA169 dfa169;
	private DFA172 dfa172;
	private DFA175 dfa175;
	private DFA206 dfa206;
	private DFA210 dfa210;
	private DFA209 dfa209;
	private DFA256 dfa256;
	private DFA255 dfa255;
	private DFA264 dfa264;
	private DFA267 dfa267;
	private DFA276 dfa276;
	private DFA277 dfa277;
	private DFA310 dfa310;
	private DFA313 dfa313;
	private DFA331 dfa331;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
		dfa13 = new DFA13( this );
		dfa12 = new DFA12( this );
		dfa18 = new DFA18( this );
		dfa27 = new DFA27( this, SpecialStateTransition27 );
		dfa33 = new DFA33( this, SpecialStateTransition33 );
		dfa44 = new DFA44( this );
		dfa43 = new DFA43( this );
		dfa51 = new DFA51( this );
		dfa57 = new DFA57( this );
		dfa63 = new DFA63( this );
		dfa66 = new DFA66( this );
		dfa69 = new DFA69( this );
		dfa72 = new DFA72( this );
		dfa75 = new DFA75( this );
		dfa78 = new DFA78( this );
		dfa81 = new DFA81( this );
		dfa84 = new DFA84( this );
		dfa87 = new DFA87( this );
		dfa90 = new DFA90( this );
		dfa93 = new DFA93( this );
		dfa96 = new DFA96( this );
		dfa99 = new DFA99( this );
		dfa104 = new DFA104( this );
		dfa109 = new DFA109( this );
		dfa118 = new DFA118( this );
		dfa121 = new DFA121( this );
		dfa128 = new DFA128( this );
		dfa134 = new DFA134( this );
		dfa137 = new DFA137( this );
		dfa169 = new DFA169( this );
		dfa172 = new DFA172( this );
		dfa175 = new DFA175( this );
		dfa206 = new DFA206( this );
		dfa210 = new DFA210( this );
		dfa209 = new DFA209( this );
		dfa256 = new DFA256( this );
		dfa255 = new DFA255( this );
		dfa264 = new DFA264( this );
		dfa267 = new DFA267( this );
		dfa276 = new DFA276( this );
		dfa277 = new DFA277( this );
		dfa310 = new DFA310( this );
		dfa313 = new DFA313( this );
		dfa331 = new DFA331( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x7\xFFFF";
		private const string DFA3_eofS =
			"\x2\x2\x5\xFFFF";
		private const string DFA3_minS =
			"\x2\x13\x1\xFFFF\x1\x13\x2\xFFFF\x1\x13";
		private const string DFA3_maxS =
			"\x2\x67\x1\xFFFF\x1\x67\x2\xFFFF\x1\x67";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x3\x1\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA3_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x1\x40\xFFFF\x1\x4\x7\xFFFF\x1\x3\xA\xFFFF\x1\x5",
				"\x1\x1\x40\xFFFF\x1\x4\x12\xFFFF\x1\x5",
				"",
				"\x1\x6\x40\xFFFF\x1\x4\x12\xFFFF\x1\x5",
				"",
				"",
				"\x1\x6\x40\xFFFF\x1\x4\x12\xFFFF\x1\x5"
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "()* loopback of 32:55: ( normalClassDeclaration | normalInterfaceDeclaration )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x4\xFFFF";
		private const string DFA13_eofS =
			"\x4\xFFFF";
		private const string DFA13_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA13_maxS =
			"\x2\x4D\x2\xFFFF";
		private const string DFA13_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA13_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x1\x1\x1D\xFFFF\x1\x3\x1B\xFFFF\x1\x2",
				"\x1\x1\x1D\xFFFF\x1\x3\x1B\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "()* loopback of 698:46: ( ( LineTerminator )* ',' ( ( LineTerminator )* assignmentExpression )? )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA12 : DFA
	{
		private const string DFA12_eotS =
			"\x4\xFFFF";
		private const string DFA12_eofS =
			"\x4\xFFFF";
		private const string DFA12_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA12_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA12_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA12_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA12_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x18"+
				"\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x2\x7\xFFFF\x1\x2\x6\xFFFF\x1\x2\xB\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x18"+
				"\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x2\x7\xFFFF\x1\x2\x6\xFFFF\x1\x2\xB\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA12_eot = DFA.UnpackEncodedString(DFA12_eotS);
		private static readonly short[] DFA12_eof = DFA.UnpackEncodedString(DFA12_eofS);
		private static readonly char[] DFA12_min = DFA.UnpackEncodedStringToUnsignedChars(DFA12_minS);
		private static readonly char[] DFA12_max = DFA.UnpackEncodedStringToUnsignedChars(DFA12_maxS);
		private static readonly short[] DFA12_accept = DFA.UnpackEncodedString(DFA12_acceptS);
		private static readonly short[] DFA12_special = DFA.UnpackEncodedString(DFA12_specialS);
		private static readonly short[][] DFA12_transition;

		static DFA12()
		{
			int numStates = DFA12_transitionS.Length;
			DFA12_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA12_transition[i] = DFA.UnpackEncodedString(DFA12_transitionS[i]);
			}
		}

		public DFA12( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 12;
			this.eot = DFA12_eot;
			this.eof = DFA12_eof;
			this.min = DFA12_min;
			this.max = DFA12_max;
			this.accept = DFA12_accept;
			this.special = DFA12_special;
			this.transition = DFA12_transition;
		}

		public override string Description { get { return "698:67: ( ( LineTerminator )* assignmentExpression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA18 : DFA
	{
		private const string DFA18_eotS =
			"\x4\xFFFF";
		private const string DFA18_eofS =
			"\x4\xFFFF";
		private const string DFA18_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA18_maxS =
			"\x2\x83\x2\xFFFF";
		private const string DFA18_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA18_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA18_transitionS =
			{
				"\x1\x1\x1D\xFFFF\x1\x3\x51\xFFFF\x1\x2",
				"\x1\x1\x1D\xFFFF\x1\x3\x51\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA18_eot = DFA.UnpackEncodedString(DFA18_eotS);
		private static readonly short[] DFA18_eof = DFA.UnpackEncodedString(DFA18_eofS);
		private static readonly char[] DFA18_min = DFA.UnpackEncodedStringToUnsignedChars(DFA18_minS);
		private static readonly char[] DFA18_max = DFA.UnpackEncodedStringToUnsignedChars(DFA18_maxS);
		private static readonly short[] DFA18_accept = DFA.UnpackEncodedString(DFA18_acceptS);
		private static readonly short[] DFA18_special = DFA.UnpackEncodedString(DFA18_specialS);
		private static readonly short[][] DFA18_transition;

		static DFA18()
		{
			int numStates = DFA18_transitionS.Length;
			DFA18_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA18_transition[i] = DFA.UnpackEncodedString(DFA18_transitionS[i]);
			}
		}

		public DFA18( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 18;
			this.eot = DFA18_eot;
			this.eof = DFA18_eof;
			this.min = DFA18_min;
			this.max = DFA18_max;
			this.accept = DFA18_accept;
			this.special = DFA18_special;
			this.transition = DFA18_transition;
		}

		public override string Description { get { return "()* loopback of 702:46: ( ( LineTerminator )* ',' ( LineTerminator )* propertyNameAndValue )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA27 : DFA
	{
		private const string DFA27_eotS =
			"\x3C\xFFFF";
		private const string DFA27_eofS =
			"\x1\x2\x3B\xFFFF";
		private const string DFA27_minS =
			"\x1\x4\x1\x0\x1E\xFFFF\x1\x0\x1B\xFFFF";
		private const string DFA27_maxS =
			"\x1\x84\x1\x0\x1E\xFFFF\x1\x0\x1B\xFFFF";
		private const string DFA27_acceptS =
			"\x2\xFFFF\x1\x2\x38\xFFFF\x1\x1";
		private const string DFA27_specialS =
			"\x1\xFFFF\x1\x0\x1E\xFFFF\x1\x1\x1B\xFFFF}>";
		private static readonly string[] DFA27_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x13\x2\x1\x3B\x3\xFFFF\x3\x2\x1\xFFFF\xF\x2\x1\x20\x6\x2\x2\xFFFF"+
				"\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\x12\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA27_eot = DFA.UnpackEncodedString(DFA27_eotS);
		private static readonly short[] DFA27_eof = DFA.UnpackEncodedString(DFA27_eofS);
		private static readonly char[] DFA27_min = DFA.UnpackEncodedStringToUnsignedChars(DFA27_minS);
		private static readonly char[] DFA27_max = DFA.UnpackEncodedStringToUnsignedChars(DFA27_maxS);
		private static readonly short[] DFA27_accept = DFA.UnpackEncodedString(DFA27_acceptS);
		private static readonly short[] DFA27_special = DFA.UnpackEncodedString(DFA27_specialS);
		private static readonly short[][] DFA27_transition;

		static DFA27()
		{
			int numStates = DFA27_transitionS.Length;
			DFA27_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA27_transition[i] = DFA.UnpackEncodedString(DFA27_transitionS[i]);
			}
		}

		public DFA27( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 27;
			this.eot = DFA27_eot;
			this.eof = DFA27_eof;
			this.min = DFA27_min;
			this.max = DFA27_max;
			this.accept = DFA27_accept;
			this.special = DFA27_special;
			this.transition = DFA27_transition;
		}

		public override string Description { get { return "()* loopback of 716:115: ( ( LineTerminator )* memberExpressionSuffix )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition27(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA27_1 = input.LA(1);


				int index27_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred40_AS3_fragment))) {s = 59;}

				else if ((true)) {s = 2;}


				input.Seek(index27_1);
				if (s >= 0) return s;
				break;

			case 1:
				int LA27_32 = input.LA(1);


				int index27_32 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred40_AS3_fragment))) {s = 59;}

				else if ((true)) {s = 2;}


				input.Seek(index27_32);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 27, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA33 : DFA
	{
		private const string DFA33_eotS =
			"\x3C\xFFFF";
		private const string DFA33_eofS =
			"\x1\x1\x3B\xFFFF";
		private const string DFA33_minS =
			"\x1\x4\x2\xFFFF\x1\x0\x1B\xFFFF\x2\x0\x1B\xFFFF";
		private const string DFA33_maxS =
			"\x1\x84\x2\xFFFF\x1\x0\x1B\xFFFF\x2\x0\x1B\xFFFF";
		private const string DFA33_acceptS =
			"\x1\xFFFF\x1\x2\x39\xFFFF\x1\x1";
		private const string DFA33_specialS =
			"\x3\xFFFF\x1\x0\x1B\xFFFF\x1\x1\x1\x2\x1B\xFFFF}>";
		private static readonly string[] DFA33_transitionS =
			{
				"\x1\x1\xB\xFFFF\x1\x1\x2\xFFFF\x1\x3\x2\xFFFF\x2\x1\x3\xFFFF\x1\x1\x6"+
				"\xFFFF\x8\x1\x1\x20\xA\x1\x1\x3B\x3\xFFFF\x3\x1\x1\xFFFF\xF\x1\x1\x1F"+
				"\x6\x1\x2\xFFFF\x6\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1"+
				"\xFFFF\x4\x1\x1\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x4\x1\x1\xFFFF\x12"+
				"\x1",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA33_eot = DFA.UnpackEncodedString(DFA33_eotS);
		private static readonly short[] DFA33_eof = DFA.UnpackEncodedString(DFA33_eofS);
		private static readonly char[] DFA33_min = DFA.UnpackEncodedStringToUnsignedChars(DFA33_minS);
		private static readonly char[] DFA33_max = DFA.UnpackEncodedStringToUnsignedChars(DFA33_maxS);
		private static readonly short[] DFA33_accept = DFA.UnpackEncodedString(DFA33_acceptS);
		private static readonly short[] DFA33_special = DFA.UnpackEncodedString(DFA33_specialS);
		private static readonly short[][] DFA33_transition;

		static DFA33()
		{
			int numStates = DFA33_transitionS.Length;
			DFA33_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA33_transition[i] = DFA.UnpackEncodedString(DFA33_transitionS[i]);
			}
		}

		public DFA33( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 33;
			this.eot = DFA33_eot;
			this.eof = DFA33_eof;
			this.min = DFA33_min;
			this.max = DFA33_max;
			this.accept = DFA33_accept;
			this.special = DFA33_special;
			this.transition = DFA33_transition;
		}

		public override string Description { get { return "()* loopback of 730:50: ( ( LineTerminator )* callExpressionSuffix )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition33(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA33_3 = input.LA(1);


				int index33_3 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred46_AS3_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index33_3);
				if (s >= 0) return s;
				break;

			case 1:
				int LA33_31 = input.LA(1);


				int index33_31 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred46_AS3_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index33_31);
				if (s >= 0) return s;
				break;

			case 2:
				int LA33_32 = input.LA(1);


				int index33_32 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred46_AS3_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index33_32);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 33, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x4\xFFFF";
		private const string DFA44_eofS =
			"\x4\xFFFF";
		private const string DFA44_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA44_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA44_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\x3\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x7\xFFFF\x1\x2\x6\xFFFF\x1\x2\xB\xFFFF\x1"+
				"\x2\x8\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x4\xFFFF\x1\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\x3\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x7\xFFFF\x1\x2\x6\xFFFF\x1\x2\xB\xFFFF\x1"+
				"\x2\x8\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "748:8: ( ( LineTerminator )* assignmentExpression ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA43 : DFA
	{
		private const string DFA43_eotS =
			"\x4\xFFFF";
		private const string DFA43_eofS =
			"\x4\xFFFF";
		private const string DFA43_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA43_maxS =
			"\x2\x31\x2\xFFFF";
		private const string DFA43_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA43_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA43_transitionS =
			{
				"\x1\x1\x17\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x1\x17\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA43_eot = DFA.UnpackEncodedString(DFA43_eotS);
		private static readonly short[] DFA43_eof = DFA.UnpackEncodedString(DFA43_eofS);
		private static readonly char[] DFA43_min = DFA.UnpackEncodedStringToUnsignedChars(DFA43_minS);
		private static readonly char[] DFA43_max = DFA.UnpackEncodedStringToUnsignedChars(DFA43_maxS);
		private static readonly short[] DFA43_accept = DFA.UnpackEncodedString(DFA43_acceptS);
		private static readonly short[] DFA43_special = DFA.UnpackEncodedString(DFA43_specialS);
		private static readonly short[][] DFA43_transition;

		static DFA43()
		{
			int numStates = DFA43_transitionS.Length;
			DFA43_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA43_transition[i] = DFA.UnpackEncodedString(DFA43_transitionS[i]);
			}
		}

		public DFA43( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 43;
			this.eot = DFA43_eot;
			this.eof = DFA43_eof;
			this.min = DFA43_min;
			this.max = DFA43_max;
			this.accept = DFA43_accept;
			this.special = DFA43_special;
			this.transition = DFA43_transition;
		}

		public override string Description { get { return "()* loopback of 748:46: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA51 : DFA
	{
		private const string DFA51_eotS =
			"\x4\xFFFF";
		private const string DFA51_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA51_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA51_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA51_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA51_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA51_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x3\x2\x1\x3\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\x3\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2\x2"+
				"\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xE\x2\x1\xFFFF"+
				"\x3\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x3\x2\x1\x3\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\x3\x1\xFFFF\x2"+
				"\x2\x1\xFFFF\x3\x2\x5\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2\x2"+
				"\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xE\x2\x1\xFFFF"+
				"\x3\x2",
				"",
				""
			};

		private static readonly short[] DFA51_eot = DFA.UnpackEncodedString(DFA51_eotS);
		private static readonly short[] DFA51_eof = DFA.UnpackEncodedString(DFA51_eofS);
		private static readonly char[] DFA51_min = DFA.UnpackEncodedStringToUnsignedChars(DFA51_minS);
		private static readonly char[] DFA51_max = DFA.UnpackEncodedStringToUnsignedChars(DFA51_maxS);
		private static readonly short[] DFA51_accept = DFA.UnpackEncodedString(DFA51_acceptS);
		private static readonly short[] DFA51_special = DFA.UnpackEncodedString(DFA51_specialS);
		private static readonly short[][] DFA51_transition;

		static DFA51()
		{
			int numStates = DFA51_transitionS.Length;
			DFA51_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA51_transition[i] = DFA.UnpackEncodedString(DFA51_transitionS[i]);
			}
		}

		public DFA51( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 51;
			this.eot = DFA51_eot;
			this.eof = DFA51_eof;
			this.min = DFA51_min;
			this.max = DFA51_max;
			this.accept = DFA51_accept;
			this.special = DFA51_special;
			this.transition = DFA51_transition;
		}

		public override string Description { get { return "()* loopback of 768:20: ( ( LineTerminator )* ( '*' | '/' | '%' ) ( LineTerminator )* unaryExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA57 : DFA
	{
		private const string DFA57_eotS =
			"\x4\xFFFF";
		private const string DFA57_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA57_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA57_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA57_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA57_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA57_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x7\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2\x2\xFFFF\x6\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF\x2"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xE\x2\x1\xFFFF\x3\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x3\x2\x7\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x4"+
				"\x2\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2\x2\xFFFF\x6\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF"+
				"\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xE\x2\x1\xFFFF\x3\x2",
				"",
				""
			};

		private static readonly short[] DFA57_eot = DFA.UnpackEncodedString(DFA57_eotS);
		private static readonly short[] DFA57_eof = DFA.UnpackEncodedString(DFA57_eofS);
		private static readonly char[] DFA57_min = DFA.UnpackEncodedStringToUnsignedChars(DFA57_minS);
		private static readonly char[] DFA57_max = DFA.UnpackEncodedStringToUnsignedChars(DFA57_maxS);
		private static readonly short[] DFA57_accept = DFA.UnpackEncodedString(DFA57_acceptS);
		private static readonly short[] DFA57_special = DFA.UnpackEncodedString(DFA57_specialS);
		private static readonly short[][] DFA57_transition;

		static DFA57()
		{
			int numStates = DFA57_transitionS.Length;
			DFA57_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA57_transition[i] = DFA.UnpackEncodedString(DFA57_transitionS[i]);
			}
		}

		public DFA57( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 57;
			this.eot = DFA57_eot;
			this.eof = DFA57_eof;
			this.min = DFA57_min;
			this.max = DFA57_max;
			this.accept = DFA57_accept;
			this.special = DFA57_special;
			this.transition = DFA57_transition;
		}

		public override string Description { get { return "()* loopback of 776:23: ( ( LineTerminator )* ( '<<' | '>>' | '>>>' ) ( LineTerminator )* additiveExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA63 : DFA
	{
		private const string DFA63_eotS =
			"\x4\xFFFF";
		private const string DFA63_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA63_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA63_maxS =
			"\x2\x82\x2\xFFFF";
		private const string DFA63_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA63_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA63_transitionS =
			{
				"\x1\x1\xF\xFFFF\x2\x2\x2\xFFFF\x2\x2\x2\xFFFF\x1\x2\x5\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x2\x2\x3\x4\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x2\x15\xFFFF\x1\x2\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x16\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2",
				"\x1\x1\xF\xFFFF\x2\x2\x2\xFFFF\x2\x2\x2\xFFFF\x1\x2\x5\xFFFF\x1\x2"+
				"\xB\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x2\x2\x3\x4\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x15\xFFFF\x1\x2\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x16"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA63_eot = DFA.UnpackEncodedString(DFA63_eotS);
		private static readonly short[] DFA63_eof = DFA.UnpackEncodedString(DFA63_eofS);
		private static readonly char[] DFA63_min = DFA.UnpackEncodedStringToUnsignedChars(DFA63_minS);
		private static readonly char[] DFA63_max = DFA.UnpackEncodedStringToUnsignedChars(DFA63_maxS);
		private static readonly short[] DFA63_accept = DFA.UnpackEncodedString(DFA63_acceptS);
		private static readonly short[] DFA63_special = DFA.UnpackEncodedString(DFA63_specialS);
		private static readonly short[][] DFA63_transition;

		static DFA63()
		{
			int numStates = DFA63_transitionS.Length;
			DFA63_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA63_transition[i] = DFA.UnpackEncodedString(DFA63_transitionS[i]);
			}
		}

		public DFA63( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 63;
			this.eot = DFA63_eot;
			this.eof = DFA63_eof;
			this.min = DFA63_min;
			this.max = DFA63_max;
			this.accept = DFA63_accept;
			this.special = DFA63_special;
			this.transition = DFA63_transition;
		}

		public override string Description { get { return "()* loopback of 784:20: ( ( LineTerminator )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'is' ) ( LineTerminator )* shiftExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA66 : DFA
	{
		private const string DFA66_eotS =
			"\x4\xFFFF";
		private const string DFA66_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA66_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA66_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA66_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA66_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA66_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x2\x3\x2\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x3\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x5\xFFFF\x2\x3\x6\xFFFF\x4\x2\x1"+
				"\xFFFF\x3\x2\x2\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF"+
				"\xE\x2\x1\xFFFF\x3\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x2\x3\x2\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1"+
				"\xFFFF\x3\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x5\xFFFF\x2\x3\x6\xFFFF\x4"+
				"\x2\x1\xFFFF\x3\x2\x2\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1"+
				"\xFFFF\xE\x2\x1\xFFFF\x3\x2",
				"",
				""
			};

		private static readonly short[] DFA66_eot = DFA.UnpackEncodedString(DFA66_eotS);
		private static readonly short[] DFA66_eof = DFA.UnpackEncodedString(DFA66_eofS);
		private static readonly char[] DFA66_min = DFA.UnpackEncodedStringToUnsignedChars(DFA66_minS);
		private static readonly char[] DFA66_max = DFA.UnpackEncodedStringToUnsignedChars(DFA66_maxS);
		private static readonly short[] DFA66_accept = DFA.UnpackEncodedString(DFA66_acceptS);
		private static readonly short[] DFA66_special = DFA.UnpackEncodedString(DFA66_specialS);
		private static readonly short[][] DFA66_transition;

		static DFA66()
		{
			int numStates = DFA66_transitionS.Length;
			DFA66_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA66_transition[i] = DFA.UnpackEncodedString(DFA66_transitionS[i]);
			}
		}

		public DFA66( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 66;
			this.eot = DFA66_eot;
			this.eof = DFA66_eof;
			this.min = DFA66_min;
			this.max = DFA66_max;
			this.accept = DFA66_accept;
			this.special = DFA66_special;
			this.transition = DFA66_transition;
		}

		public override string Description { get { return "()* loopback of 788:25: ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA69 : DFA
	{
		private const string DFA69_eotS =
			"\x4\xFFFF";
		private const string DFA69_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA69_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA69_maxS =
			"\x2\x82\x2\xFFFF";
		private const string DFA69_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA69_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA69_transitionS =
			{
				"\x1\x1\xF\xFFFF\x2\x3\x2\xFFFF\x2\x2\x2\xFFFF\x1\x2\x5\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x5\xFFFF\x2\x3\x6\xFFFF\x1\x2\x2\xFFFF\x1\x2\x15\xFFFF"+
				"\x1\x2\x1B\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"\x1\x1\xF\xFFFF\x2\x3\x2\xFFFF\x2\x2\x2\xFFFF\x1\x2\x5\xFFFF\x1\x2"+
				"\xB\xFFFF\x1\x2\x5\xFFFF\x2\x3\x6\xFFFF\x1\x2\x2\xFFFF\x1\x2\x15\xFFFF"+
				"\x1\x2\x1B\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA69_eot = DFA.UnpackEncodedString(DFA69_eotS);
		private static readonly short[] DFA69_eof = DFA.UnpackEncodedString(DFA69_eofS);
		private static readonly char[] DFA69_min = DFA.UnpackEncodedStringToUnsignedChars(DFA69_minS);
		private static readonly char[] DFA69_max = DFA.UnpackEncodedStringToUnsignedChars(DFA69_maxS);
		private static readonly short[] DFA69_accept = DFA.UnpackEncodedString(DFA69_acceptS);
		private static readonly short[] DFA69_special = DFA.UnpackEncodedString(DFA69_specialS);
		private static readonly short[][] DFA69_transition;

		static DFA69()
		{
			int numStates = DFA69_transitionS.Length;
			DFA69_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA69_transition[i] = DFA.UnpackEncodedString(DFA69_transitionS[i]);
			}
		}

		public DFA69( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 69;
			this.eot = DFA69_eot;
			this.eof = DFA69_eof;
			this.min = DFA69_min;
			this.max = DFA69_max;
			this.accept = DFA69_accept;
			this.special = DFA69_special;
			this.transition = DFA69_transition;
		}

		public override string Description { get { return "()* loopback of 792:29: ( ( LineTerminator )* ( '==' | '!=' | '===' | '!==' ) ( LineTerminator )* relationalExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA72 : DFA
	{
		private const string DFA72_eotS =
			"\x4\xFFFF";
		private const string DFA72_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA72_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA72_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA72_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA72_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA72_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\x3\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x3\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x4\x2\x1\xFFFF\x3\x2\x2"+
				"\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3"+
				"\x2\x2\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xE\x2\x1\xFFFF"+
				"\x3\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\x3\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1"+
				"\xFFFF\x3\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x4\x2\x1\xFFFF\x3"+
				"\x2\x2\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x3\x2\x2\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xE\x2\x1"+
				"\xFFFF\x3\x2",
				"",
				""
			};

		private static readonly short[] DFA72_eot = DFA.UnpackEncodedString(DFA72_eotS);
		private static readonly short[] DFA72_eof = DFA.UnpackEncodedString(DFA72_eofS);
		private static readonly char[] DFA72_min = DFA.UnpackEncodedStringToUnsignedChars(DFA72_minS);
		private static readonly char[] DFA72_max = DFA.UnpackEncodedStringToUnsignedChars(DFA72_maxS);
		private static readonly short[] DFA72_accept = DFA.UnpackEncodedString(DFA72_acceptS);
		private static readonly short[] DFA72_special = DFA.UnpackEncodedString(DFA72_specialS);
		private static readonly short[][] DFA72_transition;

		static DFA72()
		{
			int numStates = DFA72_transitionS.Length;
			DFA72_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA72_transition[i] = DFA.UnpackEncodedString(DFA72_transitionS[i]);
			}
		}

		public DFA72( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 72;
			this.eot = DFA72_eot;
			this.eof = DFA72_eof;
			this.min = DFA72_min;
			this.max = DFA72_max;
			this.accept = DFA72_accept;
			this.special = DFA72_special;
			this.transition = DFA72_transition;
		}

		public override string Description { get { return "()* loopback of 796:23: ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA75 : DFA
	{
		private const string DFA75_eotS =
			"\x4\xFFFF";
		private const string DFA75_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA75_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA75_maxS =
			"\x2\x82\x2\xFFFF";
		private const string DFA75_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA75_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA75_transitionS =
			{
				"\x1\x1\x13\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x2\x5\xFFFF\x1\x2\xB\xFFFF"+
				"\x1\x2\xD\xFFFF\x1\x2\x2\xFFFF\x1\x2\x15\xFFFF\x1\x2\x1B\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2",
				"\x1\x1\x13\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x2\x5\xFFFF\x1\x2\xB\xFFFF"+
				"\x1\x2\xD\xFFFF\x1\x2\x2\xFFFF\x1\x2\x15\xFFFF\x1\x2\x1B\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA75_eot = DFA.UnpackEncodedString(DFA75_eotS);
		private static readonly short[] DFA75_eof = DFA.UnpackEncodedString(DFA75_eofS);
		private static readonly char[] DFA75_min = DFA.UnpackEncodedStringToUnsignedChars(DFA75_minS);
		private static readonly char[] DFA75_max = DFA.UnpackEncodedStringToUnsignedChars(DFA75_maxS);
		private static readonly short[] DFA75_accept = DFA.UnpackEncodedString(DFA75_acceptS);
		private static readonly short[] DFA75_special = DFA.UnpackEncodedString(DFA75_specialS);
		private static readonly short[][] DFA75_transition;

		static DFA75()
		{
			int numStates = DFA75_transitionS.Length;
			DFA75_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA75_transition[i] = DFA.UnpackEncodedString(DFA75_transitionS[i]);
			}
		}

		public DFA75( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 75;
			this.eot = DFA75_eot;
			this.eof = DFA75_eof;
			this.min = DFA75_min;
			this.max = DFA75_max;
			this.accept = DFA75_accept;
			this.special = DFA75_special;
			this.transition = DFA75_transition;
		}

		public override string Description { get { return "()* loopback of 800:27: ( ( LineTerminator )* '&' ( LineTerminator )* equalityExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA78 : DFA
	{
		private const string DFA78_eotS =
			"\x4\xFFFF";
		private const string DFA78_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA78_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA78_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA78_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA78_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA78_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x3\x2\x1\x3\x1\xFFFF\x3\x2"+
				"\x2\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x3\x2\x2\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xE\x2\x1"+
				"\xFFFF\x3\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x3\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x3\x2\x1\x3\x1\xFFFF\x3"+
				"\x2\x2\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x3\x2\x2\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xE\x2\x1"+
				"\xFFFF\x3\x2",
				"",
				""
			};

		private static readonly short[] DFA78_eot = DFA.UnpackEncodedString(DFA78_eotS);
		private static readonly short[] DFA78_eof = DFA.UnpackEncodedString(DFA78_eofS);
		private static readonly char[] DFA78_min = DFA.UnpackEncodedStringToUnsignedChars(DFA78_minS);
		private static readonly char[] DFA78_max = DFA.UnpackEncodedStringToUnsignedChars(DFA78_maxS);
		private static readonly short[] DFA78_accept = DFA.UnpackEncodedString(DFA78_acceptS);
		private static readonly short[] DFA78_special = DFA.UnpackEncodedString(DFA78_specialS);
		private static readonly short[][] DFA78_transition;

		static DFA78()
		{
			int numStates = DFA78_transitionS.Length;
			DFA78_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA78_transition[i] = DFA.UnpackEncodedString(DFA78_transitionS[i]);
			}
		}

		public DFA78( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 78;
			this.eot = DFA78_eot;
			this.eof = DFA78_eof;
			this.min = DFA78_min;
			this.max = DFA78_max;
			this.accept = DFA78_accept;
			this.special = DFA78_special;
			this.transition = DFA78_transition;
		}

		public override string Description { get { return "()* loopback of 804:25: ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA81 : DFA
	{
		private const string DFA81_eotS =
			"\x4\xFFFF";
		private const string DFA81_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA81_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA81_maxS =
			"\x2\x82\x2\xFFFF";
		private const string DFA81_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA81_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA81_transitionS =
			{
				"\x1\x1\x13\xFFFF\x1\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2"+
				"\xD\xFFFF\x1\x2\x2\xFFFF\x1\x3\x15\xFFFF\x1\x2\x1B\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2",
				"\x1\x1\x13\xFFFF\x1\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2"+
				"\xD\xFFFF\x1\x2\x2\xFFFF\x1\x3\x15\xFFFF\x1\x2\x1B\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA81_eot = DFA.UnpackEncodedString(DFA81_eotS);
		private static readonly short[] DFA81_eof = DFA.UnpackEncodedString(DFA81_eofS);
		private static readonly char[] DFA81_min = DFA.UnpackEncodedStringToUnsignedChars(DFA81_minS);
		private static readonly char[] DFA81_max = DFA.UnpackEncodedStringToUnsignedChars(DFA81_maxS);
		private static readonly short[] DFA81_accept = DFA.UnpackEncodedString(DFA81_acceptS);
		private static readonly short[] DFA81_special = DFA.UnpackEncodedString(DFA81_specialS);
		private static readonly short[][] DFA81_transition;

		static DFA81()
		{
			int numStates = DFA81_transitionS.Length;
			DFA81_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA81_transition[i] = DFA.UnpackEncodedString(DFA81_transitionS[i]);
			}
		}

		public DFA81( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 81;
			this.eot = DFA81_eot;
			this.eof = DFA81_eof;
			this.min = DFA81_min;
			this.max = DFA81_max;
			this.accept = DFA81_accept;
			this.special = DFA81_special;
			this.transition = DFA81_transition;
		}

		public override string Description { get { return "()* loopback of 808:29: ( ( LineTerminator )* '^' ( LineTerminator )* bitwiseANDExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA84 : DFA
	{
		private const string DFA84_eotS =
			"\x4\xFFFF";
		private const string DFA84_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA84_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA84_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA84_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA84_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA84_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x3\x2\x2\xFFFF\x3\x2\x2\xFFFF"+
				"\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x2"+
				"\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xD\x2\x1\x3\x1\xFFFF"+
				"\x3\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x3\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x3\x2\x2\xFFFF\x3\x2\x2"+
				"\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3"+
				"\x2\x2\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xD\x2\x1\x3"+
				"\x1\xFFFF\x3\x2",
				"",
				""
			};

		private static readonly short[] DFA84_eot = DFA.UnpackEncodedString(DFA84_eotS);
		private static readonly short[] DFA84_eof = DFA.UnpackEncodedString(DFA84_eofS);
		private static readonly char[] DFA84_min = DFA.UnpackEncodedStringToUnsignedChars(DFA84_minS);
		private static readonly char[] DFA84_max = DFA.UnpackEncodedStringToUnsignedChars(DFA84_maxS);
		private static readonly short[] DFA84_accept = DFA.UnpackEncodedString(DFA84_acceptS);
		private static readonly short[] DFA84_special = DFA.UnpackEncodedString(DFA84_specialS);
		private static readonly short[][] DFA84_transition;

		static DFA84()
		{
			int numStates = DFA84_transitionS.Length;
			DFA84_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA84_transition[i] = DFA.UnpackEncodedString(DFA84_transitionS[i]);
			}
		}

		public DFA84( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 84;
			this.eot = DFA84_eot;
			this.eof = DFA84_eof;
			this.min = DFA84_min;
			this.max = DFA84_max;
			this.accept = DFA84_accept;
			this.special = DFA84_special;
			this.transition = DFA84_transition;
		}

		public override string Description { get { return "()* loopback of 812:25: ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA87 : DFA
	{
		private const string DFA87_eotS =
			"\x4\xFFFF";
		private const string DFA87_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA87_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA87_maxS =
			"\x2\x82\x2\xFFFF";
		private const string DFA87_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA87_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA87_transitionS =
			{
				"\x1\x1\x13\xFFFF\x1\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2"+
				"\xD\xFFFF\x1\x2\x18\xFFFF\x1\x2\x1B\xFFFF\x1\x3\x1\xFFFF\x1\x2",
				"\x1\x1\x13\xFFFF\x1\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2"+
				"\xD\xFFFF\x1\x2\x18\xFFFF\x1\x2\x1B\xFFFF\x1\x3\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA87_eot = DFA.UnpackEncodedString(DFA87_eotS);
		private static readonly short[] DFA87_eof = DFA.UnpackEncodedString(DFA87_eofS);
		private static readonly char[] DFA87_min = DFA.UnpackEncodedStringToUnsignedChars(DFA87_minS);
		private static readonly char[] DFA87_max = DFA.UnpackEncodedStringToUnsignedChars(DFA87_maxS);
		private static readonly short[] DFA87_accept = DFA.UnpackEncodedString(DFA87_acceptS);
		private static readonly short[] DFA87_special = DFA.UnpackEncodedString(DFA87_specialS);
		private static readonly short[][] DFA87_transition;

		static DFA87()
		{
			int numStates = DFA87_transitionS.Length;
			DFA87_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA87_transition[i] = DFA.UnpackEncodedString(DFA87_transitionS[i]);
			}
		}

		public DFA87( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 87;
			this.eot = DFA87_eot;
			this.eof = DFA87_eof;
			this.min = DFA87_min;
			this.max = DFA87_max;
			this.accept = DFA87_accept;
			this.special = DFA87_special;
			this.transition = DFA87_transition;
		}

		public override string Description { get { return "()* loopback of 816:29: ( ( LineTerminator )* '|' ( LineTerminator )* bitwiseXORExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA90 : DFA
	{
		private const string DFA90_eotS =
			"\x4\xFFFF";
		private const string DFA90_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA90_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA90_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA90_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA90_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA90_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x3\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x3\x2\x2\xFFFF\x3\x2\x2\xFFFF"+
				"\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x2"+
				"\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xD\x2\x2\xFFFF\x3"+
				"\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x4\xFFFF\x1\x3\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x3\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x3\x2\x2\xFFFF\x3\x2\x2"+
				"\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3"+
				"\x2\x2\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xD\x2\x2\xFFFF"+
				"\x3\x2",
				"",
				""
			};

		private static readonly short[] DFA90_eot = DFA.UnpackEncodedString(DFA90_eotS);
		private static readonly short[] DFA90_eof = DFA.UnpackEncodedString(DFA90_eofS);
		private static readonly char[] DFA90_min = DFA.UnpackEncodedStringToUnsignedChars(DFA90_minS);
		private static readonly char[] DFA90_max = DFA.UnpackEncodedStringToUnsignedChars(DFA90_maxS);
		private static readonly short[] DFA90_accept = DFA.UnpackEncodedString(DFA90_acceptS);
		private static readonly short[] DFA90_special = DFA.UnpackEncodedString(DFA90_specialS);
		private static readonly short[][] DFA90_transition;

		static DFA90()
		{
			int numStates = DFA90_transitionS.Length;
			DFA90_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA90_transition[i] = DFA.UnpackEncodedString(DFA90_transitionS[i]);
			}
		}

		public DFA90( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 90;
			this.eot = DFA90_eot;
			this.eof = DFA90_eof;
			this.min = DFA90_min;
			this.max = DFA90_max;
			this.accept = DFA90_accept;
			this.special = DFA90_special;
			this.transition = DFA90_transition;
		}

		public override string Description { get { return "()* loopback of 820:24: ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA93 : DFA
	{
		private const string DFA93_eotS =
			"\x4\xFFFF";
		private const string DFA93_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA93_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA93_maxS =
			"\x2\x82\x2\xFFFF";
		private const string DFA93_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA93_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA93_transitionS =
			{
				"\x1\x1\x13\xFFFF\x1\x3\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2"+
				"\xD\xFFFF\x1\x2\x18\xFFFF\x1\x2\x1D\xFFFF\x1\x2",
				"\x1\x1\x13\xFFFF\x1\x3\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2"+
				"\xD\xFFFF\x1\x2\x18\xFFFF\x1\x2\x1D\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA93_eot = DFA.UnpackEncodedString(DFA93_eotS);
		private static readonly short[] DFA93_eof = DFA.UnpackEncodedString(DFA93_eofS);
		private static readonly char[] DFA93_min = DFA.UnpackEncodedStringToUnsignedChars(DFA93_minS);
		private static readonly char[] DFA93_max = DFA.UnpackEncodedStringToUnsignedChars(DFA93_maxS);
		private static readonly short[] DFA93_accept = DFA.UnpackEncodedString(DFA93_acceptS);
		private static readonly short[] DFA93_special = DFA.UnpackEncodedString(DFA93_specialS);
		private static readonly short[][] DFA93_transition;

		static DFA93()
		{
			int numStates = DFA93_transitionS.Length;
			DFA93_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA93_transition[i] = DFA.UnpackEncodedString(DFA93_transitionS[i]);
			}
		}

		public DFA93( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 93;
			this.eot = DFA93_eot;
			this.eof = DFA93_eof;
			this.min = DFA93_min;
			this.max = DFA93_max;
			this.accept = DFA93_accept;
			this.special = DFA93_special;
			this.transition = DFA93_transition;
		}

		public override string Description { get { return "()* loopback of 824:28: ( ( LineTerminator )* '&&' ( LineTerminator )* bitwiseORExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA96 : DFA
	{
		private const string DFA96_eotS =
			"\x4\xFFFF";
		private const string DFA96_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA96_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA96_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA96_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA96_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA96_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x7\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\xD\xFFFF\x3\x2\x2\xFFFF\x3\x2\x2\xFFFF\x6\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2\x2"+
				"\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xD\x2\x2\xFFFF\x1\x3\x2\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x7\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x3\x2\x2\xFFFF\x3\x2\x2\xFFFF\x6\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1"+
				"\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xD\x2\x2\xFFFF\x1\x3\x2\x2",
				"",
				""
			};

		private static readonly short[] DFA96_eot = DFA.UnpackEncodedString(DFA96_eotS);
		private static readonly short[] DFA96_eof = DFA.UnpackEncodedString(DFA96_eofS);
		private static readonly char[] DFA96_min = DFA.UnpackEncodedStringToUnsignedChars(DFA96_minS);
		private static readonly char[] DFA96_max = DFA.UnpackEncodedStringToUnsignedChars(DFA96_maxS);
		private static readonly short[] DFA96_accept = DFA.UnpackEncodedString(DFA96_acceptS);
		private static readonly short[] DFA96_special = DFA.UnpackEncodedString(DFA96_specialS);
		private static readonly short[][] DFA96_transition;

		static DFA96()
		{
			int numStates = DFA96_transitionS.Length;
			DFA96_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA96_transition[i] = DFA.UnpackEncodedString(DFA96_transitionS[i]);
			}
		}

		public DFA96( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 96;
			this.eot = DFA96_eot;
			this.eof = DFA96_eof;
			this.min = DFA96_min;
			this.max = DFA96_max;
			this.accept = DFA96_accept;
			this.special = DFA96_special;
			this.transition = DFA96_transition;
		}

		public override string Description { get { return "()* loopback of 828:25: ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA99 : DFA
	{
		private const string DFA99_eotS =
			"\x4\xFFFF";
		private const string DFA99_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA99_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA99_maxS =
			"\x2\x82\x2\xFFFF";
		private const string DFA99_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA99_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA99_transitionS =
			{
				"\x1\x1\x17\xFFFF\x1\x2\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\xD\xFFFF\x1\x2"+
				"\x18\xFFFF\x1\x2\x1D\xFFFF\x1\x3",
				"\x1\x1\x17\xFFFF\x1\x2\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\xD\xFFFF\x1\x2"+
				"\x18\xFFFF\x1\x2\x1D\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA99_eot = DFA.UnpackEncodedString(DFA99_eotS);
		private static readonly short[] DFA99_eof = DFA.UnpackEncodedString(DFA99_eofS);
		private static readonly char[] DFA99_min = DFA.UnpackEncodedStringToUnsignedChars(DFA99_minS);
		private static readonly char[] DFA99_max = DFA.UnpackEncodedStringToUnsignedChars(DFA99_maxS);
		private static readonly short[] DFA99_accept = DFA.UnpackEncodedString(DFA99_acceptS);
		private static readonly short[] DFA99_special = DFA.UnpackEncodedString(DFA99_specialS);
		private static readonly short[][] DFA99_transition;

		static DFA99()
		{
			int numStates = DFA99_transitionS.Length;
			DFA99_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA99_transition[i] = DFA.UnpackEncodedString(DFA99_transitionS[i]);
			}
		}

		public DFA99( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 99;
			this.eot = DFA99_eot;
			this.eof = DFA99_eof;
			this.min = DFA99_min;
			this.max = DFA99_max;
			this.accept = DFA99_accept;
			this.special = DFA99_special;
			this.transition = DFA99_transition;
		}

		public override string Description { get { return "()* loopback of 832:29: ( ( LineTerminator )* '||' ( LineTerminator )* logicalANDExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA104 : DFA
	{
		private const string DFA104_eotS =
			"\x4\xFFFF";
		private const string DFA104_eofS =
			"\x2\x3\x2\xFFFF";
		private const string DFA104_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA104_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA104_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA104_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA104_transitionS =
			{
				"\x1\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x1\x2\xFFFF\x2\x3\x3\xFFFF\x1\x3\x6"+
				"\xFFFF\x1\x3\x7\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x3\x3\x7\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\xD\xFFFF\x1\x2\x2\x3\x2\xFFFF\x3\x3\x2\xFFFF\x6\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF"+
				"\x1\x3\x2\xFFFF\x2\x3\x1\xFFFF\x4\x3\x1\xFFFF\xD\x3\x3\xFFFF\x2\x3",
				"\x1\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x1\x2\xFFFF\x2\x3\x3\xFFFF\x1\x3"+
				"\x6\xFFFF\x1\x3\x7\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x3\x3\x7\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\xD\xFFFF\x1\x2\x2\x3\x2\xFFFF\x3\x3\x2\xFFFF\x6"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF"+
				"\x1\x3\x2\xFFFF\x2\x3\x1\xFFFF\x4\x3\x1\xFFFF\xD\x3\x3\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA104_eot = DFA.UnpackEncodedString(DFA104_eotS);
		private static readonly short[] DFA104_eof = DFA.UnpackEncodedString(DFA104_eofS);
		private static readonly char[] DFA104_min = DFA.UnpackEncodedStringToUnsignedChars(DFA104_minS);
		private static readonly char[] DFA104_max = DFA.UnpackEncodedStringToUnsignedChars(DFA104_maxS);
		private static readonly short[] DFA104_accept = DFA.UnpackEncodedString(DFA104_acceptS);
		private static readonly short[] DFA104_special = DFA.UnpackEncodedString(DFA104_specialS);
		private static readonly short[][] DFA104_transition;

		static DFA104()
		{
			int numStates = DFA104_transitionS.Length;
			DFA104_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA104_transition[i] = DFA.UnpackEncodedString(DFA104_transitionS[i]);
			}
		}

		public DFA104( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 104;
			this.eot = DFA104_eot;
			this.eof = DFA104_eof;
			this.min = DFA104_min;
			this.max = DFA104_max;
			this.accept = DFA104_accept;
			this.special = DFA104_special;
			this.transition = DFA104_transition;
		}

		public override string Description { get { return "836:24: ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA109 : DFA
	{
		private const string DFA109_eotS =
			"\x4\xFFFF";
		private const string DFA109_eofS =
			"\x1\x3\x3\xFFFF";
		private const string DFA109_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA109_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA109_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA109_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA109_transitionS =
			{
				"\x1\x1\x17\xFFFF\x1\x3\x5\xFFFF\x1\x3\xB\xFFFF\x1\x3\xD\xFFFF\x1\x2"+
				"\x18\xFFFF\x1\x3",
				"\x1\x1\x17\xFFFF\x1\x3\x5\xFFFF\x1\x3\xB\xFFFF\x1\x3\xD\xFFFF\x1\x2"+
				"\x18\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA109_eot = DFA.UnpackEncodedString(DFA109_eotS);
		private static readonly short[] DFA109_eof = DFA.UnpackEncodedString(DFA109_eofS);
		private static readonly char[] DFA109_min = DFA.UnpackEncodedStringToUnsignedChars(DFA109_minS);
		private static readonly char[] DFA109_max = DFA.UnpackEncodedStringToUnsignedChars(DFA109_maxS);
		private static readonly short[] DFA109_accept = DFA.UnpackEncodedString(DFA109_acceptS);
		private static readonly short[] DFA109_special = DFA.UnpackEncodedString(DFA109_specialS);
		private static readonly short[][] DFA109_transition;

		static DFA109()
		{
			int numStates = DFA109_transitionS.Length;
			DFA109_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA109_transition[i] = DFA.UnpackEncodedString(DFA109_transitionS[i]);
			}
		}

		public DFA109( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 109;
			this.eot = DFA109_eot;
			this.eof = DFA109_eof;
			this.min = DFA109_min;
			this.max = DFA109_max;
			this.accept = DFA109_accept;
			this.special = DFA109_special;
			this.transition = DFA109_transition;
		}

		public override string Description { get { return "840:28: ( ( LineTerminator )* '?' ( LineTerminator )* assignmentExpression ( LineTerminator )* ':' ( LineTerminator )* assignmentExpression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA118 : DFA
	{
		private const string DFA118_eotS =
			"\x4\xFFFF";
		private const string DFA118_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA118_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA118_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA118_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA118_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA118_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x7\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x7\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\xE\xFFFF\x2\x2\x2\xFFFF\x3\x2\x2\xFFFF\x6\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xD\x2\x3\xFFFF"+
				"\x2\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x7\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x7"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\xE\xFFFF\x2\x2\x2\xFFFF\x3\x2\x2\xFFFF\x6"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xD\x2\x3"+
				"\xFFFF\x2\x2",
				"",
				""
			};

		private static readonly short[] DFA118_eot = DFA.UnpackEncodedString(DFA118_eotS);
		private static readonly short[] DFA118_eof = DFA.UnpackEncodedString(DFA118_eofS);
		private static readonly char[] DFA118_min = DFA.UnpackEncodedStringToUnsignedChars(DFA118_minS);
		private static readonly char[] DFA118_max = DFA.UnpackEncodedStringToUnsignedChars(DFA118_maxS);
		private static readonly short[] DFA118_accept = DFA.UnpackEncodedString(DFA118_acceptS);
		private static readonly short[] DFA118_special = DFA.UnpackEncodedString(DFA118_specialS);
		private static readonly short[][] DFA118_transition;

		static DFA118()
		{
			int numStates = DFA118_transitionS.Length;
			DFA118_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA118_transition[i] = DFA.UnpackEncodedString(DFA118_transitionS[i]);
			}
		}

		public DFA118( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 118;
			this.eot = DFA118_eot;
			this.eof = DFA118_eof;
			this.min = DFA118_min;
			this.max = DFA118_max;
			this.accept = DFA118_accept;
			this.special = DFA118_special;
			this.transition = DFA118_transition;
		}

		public override string Description { get { return "()* loopback of 858:25: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA121 : DFA
	{
		private const string DFA121_eotS =
			"\x4\xFFFF";
		private const string DFA121_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA121_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA121_maxS =
			"\x2\x3D\x2\xFFFF";
		private const string DFA121_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA121_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA121_transitionS =
			{
				"\x1\x1\x1D\xFFFF\x1\x3\xB\xFFFF\x1\x2",
				"\x1\x1\x1D\xFFFF\x1\x3\xB\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA121_eot = DFA.UnpackEncodedString(DFA121_eotS);
		private static readonly short[] DFA121_eof = DFA.UnpackEncodedString(DFA121_eofS);
		private static readonly char[] DFA121_min = DFA.UnpackEncodedStringToUnsignedChars(DFA121_minS);
		private static readonly char[] DFA121_max = DFA.UnpackEncodedStringToUnsignedChars(DFA121_maxS);
		private static readonly short[] DFA121_accept = DFA.UnpackEncodedString(DFA121_acceptS);
		private static readonly short[] DFA121_special = DFA.UnpackEncodedString(DFA121_specialS);
		private static readonly short[][] DFA121_transition;

		static DFA121()
		{
			int numStates = DFA121_transitionS.Length;
			DFA121_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA121_transition[i] = DFA.UnpackEncodedString(DFA121_transitionS[i]);
			}
		}

		public DFA121( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 121;
			this.eot = DFA121_eot;
			this.eof = DFA121_eof;
			this.min = DFA121_min;
			this.max = DFA121_max;
			this.accept = DFA121_accept;
			this.special = DFA121_special;
			this.transition = DFA121_transition;
		}

		public override string Description { get { return "()* loopback of 862:29: ( ( LineTerminator )* ',' ( LineTerminator )* assignmentExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA128 : DFA
	{
		private const string DFA128_eotS =
			"\x4\xFFFF";
		private const string DFA128_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA128_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA128_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA128_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA128_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA128_transitionS =
			{
				"\x1\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x1\x2\xFFFF\x2\x3\x3\xFFFF\x1\x3\x6"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x9\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x3\x3\xFFFF\x2\x3\x1\x2\x2\xFFFF\x2\x3\x1\x2\x2\x3\x4"+
				"\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1"+
				"\x3\x5\xFFFF\x1\x3\x2\xFFFF\xC\x3\x3\xFFFF\x1\x2\x1\x3",
				"\x1\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x1\x2\xFFFF\x2\x3\x3\xFFFF\x1\x3"+
				"\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x9\xFFFF"+
				"\x1\x3\xE\xFFFF\x1\x3\x3\xFFFF\x2\x3\x1\x2\x2\xFFFF\x2\x3\x1\x2\x2\x3"+
				"\x4\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF"+
				"\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF\xC\x3\x3\xFFFF\x1\x2\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA128_eot = DFA.UnpackEncodedString(DFA128_eotS);
		private static readonly short[] DFA128_eof = DFA.UnpackEncodedString(DFA128_eofS);
		private static readonly char[] DFA128_min = DFA.UnpackEncodedStringToUnsignedChars(DFA128_minS);
		private static readonly char[] DFA128_max = DFA.UnpackEncodedStringToUnsignedChars(DFA128_maxS);
		private static readonly short[] DFA128_accept = DFA.UnpackEncodedString(DFA128_acceptS);
		private static readonly short[] DFA128_special = DFA.UnpackEncodedString(DFA128_specialS);
		private static readonly short[][] DFA128_transition;

		static DFA128()
		{
			int numStates = DFA128_transitionS.Length;
			DFA128_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA128_transition[i] = DFA.UnpackEncodedString(DFA128_transitionS[i]);
			}
		}

		public DFA128( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 128;
			this.eot = DFA128_eot;
			this.eof = DFA128_eof;
			this.min = DFA128_min;
			this.max = DFA128_max;
			this.accept = DFA128_accept;
			this.special = DFA128_special;
			this.transition = DFA128_transition;
		}

		public override string Description { get { return "()* loopback of 895:4: ( ( LineTerminator )* statement ( LineTerminator )* )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA134 : DFA
	{
		private const string DFA134_eotS =
			"\x4\xFFFF";
		private const string DFA134_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA134_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA134_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA134_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA134_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA134_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x9\xFFFF"+
				"\x1\x2\xE\xFFFF\x1\x2\x3\xFFFF\x3\x2\x2\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xD\x2\x3\xFFFF\x2\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x9"+
				"\xFFFF\x1\x2\xE\xFFFF\x1\x2\x3\xFFFF\x3\x2\x2\xFFFF\x6\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\xD\x2\x3\xFFFF\x2\x2",
				"",
				""
			};

		private static readonly short[] DFA134_eot = DFA.UnpackEncodedString(DFA134_eotS);
		private static readonly short[] DFA134_eof = DFA.UnpackEncodedString(DFA134_eofS);
		private static readonly char[] DFA134_min = DFA.UnpackEncodedStringToUnsignedChars(DFA134_minS);
		private static readonly char[] DFA134_max = DFA.UnpackEncodedStringToUnsignedChars(DFA134_maxS);
		private static readonly short[] DFA134_accept = DFA.UnpackEncodedString(DFA134_acceptS);
		private static readonly short[] DFA134_special = DFA.UnpackEncodedString(DFA134_specialS);
		private static readonly short[][] DFA134_transition;

		static DFA134()
		{
			int numStates = DFA134_transitionS.Length;
			DFA134_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA134_transition[i] = DFA.UnpackEncodedString(DFA134_transitionS[i]);
			}
		}

		public DFA134( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 134;
			this.eot = DFA134_eot;
			this.eof = DFA134_eof;
			this.min = DFA134_min;
			this.max = DFA134_max;
			this.accept = DFA134_accept;
			this.special = DFA134_special;
			this.transition = DFA134_transition;
		}

		public override string Description { get { return "()* loopback of 903:24: ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclaration )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA137 : DFA
	{
		private const string DFA137_eotS =
			"\x4\xFFFF";
		private const string DFA137_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA137_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA137_maxS =
			"\x2\x3D\x2\xFFFF";
		private const string DFA137_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA137_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA137_transitionS =
			{
				"\x1\x1\x1D\xFFFF\x1\x3\xB\xFFFF\x1\x2",
				"\x1\x1\x1D\xFFFF\x1\x3\xB\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA137_eot = DFA.UnpackEncodedString(DFA137_eotS);
		private static readonly short[] DFA137_eof = DFA.UnpackEncodedString(DFA137_eofS);
		private static readonly char[] DFA137_min = DFA.UnpackEncodedStringToUnsignedChars(DFA137_minS);
		private static readonly char[] DFA137_max = DFA.UnpackEncodedStringToUnsignedChars(DFA137_maxS);
		private static readonly short[] DFA137_accept = DFA.UnpackEncodedString(DFA137_acceptS);
		private static readonly short[] DFA137_special = DFA.UnpackEncodedString(DFA137_specialS);
		private static readonly short[][] DFA137_transition;

		static DFA137()
		{
			int numStates = DFA137_transitionS.Length;
			DFA137_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA137_transition[i] = DFA.UnpackEncodedString(DFA137_transitionS[i]);
			}
		}

		public DFA137( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 137;
			this.eot = DFA137_eot;
			this.eof = DFA137_eof;
			this.min = DFA137_min;
			this.max = DFA137_max;
			this.accept = DFA137_accept;
			this.special = DFA137_special;
			this.transition = DFA137_transition;
		}

		public override string Description { get { return "()* loopback of 907:28: ( ( LineTerminator )* ',' ( LineTerminator )* variableDeclarationNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA169 : DFA
	{
		private const string DFA169_eotS =
			"\x4\xFFFF";
		private const string DFA169_eofS =
			"\x4\xFFFF";
		private const string DFA169_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA169_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA169_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA169_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA169_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x2\x3\xFFFF\x1\x2\x7\xFFFF\x1\x2\x6\xFFFF\x1\x2\xB\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF"+
				"\x1\x3\xE\xFFFF\x1\x2\x3\xFFFF\x1\x2\x7\xFFFF\x1\x2\x6\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x8\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA169_eot = DFA.UnpackEncodedString(DFA169_eotS);
		private static readonly short[] DFA169_eof = DFA.UnpackEncodedString(DFA169_eofS);
		private static readonly char[] DFA169_min = DFA.UnpackEncodedStringToUnsignedChars(DFA169_minS);
		private static readonly char[] DFA169_max = DFA.UnpackEncodedStringToUnsignedChars(DFA169_maxS);
		private static readonly short[] DFA169_accept = DFA.UnpackEncodedString(DFA169_acceptS);
		private static readonly short[] DFA169_special = DFA.UnpackEncodedString(DFA169_specialS);
		private static readonly short[][] DFA169_transition;

		static DFA169()
		{
			int numStates = DFA169_transitionS.Length;
			DFA169_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA169_transition[i] = DFA.UnpackEncodedString(DFA169_transitionS[i]);
			}
		}

		public DFA169( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 169;
			this.eot = DFA169_eot;
			this.eof = DFA169_eof;
			this.min = DFA169_min;
			this.max = DFA169_max;
			this.accept = DFA169_accept;
			this.special = DFA169_special;
			this.transition = DFA169_transition;
		}

		public override string Description { get { return "954:30: ( ( LineTerminator )* forStatementInitialiserPart )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA172 : DFA
	{
		private const string DFA172_eotS =
			"\x4\xFFFF";
		private const string DFA172_eofS =
			"\x4\xFFFF";
		private const string DFA172_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA172_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA172_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA172_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA172_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x2\x3\xFFFF\x1\x2\x7\xFFFF\x1\x2\x6\xFFFF\x1\x2\xB\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF"+
				"\x1\x3\xE\xFFFF\x1\x2\x3\xFFFF\x1\x2\x7\xFFFF\x1\x2\x6\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x8\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA172_eot = DFA.UnpackEncodedString(DFA172_eotS);
		private static readonly short[] DFA172_eof = DFA.UnpackEncodedString(DFA172_eofS);
		private static readonly char[] DFA172_min = DFA.UnpackEncodedStringToUnsignedChars(DFA172_minS);
		private static readonly char[] DFA172_max = DFA.UnpackEncodedStringToUnsignedChars(DFA172_maxS);
		private static readonly short[] DFA172_accept = DFA.UnpackEncodedString(DFA172_acceptS);
		private static readonly short[] DFA172_special = DFA.UnpackEncodedString(DFA172_specialS);
		private static readonly short[][] DFA172_transition;

		static DFA172()
		{
			int numStates = DFA172_transitionS.Length;
			DFA172_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA172_transition[i] = DFA.UnpackEncodedString(DFA172_transitionS[i]);
			}
		}

		public DFA172( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 172;
			this.eot = DFA172_eot;
			this.eof = DFA172_eof;
			this.min = DFA172_min;
			this.max = DFA172_max;
			this.accept = DFA172_accept;
			this.special = DFA172_special;
			this.transition = DFA172_transition;
		}

		public override string Description { get { return "954:97: ( ( LineTerminator )* expression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA175 : DFA
	{
		private const string DFA175_eotS =
			"\x4\xFFFF";
		private const string DFA175_eofS =
			"\x4\xFFFF";
		private const string DFA175_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA175_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA175_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA175_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA175_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\x3\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x7\xFFFF\x1\x2\x6\xFFFF\x1\x2\xB\xFFFF\x1"+
				"\x2\x8\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x4\xFFFF\x1\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\x3\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x7\xFFFF\x1\x2\x6\xFFFF\x1\x2\xB\xFFFF\x1"+
				"\x2\x8\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA175_eot = DFA.UnpackEncodedString(DFA175_eotS);
		private static readonly short[] DFA175_eof = DFA.UnpackEncodedString(DFA175_eofS);
		private static readonly char[] DFA175_min = DFA.UnpackEncodedStringToUnsignedChars(DFA175_minS);
		private static readonly char[] DFA175_max = DFA.UnpackEncodedStringToUnsignedChars(DFA175_maxS);
		private static readonly short[] DFA175_accept = DFA.UnpackEncodedString(DFA175_acceptS);
		private static readonly short[] DFA175_special = DFA.UnpackEncodedString(DFA175_specialS);
		private static readonly short[][] DFA175_transition;

		static DFA175()
		{
			int numStates = DFA175_transitionS.Length;
			DFA175_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA175_transition[i] = DFA.UnpackEncodedString(DFA175_transitionS[i]);
			}
		}

		public DFA175( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 175;
			this.eot = DFA175_eot;
			this.eof = DFA175_eof;
			this.min = DFA175_min;
			this.max = DFA175_max;
			this.accept = DFA175_accept;
			this.special = DFA175_special;
			this.transition = DFA175_transition;
		}

		public override string Description { get { return "954:147: ( ( LineTerminator )* expression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA206 : DFA
	{
		private const string DFA206_eotS =
			"\x4\xFFFF";
		private const string DFA206_eofS =
			"\x4\xFFFF";
		private const string DFA206_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA206_maxS =
			"\x2\x83\x2\xFFFF";
		private const string DFA206_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA206_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA206_transitionS =
			{
				"\x1\x1\x3E\xFFFF\x1\x3\x4\xFFFF\x1\x2\x2B\xFFFF\x1\x2",
				"\x1\x1\x3E\xFFFF\x1\x3\x4\xFFFF\x1\x2\x2B\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA206_eot = DFA.UnpackEncodedString(DFA206_eotS);
		private static readonly short[] DFA206_eof = DFA.UnpackEncodedString(DFA206_eofS);
		private static readonly char[] DFA206_min = DFA.UnpackEncodedStringToUnsignedChars(DFA206_minS);
		private static readonly char[] DFA206_max = DFA.UnpackEncodedStringToUnsignedChars(DFA206_maxS);
		private static readonly short[] DFA206_accept = DFA.UnpackEncodedString(DFA206_acceptS);
		private static readonly short[] DFA206_special = DFA.UnpackEncodedString(DFA206_specialS);
		private static readonly short[][] DFA206_transition;

		static DFA206()
		{
			int numStates = DFA206_transitionS.Length;
			DFA206_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA206_transition[i] = DFA.UnpackEncodedString(DFA206_transitionS[i]);
			}
		}

		public DFA206( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 206;
			this.eot = DFA206_eot;
			this.eof = DFA206_eof;
			this.min = DFA206_min;
			this.max = DFA206_max;
			this.accept = DFA206_accept;
			this.special = DFA206_special;
			this.transition = DFA206_transition;
		}

		public override string Description { get { return "()* loopback of 992:8: ( ( LineTerminator )* caseClause )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA210 : DFA
	{
		private const string DFA210_eotS =
			"\x4\xFFFF";
		private const string DFA210_eofS =
			"\x4\xFFFF";
		private const string DFA210_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA210_maxS =
			"\x2\x83\x2\xFFFF";
		private const string DFA210_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA210_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA210_transitionS =
			{
				"\x1\x1\x43\xFFFF\x1\x2\x2B\xFFFF\x1\x3",
				"\x1\x1\x43\xFFFF\x1\x2\x2B\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA210_eot = DFA.UnpackEncodedString(DFA210_eotS);
		private static readonly short[] DFA210_eof = DFA.UnpackEncodedString(DFA210_eofS);
		private static readonly char[] DFA210_min = DFA.UnpackEncodedStringToUnsignedChars(DFA210_minS);
		private static readonly char[] DFA210_max = DFA.UnpackEncodedStringToUnsignedChars(DFA210_maxS);
		private static readonly short[] DFA210_accept = DFA.UnpackEncodedString(DFA210_acceptS);
		private static readonly short[] DFA210_special = DFA.UnpackEncodedString(DFA210_specialS);
		private static readonly short[][] DFA210_transition;

		static DFA210()
		{
			int numStates = DFA210_transitionS.Length;
			DFA210_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA210_transition[i] = DFA.UnpackEncodedString(DFA210_transitionS[i]);
			}
		}

		public DFA210( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 210;
			this.eot = DFA210_eot;
			this.eof = DFA210_eof;
			this.min = DFA210_min;
			this.max = DFA210_max;
			this.accept = DFA210_accept;
			this.special = DFA210_special;
			this.transition = DFA210_transition;
		}

		public override string Description { get { return "992:38: ( ( LineTerminator )* defaultClause ( ( LineTerminator )* caseClause )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA209 : DFA
	{
		private const string DFA209_eotS =
			"\x4\xFFFF";
		private const string DFA209_eofS =
			"\x4\xFFFF";
		private const string DFA209_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA209_maxS =
			"\x2\x83\x2\xFFFF";
		private const string DFA209_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA209_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA209_transitionS =
			{
				"\x1\x1\x3E\xFFFF\x1\x3\x30\xFFFF\x1\x2",
				"\x1\x1\x3E\xFFFF\x1\x3\x30\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA209_eot = DFA.UnpackEncodedString(DFA209_eotS);
		private static readonly short[] DFA209_eof = DFA.UnpackEncodedString(DFA209_eofS);
		private static readonly char[] DFA209_min = DFA.UnpackEncodedStringToUnsignedChars(DFA209_minS);
		private static readonly char[] DFA209_max = DFA.UnpackEncodedStringToUnsignedChars(DFA209_maxS);
		private static readonly short[] DFA209_accept = DFA.UnpackEncodedString(DFA209_acceptS);
		private static readonly short[] DFA209_special = DFA.UnpackEncodedString(DFA209_specialS);
		private static readonly short[][] DFA209_transition;

		static DFA209()
		{
			int numStates = DFA209_transitionS.Length;
			DFA209_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA209_transition[i] = DFA.UnpackEncodedString(DFA209_transitionS[i]);
			}
		}

		public DFA209( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 209;
			this.eot = DFA209_eot;
			this.eof = DFA209_eof;
			this.min = DFA209_min;
			this.max = DFA209_max;
			this.accept = DFA209_accept;
			this.special = DFA209_special;
			this.transition = DFA209_transition;
		}

		public override string Description { get { return "()* loopback of 992:69: ( ( LineTerminator )* caseClause )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA256 : DFA
	{
		private const string DFA256_eotS =
			"\x4\xFFFF";
		private const string DFA256_eofS =
			"\x4\xFFFF";
		private const string DFA256_minS =
			"\x2\x10\x2\xFFFF";
		private const string DFA256_maxS =
			"\x2\x37\x2\xFFFF";
		private const string DFA256_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA256_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA256_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x1\x17\xFFFF\x1\x3\xB\xFFFF\x1\x2",
				"\x1\x2\x2\xFFFF\x1\x1\x17\xFFFF\x1\x3\xB\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA256_eot = DFA.UnpackEncodedString(DFA256_eotS);
		private static readonly short[] DFA256_eof = DFA.UnpackEncodedString(DFA256_eofS);
		private static readonly char[] DFA256_min = DFA.UnpackEncodedStringToUnsignedChars(DFA256_minS);
		private static readonly char[] DFA256_max = DFA.UnpackEncodedStringToUnsignedChars(DFA256_maxS);
		private static readonly short[] DFA256_accept = DFA.UnpackEncodedString(DFA256_acceptS);
		private static readonly short[] DFA256_special = DFA.UnpackEncodedString(DFA256_specialS);
		private static readonly short[][] DFA256_transition;

		static DFA256()
		{
			int numStates = DFA256_transitionS.Length;
			DFA256_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA256_transition[i] = DFA.UnpackEncodedString(DFA256_transitionS[i]);
			}
		}

		public DFA256( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 256;
			this.eot = DFA256_eot;
			this.eof = DFA256_eof;
			this.min = DFA256_min;
			this.max = DFA256_max;
			this.accept = DFA256_accept;
			this.special = DFA256_special;
			this.transition = DFA256_transition;
		}

		public override string Description { get { return "1036:8: ( ( LineTerminator )* formalParameter ( ( LineTerminator )* ',' ( LineTerminator )* formalParameter )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA255 : DFA
	{
		private const string DFA255_eotS =
			"\x4\xFFFF";
		private const string DFA255_eofS =
			"\x4\xFFFF";
		private const string DFA255_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA255_maxS =
			"\x2\x31\x2\xFFFF";
		private const string DFA255_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA255_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA255_transitionS =
			{
				"\x1\x1\x17\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x1\x17\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA255_eot = DFA.UnpackEncodedString(DFA255_eotS);
		private static readonly short[] DFA255_eof = DFA.UnpackEncodedString(DFA255_eofS);
		private static readonly char[] DFA255_min = DFA.UnpackEncodedStringToUnsignedChars(DFA255_minS);
		private static readonly char[] DFA255_max = DFA.UnpackEncodedStringToUnsignedChars(DFA255_maxS);
		private static readonly short[] DFA255_accept = DFA.UnpackEncodedString(DFA255_acceptS);
		private static readonly short[] DFA255_special = DFA.UnpackEncodedString(DFA255_specialS);
		private static readonly short[][] DFA255_transition;

		static DFA255()
		{
			int numStates = DFA255_transitionS.Length;
			DFA255_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA255_transition[i] = DFA.UnpackEncodedString(DFA255_transitionS[i]);
			}
		}

		public DFA255( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 255;
			this.eot = DFA255_eot;
			this.eof = DFA255_eof;
			this.min = DFA255_min;
			this.max = DFA255_max;
			this.accept = DFA255_accept;
			this.special = DFA255_special;
			this.transition = DFA255_transition;
		}

		public override string Description { get { return "()* loopback of 1036:41: ( ( LineTerminator )* ',' ( LineTerminator )* formalParameter )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA264 : DFA
	{
		private const string DFA264_eotS =
			"\x6\xFFFF";
		private const string DFA264_eofS =
			"\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x2\xFFFF";
		private const string DFA264_minS =
			"\x1\x10\x1\x13\x1\xFFFF\x1\x13\x2\xFFFF";
		private const string DFA264_maxS =
			"\x1\x37\x1\x42\x1\xFFFF\x1\x42\x2\xFFFF";
		private const string DFA264_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\x3";
		private const string DFA264_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA264_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x2",
				"\x1\x3\x17\xFFFF\x1\x4\x5\xFFFF\x1\x4\x5\xFFFF\x1\x5\x3\xFFFF\x1\x4"+
				"\x6\xFFFF\x1\x4",
				"",
				"\x1\x3\x17\xFFFF\x1\x4\x5\xFFFF\x1\x4\x5\xFFFF\x1\x5\x3\xFFFF\x1\x4"+
				"\x6\xFFFF\x1\x4",
				"",
				""
			};

		private static readonly short[] DFA264_eot = DFA.UnpackEncodedString(DFA264_eotS);
		private static readonly short[] DFA264_eof = DFA.UnpackEncodedString(DFA264_eofS);
		private static readonly char[] DFA264_min = DFA.UnpackEncodedStringToUnsignedChars(DFA264_minS);
		private static readonly char[] DFA264_max = DFA.UnpackEncodedStringToUnsignedChars(DFA264_maxS);
		private static readonly short[] DFA264_accept = DFA.UnpackEncodedString(DFA264_acceptS);
		private static readonly short[] DFA264_special = DFA.UnpackEncodedString(DFA264_specialS);
		private static readonly short[][] DFA264_transition;

		static DFA264()
		{
			int numStates = DFA264_transitionS.Length;
			DFA264_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA264_transition[i] = DFA.UnpackEncodedString(DFA264_transitionS[i]);
			}
		}

		public DFA264( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 264;
			this.eot = DFA264_eot;
			this.eof = DFA264_eof;
			this.min = DFA264_min;
			this.max = DFA264_max;
			this.accept = DFA264_accept;
			this.special = DFA264_special;
			this.transition = DFA264_transition;
		}

		public override string Description { get { return "1039:1: formalParameter : ( Identifier ( LineTerminator )* ( typeInformation )? ( LineTerminator )* ( defaultArgumentValue )? | '...' ( LineTerminator )* Identifier | Identifier ( LineTerminator )* '...' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA267 : DFA
	{
		private const string DFA267_eotS =
			"\x4\xFFFF";
		private const string DFA267_eofS =
			"\x4\xFFFF";
		private const string DFA267_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA267_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA267_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA267_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA267_transitionS =
			{
				"\x1\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x1\x2\xFFFF\x2\x3\x3\xFFFF\x1\x3\x6"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x9\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x3\x3\xFFFF\x2\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2\x3\x4\xFFFF"+
				"\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x3\x2\xFFFF\xC\x3\x3\xFFFF\x1\x2\x1\x3",
				"\x1\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x1\x2\xFFFF\x2\x3\x3\xFFFF\x1\x3"+
				"\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x9\xFFFF"+
				"\x1\x3\xE\xFFFF\x1\x3\x3\xFFFF\x2\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2\x3\x4"+
				"\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1"+
				"\x3\x5\xFFFF\x1\x3\x2\xFFFF\xC\x3\x3\xFFFF\x1\x2\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA267_eot = DFA.UnpackEncodedString(DFA267_eotS);
		private static readonly short[] DFA267_eof = DFA.UnpackEncodedString(DFA267_eofS);
		private static readonly char[] DFA267_min = DFA.UnpackEncodedStringToUnsignedChars(DFA267_minS);
		private static readonly char[] DFA267_max = DFA.UnpackEncodedStringToUnsignedChars(DFA267_maxS);
		private static readonly short[] DFA267_accept = DFA.UnpackEncodedString(DFA267_acceptS);
		private static readonly short[] DFA267_special = DFA.UnpackEncodedString(DFA267_specialS);
		private static readonly short[][] DFA267_transition;

		static DFA267()
		{
			int numStates = DFA267_transitionS.Length;
			DFA267_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA267_transition[i] = DFA.UnpackEncodedString(DFA267_transitionS[i]);
			}
		}

		public DFA267( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 267;
			this.eot = DFA267_eot;
			this.eof = DFA267_eof;
			this.min = DFA267_min;
			this.max = DFA267_max;
			this.accept = DFA267_accept;
			this.special = DFA267_special;
			this.transition = DFA267_transition;
		}

		public override string Description { get { return "()* loopback of 1046:4: ( ( LineTerminator )* sourceElement ( LineTerminator )* )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA276 : DFA
	{
		private const string DFA276_eotS =
			"\x4\xFFFF";
		private const string DFA276_eofS =
			"\x4\xFFFF";
		private const string DFA276_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA276_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA276_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA276_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA276_transitionS =
			{
				"\x1\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x1\x2\xFFFF\x2\x3\x3\xFFFF\x1\x3\x6"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x9\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x3\x3\xFFFF\x2\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2\x3\x2\xFFFF"+
				"\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x2\x3\x2\xFFFF\xC\x3\x3\xFFFF\x1"+
				"\x2\x1\x3",
				"\x1\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x1\x2\xFFFF\x2\x3\x3\xFFFF\x1\x3"+
				"\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x9\xFFFF"+
				"\x1\x3\xE\xFFFF\x1\x3\x3\xFFFF\x2\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x2\x3\x2\xFFFF\xC\x3\x3\xFFFF"+
				"\x1\x2\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA276_eot = DFA.UnpackEncodedString(DFA276_eotS);
		private static readonly short[] DFA276_eof = DFA.UnpackEncodedString(DFA276_eofS);
		private static readonly char[] DFA276_min = DFA.UnpackEncodedStringToUnsignedChars(DFA276_minS);
		private static readonly char[] DFA276_max = DFA.UnpackEncodedStringToUnsignedChars(DFA276_maxS);
		private static readonly short[] DFA276_accept = DFA.UnpackEncodedString(DFA276_acceptS);
		private static readonly short[] DFA276_special = DFA.UnpackEncodedString(DFA276_specialS);
		private static readonly short[][] DFA276_transition;

		static DFA276()
		{
			int numStates = DFA276_transitionS.Length;
			DFA276_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA276_transition[i] = DFA.UnpackEncodedString(DFA276_transitionS[i]);
			}
		}

		public DFA276( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 276;
			this.eot = DFA276_eot;
			this.eof = DFA276_eof;
			this.min = DFA276_min;
			this.max = DFA276_max;
			this.accept = DFA276_accept;
			this.special = DFA276_special;
			this.transition = DFA276_transition;
		}

		public override string Description { get { return "()* loopback of 1064:4: ( ( LineTerminator )* packageElement ( LineTerminator )* )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA277 : DFA
	{
		private const string DFA277_eotS =
			"\xA\xFFFF";
		private const string DFA277_eofS =
			"\xA\xFFFF";
		private const string DFA277_minS =
			"\x1\x4\x3\x13\x1\xFFFF\x2\x13\x2\xFFFF\x1\x13";
		private const string DFA277_maxS =
			"\x1\x84\x2\x70\x1\x67\x1\xFFFF\x2\x67\x2\xFFFF\x1\x67";
		private const string DFA277_acceptS =
			"\x4\xFFFF\x1\x3\x2\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA277_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA277_transitionS =
			{
				"\x1\x4\xB\xFFFF\x1\x4\x2\xFFFF\x1\x2\x2\xFFFF\x2\x4\x3\xFFFF\x1\x4\x6"+
				"\xFFFF\x1\x4\x7\xFFFF\x1\x4\x3\xFFFF\x2\x4\x2\xFFFF\x2\x4\x9\xFFFF\x1"+
				"\x4\xE\xFFFF\x1\x4\x3\xFFFF\x2\x4\x3\xFFFF\x2\x4\x1\xFFFF\x2\x4\x2\xFFFF"+
				"\x1\x1\x1\xFFFF\x2\x4\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x4\x4\xFFFF\x1\x3\x1\x4\x2\xFFFF\xC\x4\x4\xFFFF"+
				"\x1\x4",
				"\x1\x2\x54\xFFFF\x1\x3\x7\xFFFF\x1\x3",
				"\x1\x2\x54\xFFFF\x1\x3\x7\xFFFF\x1\x3",
				"\x1\x5\x40\xFFFF\x1\x7\x7\xFFFF\x1\x6\xA\xFFFF\x1\x8",
				"",
				"\x1\x5\x40\xFFFF\x1\x7\x7\xFFFF\x1\x6\xA\xFFFF\x1\x8",
				"\x1\x9\x40\xFFFF\x1\x7\x12\xFFFF\x1\x8",
				"",
				"",
				"\x1\x9\x40\xFFFF\x1\x7\x12\xFFFF\x1\x8"
			};

		private static readonly short[] DFA277_eot = DFA.UnpackEncodedString(DFA277_eotS);
		private static readonly short[] DFA277_eof = DFA.UnpackEncodedString(DFA277_eofS);
		private static readonly char[] DFA277_min = DFA.UnpackEncodedStringToUnsignedChars(DFA277_minS);
		private static readonly char[] DFA277_max = DFA.UnpackEncodedStringToUnsignedChars(DFA277_maxS);
		private static readonly short[] DFA277_accept = DFA.UnpackEncodedString(DFA277_acceptS);
		private static readonly short[] DFA277_special = DFA.UnpackEncodedString(DFA277_specialS);
		private static readonly short[][] DFA277_transition;

		static DFA277()
		{
			int numStates = DFA277_transitionS.Length;
			DFA277_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA277_transition[i] = DFA.UnpackEncodedString(DFA277_transitionS[i]);
			}
		}

		public DFA277( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 277;
			this.eot = DFA277_eot;
			this.eof = DFA277_eof;
			this.min = DFA277_min;
			this.max = DFA277_max;
			this.accept = DFA277_accept;
			this.special = DFA277_special;
			this.transition = DFA277_transition;
		}

		public override string Description { get { return "1067:1: packageElement : ( classDeclaration | interfaceDeclaration | statement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA310 : DFA
	{
		private const string DFA310_eotS =
			"\x4\xFFFF";
		private const string DFA310_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA310_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA310_maxS =
			"\x2\x7F\x2\xFFFF";
		private const string DFA310_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA310_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA310_transitionS =
			{
				"\x1\x1\x1D\xFFFF\x1\x3\x4D\xFFFF\x1\x2",
				"\x1\x1\x1D\xFFFF\x1\x3\x4D\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA310_eot = DFA.UnpackEncodedString(DFA310_eotS);
		private static readonly short[] DFA310_eof = DFA.UnpackEncodedString(DFA310_eofS);
		private static readonly char[] DFA310_min = DFA.UnpackEncodedStringToUnsignedChars(DFA310_minS);
		private static readonly char[] DFA310_max = DFA.UnpackEncodedStringToUnsignedChars(DFA310_maxS);
		private static readonly short[] DFA310_accept = DFA.UnpackEncodedString(DFA310_acceptS);
		private static readonly short[] DFA310_special = DFA.UnpackEncodedString(DFA310_specialS);
		private static readonly short[][] DFA310_transition;

		static DFA310()
		{
			int numStates = DFA310_transitionS.Length;
			DFA310_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA310_transition[i] = DFA.UnpackEncodedString(DFA310_transitionS[i]);
			}
		}

		public DFA310( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 310;
			this.eot = DFA310_eot;
			this.eof = DFA310_eof;
			this.min = DFA310_min;
			this.max = DFA310_max;
			this.accept = DFA310_accept;
			this.special = DFA310_special;
			this.transition = DFA310_transition;
		}

		public override string Description { get { return "()* loopback of 1106:47: ( ( LineTerminator )* ',' ( LineTerminator )* qualifiedName )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA313 : DFA
	{
		private const string DFA313_eotS =
			"\x4\xFFFF";
		private const string DFA313_eofS =
			"\x4\xFFFF";
		private const string DFA313_minS =
			"\x2\x4\x2\xFFFF";
		private const string DFA313_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA313_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA313_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA313_transitionS =
			{
				"\x1\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x1\x2\xFFFF\x2\x3\x3\xFFFF\x1\x3\x6"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x9\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x3\x3\xFFFF\x2\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2\x3\x4\xFFFF"+
				"\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2"+
				"\xFFFF\x2\x3\x1\xFFFF\x4\x3\x1\xFFFF\xD\x3\x3\xFFFF\x1\x2\x1\x3",
				"\x1\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x1\x2\xFFFF\x2\x3\x3\xFFFF\x1\x3"+
				"\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x9\xFFFF"+
				"\x1\x3\xE\xFFFF\x1\x3\x3\xFFFF\x2\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2\x3\x4"+
				"\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x2\xFFFF\x2\x3\x1\xFFFF\x4\x3\x1\xFFFF\xD\x3\x3\xFFFF\x1\x2\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA313_eot = DFA.UnpackEncodedString(DFA313_eotS);
		private static readonly short[] DFA313_eof = DFA.UnpackEncodedString(DFA313_eofS);
		private static readonly char[] DFA313_min = DFA.UnpackEncodedStringToUnsignedChars(DFA313_minS);
		private static readonly char[] DFA313_max = DFA.UnpackEncodedStringToUnsignedChars(DFA313_maxS);
		private static readonly short[] DFA313_accept = DFA.UnpackEncodedString(DFA313_acceptS);
		private static readonly short[] DFA313_special = DFA.UnpackEncodedString(DFA313_specialS);
		private static readonly short[][] DFA313_transition;

		static DFA313()
		{
			int numStates = DFA313_transitionS.Length;
			DFA313_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA313_transition[i] = DFA.UnpackEncodedString(DFA313_transitionS[i]);
			}
		}

		public DFA313( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 313;
			this.eot = DFA313_eot;
			this.eof = DFA313_eof;
			this.min = DFA313_min;
			this.max = DFA313_max;
			this.accept = DFA313_accept;
			this.special = DFA313_special;
			this.transition = DFA313_transition;
		}

		public override string Description { get { return "()* loopback of 1110:4: ( ( LineTerminator )* classElement ( LineTerminator )* )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA331 : DFA
	{
		private const string DFA331_eotS =
			"\x4\xFFFF";
		private const string DFA331_eofS =
			"\x4\xFFFF";
		private const string DFA331_minS =
			"\x2\x13\x2\xFFFF";
		private const string DFA331_maxS =
			"\x2\x83\x2\xFFFF";
		private const string DFA331_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA331_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA331_transitionS =
			{
				"\x1\x1\x4B\xFFFF\x1\x3\x23\xFFFF\x1\x2",
				"\x1\x1\x4B\xFFFF\x1\x3\x23\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA331_eot = DFA.UnpackEncodedString(DFA331_eotS);
		private static readonly short[] DFA331_eof = DFA.UnpackEncodedString(DFA331_eofS);
		private static readonly char[] DFA331_min = DFA.UnpackEncodedStringToUnsignedChars(DFA331_minS);
		private static readonly char[] DFA331_max = DFA.UnpackEncodedStringToUnsignedChars(DFA331_maxS);
		private static readonly short[] DFA331_accept = DFA.UnpackEncodedString(DFA331_acceptS);
		private static readonly short[] DFA331_special = DFA.UnpackEncodedString(DFA331_specialS);
		private static readonly short[][] DFA331_transition;

		static DFA331()
		{
			int numStates = DFA331_transitionS.Length;
			DFA331_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA331_transition[i] = DFA.UnpackEncodedString(DFA331_transitionS[i]);
			}
		}

		public DFA331( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 331;
			this.eot = DFA331_eot;
			this.eof = DFA331_eof;
			this.min = DFA331_min;
			this.max = DFA331_max;
			this.accept = DFA331_accept;
			this.special = DFA331_special;
			this.transition = DFA331_transition;
		}

		public override string Description { get { return "()* loopback of 1124:4: ( ( LineTerminator )* interfaceElement ( LineTerminator )* )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _LineTerminator_in_compilationUnit36 = new BitSet(new ulong[]{0x80000UL,0x200000000000UL});
		public static readonly BitSet _packageDeclaration_in_compilationUnit39 = new BitSet(new ulong[]{0x80000UL,0x8010100000UL});
		public static readonly BitSet _LineTerminator_in_compilationUnit41 = new BitSet(new ulong[]{0x80000UL,0x8010100000UL});
		public static readonly BitSet _normalClassDeclaration_in_compilationUnit45 = new BitSet(new ulong[]{0x80000UL,0x8010100000UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_compilationUnit47 = new BitSet(new ulong[]{0x80000UL,0x8010100000UL});
		public static readonly BitSet _LineTerminator_in_compilationUnit51 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _EOF_in_compilationUnit54 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_primaryExpression3512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_primaryExpression3517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_primaryExpression3522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_primaryExpression3527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression3532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayLiteral_in_primaryExpression3537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectLiteral_in_primaryExpression3542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_primaryExpression3547 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_primaryExpression3550 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_primaryExpression3553 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _LineTerminator_in_primaryExpression3555 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _43_in_primaryExpression3558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_arrayLiteral3570 = new BitSet(new ulong[]{0xEC40408C90010UL,0x9250080081013000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_arrayLiteral3572 = new BitSet(new ulong[]{0xEC40408C90010UL,0x9250080081013000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_arrayLiteral3575 = new BitSet(new ulong[]{0x2000000080000UL,0x2000UL});
		public static readonly BitSet _LineTerminator_in_arrayLiteral3579 = new BitSet(new ulong[]{0x2000000080000UL});
		public static readonly BitSet _49_in_arrayLiteral3582 = new BitSet(new ulong[]{0xEC40408C90010UL,0x9250080081013000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_arrayLiteral3585 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_arrayLiteral3588 = new BitSet(new ulong[]{0x2000000080000UL,0x2000UL});
		public static readonly BitSet _LineTerminator_in_arrayLiteral3594 = new BitSet(new ulong[]{0x80000UL,0x2000UL});
		public static readonly BitSet _77_in_arrayLiteral3597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_objectLiteral3609 = new BitSet(new ulong[]{0x8890000UL,0x0UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_objectLiteral3611 = new BitSet(new ulong[]{0x8890000UL,0x0UL,0x8UL});
		public static readonly BitSet _propertyNameAndValue_in_objectLiteral3615 = new BitSet(new ulong[]{0x2000000080000UL,0x0UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_objectLiteral3618 = new BitSet(new ulong[]{0x2000000080000UL});
		public static readonly BitSet _49_in_objectLiteral3621 = new BitSet(new ulong[]{0x8890000UL});
		public static readonly BitSet _LineTerminator_in_objectLiteral3623 = new BitSet(new ulong[]{0x8890000UL});
		public static readonly BitSet _propertyNameAndValue_in_objectLiteral3626 = new BitSet(new ulong[]{0x2000000080000UL,0x0UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_objectLiteral3630 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_objectLiteral3635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyName_in_propertyNameAndValue3646 = new BitSet(new ulong[]{0x800000000080000UL});
		public static readonly BitSet _LineTerminator_in_propertyNameAndValue3648 = new BitSet(new ulong[]{0x800000000080000UL});
		public static readonly BitSet _59_in_propertyNameAndValue3651 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_propertyNameAndValue3653 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_propertyNameAndValue3656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_memberExpression3690 = new BitSet(new ulong[]{0x20000000080002UL,0x1000UL});
		public static readonly BitSet _functionExpression_in_memberExpression3694 = new BitSet(new ulong[]{0x20000000080002UL,0x1000UL});
		public static readonly BitSet _107_in_memberExpression3698 = new BitSet(new ulong[]{0x40008C90010UL,0x8050080080001000UL});
		public static readonly BitSet _LineTerminator_in_memberExpression3700 = new BitSet(new ulong[]{0x40008C90010UL,0x8050080080001000UL});
		public static readonly BitSet _memberExpression_in_memberExpression3703 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _LineTerminator_in_memberExpression3705 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _argumentList_in_memberExpression3708 = new BitSet(new ulong[]{0x20000000080002UL,0x1000UL});
		public static readonly BitSet _LineTerminator_in_memberExpression3712 = new BitSet(new ulong[]{0x20000000080000UL,0x1000UL});
		public static readonly BitSet _memberExpressionSuffix_in_memberExpression3715 = new BitSet(new ulong[]{0x20000000080002UL,0x1000UL});
		public static readonly BitSet _indexSuffix_in_memberExpressionSuffix3729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyReferenceSuffix_in_memberExpressionSuffix3734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpression_in_newExpression3746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_newExpression3751 = new BitSet(new ulong[]{0x40008C90010UL,0x8050080080001000UL});
		public static readonly BitSet _LineTerminator_in_newExpression3753 = new BitSet(new ulong[]{0x40008C90010UL,0x8050080080001000UL});
		public static readonly BitSet _newExpression_in_newExpression3756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpression_in_callExpression3768 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _LineTerminator_in_callExpression3770 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _argumentList_in_callExpression3773 = new BitSet(new ulong[]{0x20040000080002UL,0x1000UL});
		public static readonly BitSet _LineTerminator_in_callExpression3776 = new BitSet(new ulong[]{0x20040000080000UL,0x1000UL});
		public static readonly BitSet _callExpressionSuffix_in_callExpression3779 = new BitSet(new ulong[]{0x20040000080002UL,0x1000UL});
		public static readonly BitSet _argumentList_in_callExpressionSuffix3793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexSuffix_in_callExpressionSuffix3798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyReferenceSuffix_in_callExpressionSuffix3803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_indexSuffix3814 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_indexSuffix3816 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_indexSuffix3819 = new BitSet(new ulong[]{0x80000UL,0x2000UL});
		public static readonly BitSet _LineTerminator_in_indexSuffix3821 = new BitSet(new ulong[]{0x80000UL,0x2000UL});
		public static readonly BitSet _77_in_indexSuffix3824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_propertyReferenceSuffix3837 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_propertyReferenceSuffix3839 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _Identifier_in_propertyReferenceSuffix3843 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_propertyReferenceSuffix3845 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_propertyReferenceSuffix3847 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _Identifier_in_propertyReferenceSuffix3852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_argumentList3864 = new BitSet(new ulong[]{0xCCC0408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_argumentList3867 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_argumentList3870 = new BitSet(new ulong[]{0x2080000080000UL});
		public static readonly BitSet _LineTerminator_in_argumentList3873 = new BitSet(new ulong[]{0x2000000080000UL});
		public static readonly BitSet _49_in_argumentList3876 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_argumentList3878 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_argumentList3881 = new BitSet(new ulong[]{0x2080000080000UL});
		public static readonly BitSet _LineTerminator_in_argumentList3887 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _43_in_argumentList3890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callExpression_in_leftHandSideExpression3902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_leftHandSideExpression3907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_postfixExpression3918 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_postfixExpression3920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_postfixExpression3925 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_postfixExpression3927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_postfixExpression3932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfixExpression_in_unaryExpression3943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_unaryExpression3948 = new BitSet(new ulong[]{0xCC40408C10010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression3988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression3999 = new BitSet(new ulong[]{0x200102000080002UL});
		public static readonly BitSet _LineTerminator_in_multiplicativeExpression4002 = new BitSet(new ulong[]{0x200102000080000UL});
		public static readonly BitSet _set_in_multiplicativeExpression4005 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_multiplicativeExpression4017 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression4020 = new BitSet(new ulong[]{0x200102000080002UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression4033 = new BitSet(new ulong[]{0x4400000080002UL});
		public static readonly BitSet _LineTerminator_in_additiveExpression4036 = new BitSet(new ulong[]{0x4400000080000UL});
		public static readonly BitSet _set_in_additiveExpression4039 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_additiveExpression4047 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression4050 = new BitSet(new ulong[]{0x4400000080002UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression4063 = new BitSet(new ulong[]{0x8000000000080002UL,0x280UL});
		public static readonly BitSet _LineTerminator_in_shiftExpression4066 = new BitSet(new ulong[]{0x8000000000080000UL,0x280UL});
		public static readonly BitSet _set_in_shiftExpression4069 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_shiftExpression4081 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression4084 = new BitSet(new ulong[]{0x8000000000080002UL,0x280UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression4097 = new BitSet(new ulong[]{0x4000000000080002UL,0x25000000062UL});
		public static readonly BitSet _LineTerminator_in_relationalExpression4100 = new BitSet(new ulong[]{0x4000000000080000UL,0x25000000062UL});
		public static readonly BitSet _set_in_relationalExpression4103 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_relationalExpression4131 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression4134 = new BitSet(new ulong[]{0x4000000000080002UL,0x25000000062UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn4148 = new BitSet(new ulong[]{0x4000000000080002UL,0x24000000062UL});
		public static readonly BitSet _LineTerminator_in_relationalExpressionNoIn4151 = new BitSet(new ulong[]{0x4000000000080000UL,0x24000000062UL});
		public static readonly BitSet _set_in_relationalExpressionNoIn4154 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_relationalExpressionNoIn4178 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn4181 = new BitSet(new ulong[]{0x4000000000080002UL,0x24000000062UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression4195 = new BitSet(new ulong[]{0x1800080002UL,0x18UL});
		public static readonly BitSet _LineTerminator_in_equalityExpression4198 = new BitSet(new ulong[]{0x1800080000UL,0x18UL});
		public static readonly BitSet _set_in_equalityExpression4201 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_equalityExpression4217 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression4220 = new BitSet(new ulong[]{0x1800080002UL,0x18UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn4233 = new BitSet(new ulong[]{0x1800080002UL,0x18UL});
		public static readonly BitSet _LineTerminator_in_equalityExpressionNoIn4236 = new BitSet(new ulong[]{0x1800080000UL,0x18UL});
		public static readonly BitSet _set_in_equalityExpressionNoIn4239 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_equalityExpressionNoIn4255 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn4258 = new BitSet(new ulong[]{0x1800080002UL,0x18UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression4271 = new BitSet(new ulong[]{0x10000080002UL});
		public static readonly BitSet _LineTerminator_in_bitwiseANDExpression4274 = new BitSet(new ulong[]{0x10000080000UL});
		public static readonly BitSet _40_in_bitwiseANDExpression4277 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_bitwiseANDExpression4279 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression4282 = new BitSet(new ulong[]{0x10000080002UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4296 = new BitSet(new ulong[]{0x10000080002UL});
		public static readonly BitSet _LineTerminator_in_bitwiseANDExpressionNoIn4299 = new BitSet(new ulong[]{0x10000080000UL});
		public static readonly BitSet _40_in_bitwiseANDExpressionNoIn4302 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_bitwiseANDExpressionNoIn4304 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4307 = new BitSet(new ulong[]{0x10000080002UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression4320 = new BitSet(new ulong[]{0x80002UL,0x4000UL});
		public static readonly BitSet _LineTerminator_in_bitwiseXORExpression4323 = new BitSet(new ulong[]{0x80000UL,0x4000UL});
		public static readonly BitSet _78_in_bitwiseXORExpression4326 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_bitwiseXORExpression4328 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression4331 = new BitSet(new ulong[]{0x80002UL,0x4000UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4345 = new BitSet(new ulong[]{0x80002UL,0x4000UL});
		public static readonly BitSet _LineTerminator_in_bitwiseXORExpressionNoIn4348 = new BitSet(new ulong[]{0x80000UL,0x4000UL});
		public static readonly BitSet _78_in_bitwiseXORExpressionNoIn4351 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_bitwiseXORExpressionNoIn4353 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4356 = new BitSet(new ulong[]{0x80002UL,0x4000UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression4370 = new BitSet(new ulong[]{0x80002UL,0x0UL,0x1UL});
		public static readonly BitSet _LineTerminator_in_bitwiseORExpression4373 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_bitwiseORExpression4376 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_bitwiseORExpression4378 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression4381 = new BitSet(new ulong[]{0x80002UL,0x0UL,0x1UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4395 = new BitSet(new ulong[]{0x80002UL,0x0UL,0x1UL});
		public static readonly BitSet _LineTerminator_in_bitwiseORExpressionNoIn4398 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_bitwiseORExpressionNoIn4401 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_bitwiseORExpressionNoIn4403 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4406 = new BitSet(new ulong[]{0x80002UL,0x0UL,0x1UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression4420 = new BitSet(new ulong[]{0x8000080002UL});
		public static readonly BitSet _LineTerminator_in_logicalANDExpression4423 = new BitSet(new ulong[]{0x8000080000UL});
		public static readonly BitSet _39_in_logicalANDExpression4426 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_logicalANDExpression4428 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression4431 = new BitSet(new ulong[]{0x8000080002UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4445 = new BitSet(new ulong[]{0x8000080002UL});
		public static readonly BitSet _LineTerminator_in_logicalANDExpressionNoIn4448 = new BitSet(new ulong[]{0x8000080000UL});
		public static readonly BitSet _39_in_logicalANDExpressionNoIn4451 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_logicalANDExpressionNoIn4453 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4456 = new BitSet(new ulong[]{0x8000080002UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression4470 = new BitSet(new ulong[]{0x80002UL,0x0UL,0x4UL});
		public static readonly BitSet _LineTerminator_in_logicalORExpression4473 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_logicalORExpression4476 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_logicalORExpression4478 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression4481 = new BitSet(new ulong[]{0x80002UL,0x0UL,0x4UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn4494 = new BitSet(new ulong[]{0x80002UL,0x0UL,0x4UL});
		public static readonly BitSet _LineTerminator_in_logicalORExpressionNoIn4497 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_logicalORExpressionNoIn4500 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_logicalORExpressionNoIn4502 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn4505 = new BitSet(new ulong[]{0x80002UL,0x0UL,0x4UL});
		public static readonly BitSet _logicalORExpression_in_conditionalExpression4519 = new BitSet(new ulong[]{0x80002UL,0x800UL});
		public static readonly BitSet _LineTerminator_in_conditionalExpression4522 = new BitSet(new ulong[]{0x80000UL,0x800UL});
		public static readonly BitSet _75_in_conditionalExpression4525 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_conditionalExpression4527 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression4530 = new BitSet(new ulong[]{0x800000000080000UL});
		public static readonly BitSet _LineTerminator_in_conditionalExpression4532 = new BitSet(new ulong[]{0x800000000080000UL});
		public static readonly BitSet _59_in_conditionalExpression4535 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_conditionalExpression4537 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression4540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpressionNoIn_in_conditionalExpressionNoIn4554 = new BitSet(new ulong[]{0x80002UL,0x800UL});
		public static readonly BitSet _LineTerminator_in_conditionalExpressionNoIn4557 = new BitSet(new ulong[]{0x80000UL,0x800UL});
		public static readonly BitSet _75_in_conditionalExpressionNoIn4560 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_conditionalExpressionNoIn4562 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpressionNoIn4565 = new BitSet(new ulong[]{0x800000000080000UL});
		public static readonly BitSet _LineTerminator_in_conditionalExpressionNoIn4567 = new BitSet(new ulong[]{0x800000000080000UL});
		public static readonly BitSet _59_in_conditionalExpressionNoIn4570 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_conditionalExpressionNoIn4572 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpressionNoIn4575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression4588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_assignmentExpression4593 = new BitSet(new ulong[]{0x411224000080000UL,0x8505UL,0x2UL});
		public static readonly BitSet _LineTerminator_in_assignmentExpression4595 = new BitSet(new ulong[]{0x411224000080000UL,0x8505UL,0x2UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpression4598 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_assignmentExpression4600 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_assignmentExpression4603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpressionNoIn_in_assignmentExpressionNoIn4615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_assignmentExpressionNoIn4620 = new BitSet(new ulong[]{0x411224000080000UL,0x8505UL,0x2UL});
		public static readonly BitSet _LineTerminator_in_assignmentExpressionNoIn4622 = new BitSet(new ulong[]{0x411224000080000UL,0x8505UL,0x2UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpressionNoIn4625 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_assignmentExpressionNoIn4627 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_assignmentExpressionNoIn4630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression4700 = new BitSet(new ulong[]{0x2000000080002UL});
		public static readonly BitSet _LineTerminator_in_expression4703 = new BitSet(new ulong[]{0x2000000080000UL});
		public static readonly BitSet _49_in_expression4706 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_expression4708 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_expression4711 = new BitSet(new ulong[]{0x2000000080002UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn4725 = new BitSet(new ulong[]{0x2000000080002UL});
		public static readonly BitSet _LineTerminator_in_expressionNoIn4728 = new BitSet(new ulong[]{0x2000000080000UL});
		public static readonly BitSet _49_in_expressionNoIn4731 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_expressionNoIn4733 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn4736 = new BitSet(new ulong[]{0x2000000080002UL});
		public static readonly BitSet _blockStatement_in_statement4754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableStatement_in_statement4759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _emptyStatement_in_statement4764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_statement4769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifStatement_in_statement4774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iterationStatement_in_statement4779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _continueStatement_in_statement4784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _breakStatement_in_statement4789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_statement4794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _withStatement_in_statement4799 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labelledStatement_in_statement4804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_statement4809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throwStatement_in_statement4814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_statement4819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _useNamespaceStatement_in_statement4824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _includeStatement_in_statement4829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _importStatement_in_statement4834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _metaDataStatement_in_statement4839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_blockStatement4850 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x18UL});
		public static readonly BitSet _LineTerminator_in_blockStatement4852 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x18UL});
		public static readonly BitSet _statementList_in_blockStatement4855 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_blockStatement4858 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_blockStatement4861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_statementList4874 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _statement_in_statementList4877 = new BitSet(new ulong[]{0x200CC40408C90012UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_statementList4879 = new BitSet(new ulong[]{0x200CC40408C90012UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _set_in_variableStatement4894 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_variableStatement4902 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _variableDeclarationList_in_variableStatement4905 = new BitSet(new ulong[]{0x2000000000080002UL});
		public static readonly BitSet _LineTerminator_in_variableStatement4908 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _61_in_variableStatement4913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList4926 = new BitSet(new ulong[]{0x2000000080002UL});
		public static readonly BitSet _LineTerminator_in_variableDeclarationList4929 = new BitSet(new ulong[]{0x2000000080000UL});
		public static readonly BitSet _49_in_variableDeclarationList4932 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_variableDeclarationList4934 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList4937 = new BitSet(new ulong[]{0x2000000080002UL});
		public static readonly BitSet _variableDeclarationNoIn_in_variableDeclarationListNoIn4951 = new BitSet(new ulong[]{0x2000000080002UL});
		public static readonly BitSet _LineTerminator_in_variableDeclarationListNoIn4954 = new BitSet(new ulong[]{0x2000000080000UL});
		public static readonly BitSet _49_in_variableDeclarationListNoIn4957 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_variableDeclarationListNoIn4959 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_variableDeclarationListNoIn4962 = new BitSet(new ulong[]{0x2000000080002UL});
		public static readonly BitSet _Identifier_in_variableDeclaration4975 = new BitSet(new ulong[]{0x800000000080002UL,0x4UL});
		public static readonly BitSet _LineTerminator_in_variableDeclaration4977 = new BitSet(new ulong[]{0x800000000080002UL,0x4UL});
		public static readonly BitSet _typeInformation_in_variableDeclaration4980 = new BitSet(new ulong[]{0x80002UL,0x4UL});
		public static readonly BitSet _LineTerminator_in_variableDeclaration4983 = new BitSet(new ulong[]{0x80002UL,0x4UL});
		public static readonly BitSet _initialiser_in_variableDeclaration4986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclarationNoIn4998 = new BitSet(new ulong[]{0x800000000080002UL,0x4UL});
		public static readonly BitSet _LineTerminator_in_variableDeclarationNoIn5000 = new BitSet(new ulong[]{0x800000000080002UL,0x4UL});
		public static readonly BitSet _typeInformation_in_variableDeclarationNoIn5003 = new BitSet(new ulong[]{0x80002UL,0x4UL});
		public static readonly BitSet _LineTerminator_in_variableDeclarationNoIn5006 = new BitSet(new ulong[]{0x80002UL,0x4UL});
		public static readonly BitSet _initialiserNoIn_in_variableDeclarationNoIn5009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_initialiser5021 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_initialiser5023 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_initialiser5026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_initialiserNoIn5038 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_initialiserNoIn5040 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_initialiserNoIn5043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_emptyStatement5055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionStatement5067 = new BitSet(new ulong[]{0x2000000000080002UL});
		public static readonly BitSet _LineTerminator_in_expressionStatement5070 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _61_in_expressionStatement5075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_ifStatement5087 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _LineTerminator_in_ifStatement5089 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _42_in_ifStatement5092 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_ifStatement5094 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_ifStatement5097 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _LineTerminator_in_ifStatement5099 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _43_in_ifStatement5102 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_ifStatement5104 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _statement_in_ifStatement5107 = new BitSet(new ulong[]{0x80002UL,0x4000000UL});
		public static readonly BitSet _LineTerminator_in_ifStatement5110 = new BitSet(new ulong[]{0x80000UL,0x4000000UL});
		public static readonly BitSet _90_in_ifStatement5113 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_ifStatement5115 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _statement_in_ifStatement5118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _doWhileStatement_in_iterationStatement5131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_iterationStatement5136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_iterationStatement5141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forInStatement_in_iterationStatement5146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_doWhileStatement5158 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_doWhileStatement5160 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _statement_in_doWhileStatement5163 = new BitSet(new ulong[]{0x80000UL,0x2000000000000000UL});
		public static readonly BitSet _LineTerminator_in_doWhileStatement5165 = new BitSet(new ulong[]{0x80000UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_doWhileStatement5168 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _LineTerminator_in_doWhileStatement5170 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _42_in_doWhileStatement5173 = new BitSet(new ulong[]{0xCC40408C10010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_doWhileStatement5175 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_doWhileStatement5177 = new BitSet(new ulong[]{0x2000000000080002UL});
		public static readonly BitSet _LineTerminator_in_doWhileStatement5180 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _61_in_doWhileStatement5185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_whileStatement5198 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _LineTerminator_in_whileStatement5200 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _42_in_whileStatement5203 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_whileStatement5205 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_whileStatement5208 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _LineTerminator_in_whileStatement5210 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _43_in_whileStatement5213 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_whileStatement5215 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _statement_in_whileStatement5218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_forStatement5230 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _LineTerminator_in_forStatement5232 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _42_in_forStatement5235 = new BitSet(new ulong[]{0x200CC40408C90010UL,0x9A50080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_forStatement5238 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9A50080081011000UL,0x10UL});
		public static readonly BitSet _forStatementInitialiserPart_in_forStatement5241 = new BitSet(new ulong[]{0x2000000000080000UL});
		public static readonly BitSet _LineTerminator_in_forStatement5245 = new BitSet(new ulong[]{0x2000000000080000UL});
		public static readonly BitSet _61_in_forStatement5248 = new BitSet(new ulong[]{0x200CC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_forStatement5251 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_forStatement5254 = new BitSet(new ulong[]{0x2000000000080000UL});
		public static readonly BitSet _LineTerminator_in_forStatement5258 = new BitSet(new ulong[]{0x2000000000080000UL});
		public static readonly BitSet _61_in_forStatement5261 = new BitSet(new ulong[]{0xCCC0408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_forStatement5264 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_forStatement5267 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _LineTerminator_in_forStatement5271 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _43_in_forStatement5274 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_forStatement5276 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _statement_in_forStatement5279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionNoIn_in_forStatementInitialiserPart5291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_forStatementInitialiserPart5296 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_forStatementInitialiserPart5298 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _variableDeclarationListNoIn_in_forStatementInitialiserPart5301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_forInStatement5313 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _LineTerminator_in_forInStatement5315 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _42_in_forInStatement5318 = new BitSet(new ulong[]{0x40008C90010UL,0x8850080080001000UL});
		public static readonly BitSet _LineTerminator_in_forInStatement5320 = new BitSet(new ulong[]{0x40008C90010UL,0x8850080080001000UL});
		public static readonly BitSet _forInStatementInitialiserPart_in_forInStatement5323 = new BitSet(new ulong[]{0x80000UL,0x1000000000UL});
		public static readonly BitSet _LineTerminator_in_forInStatement5325 = new BitSet(new ulong[]{0x80000UL,0x1000000000UL});
		public static readonly BitSet _100_in_forInStatement5328 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_forInStatement5330 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_forInStatement5333 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _LineTerminator_in_forInStatement5335 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _43_in_forInStatement5338 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_forInStatement5340 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _statement_in_forInStatement5343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_forInStatementInitialiserPart5355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_forInStatementInitialiserPart5360 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_forInStatementInitialiserPart5362 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_forInStatementInitialiserPart5365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_continueStatement5376 = new BitSet(new ulong[]{0x2000000000090002UL});
		public static readonly BitSet _Identifier_in_continueStatement5378 = new BitSet(new ulong[]{0x2000000000080002UL});
		public static readonly BitSet _LineTerminator_in_continueStatement5382 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _61_in_continueStatement5387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_breakStatement5399 = new BitSet(new ulong[]{0x2000000000090002UL});
		public static readonly BitSet _Identifier_in_breakStatement5401 = new BitSet(new ulong[]{0x2000000000080002UL});
		public static readonly BitSet _LineTerminator_in_breakStatement5405 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _61_in_breakStatement5410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_returnStatement5422 = new BitSet(new ulong[]{0x200CC40408C90012UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_returnStatement5424 = new BitSet(new ulong[]{0x2000000000080002UL});
		public static readonly BitSet _LineTerminator_in_returnStatement5428 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _61_in_returnStatement5433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_withStatement5446 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _LineTerminator_in_withStatement5448 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _42_in_withStatement5451 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_withStatement5453 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_withStatement5456 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _LineTerminator_in_withStatement5458 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _43_in_withStatement5461 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_withStatement5463 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _statement_in_withStatement5466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_switchStatement5478 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _LineTerminator_in_switchStatement5480 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _42_in_switchStatement5483 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_switchStatement5485 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_switchStatement5488 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _LineTerminator_in_switchStatement5490 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _43_in_switchStatement5493 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _LineTerminator_in_switchStatement5495 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _caseBlock_in_switchStatement5498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_caseBlock5510 = new BitSet(new ulong[]{0x80000UL,0x840000UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_caseBlock5513 = new BitSet(new ulong[]{0x80000UL,0x40000UL});
		public static readonly BitSet _caseClause_in_caseBlock5516 = new BitSet(new ulong[]{0x80000UL,0x840000UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_caseBlock5521 = new BitSet(new ulong[]{0x80000UL,0x800000UL});
		public static readonly BitSet _defaultClause_in_caseBlock5524 = new BitSet(new ulong[]{0x80000UL,0x40000UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_caseBlock5527 = new BitSet(new ulong[]{0x80000UL,0x40000UL});
		public static readonly BitSet _caseClause_in_caseBlock5530 = new BitSet(new ulong[]{0x80000UL,0x40000UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_caseBlock5536 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_caseBlock5539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_caseClause5550 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_caseClause5552 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_caseClause5555 = new BitSet(new ulong[]{0x800000000080000UL});
		public static readonly BitSet _LineTerminator_in_caseClause5557 = new BitSet(new ulong[]{0x800000000080000UL});
		public static readonly BitSet _59_in_caseClause5560 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_caseClause5562 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _statementList_in_caseClause5565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_defaultClause5578 = new BitSet(new ulong[]{0x800000000080000UL});
		public static readonly BitSet _LineTerminator_in_defaultClause5580 = new BitSet(new ulong[]{0x800000000080000UL});
		public static readonly BitSet _59_in_defaultClause5583 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_defaultClause5585 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _statementList_in_defaultClause5588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_labelledStatement5601 = new BitSet(new ulong[]{0x800000000080000UL});
		public static readonly BitSet _LineTerminator_in_labelledStatement5603 = new BitSet(new ulong[]{0x800000000080000UL});
		public static readonly BitSet _59_in_labelledStatement5606 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_labelledStatement5608 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _statement_in_labelledStatement5611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_throwStatement5623 = new BitSet(new ulong[]{0xCC40408C10010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _expression_in_throwStatement5625 = new BitSet(new ulong[]{0x2000000000080002UL});
		public static readonly BitSet _LineTerminator_in_throwStatement5628 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _61_in_throwStatement5633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_tryStatement5645 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _LineTerminator_in_tryStatement5647 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _blockStatement_in_tryStatement5650 = new BitSet(new ulong[]{0x80000UL,0x20080000UL});
		public static readonly BitSet _LineTerminator_in_tryStatement5652 = new BitSet(new ulong[]{0x80000UL,0x20080000UL});
		public static readonly BitSet _finallyClause_in_tryStatement5657 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _LineTerminator_in_tryStatement5659 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _catchClause_in_tryStatement5666 = new BitSet(new ulong[]{0x80002UL,0x20080000UL});
		public static readonly BitSet _LineTerminator_in_tryStatement5668 = new BitSet(new ulong[]{0x80002UL,0x20080000UL});
		public static readonly BitSet _finallyClause_in_tryStatement5673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_catchClause5694 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _LineTerminator_in_catchClause5696 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _42_in_catchClause5699 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_catchClause5701 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _Identifier_in_catchClause5704 = new BitSet(new ulong[]{0x800080000080000UL});
		public static readonly BitSet _typeInformation_in_catchClause5706 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _LineTerminator_in_catchClause5709 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _43_in_catchClause5712 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _LineTerminator_in_catchClause5714 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _blockStatement_in_catchClause5717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_finallyClause5729 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _LineTerminator_in_finallyClause5731 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _blockStatement_in_finallyClause5734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_functionDeclaration5749 = new BitSet(new ulong[]{0x90000UL,0x4000100000000UL});
		public static readonly BitSet _LineTerminator_in_functionDeclaration5758 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _Identifier_in_functionDeclaration5761 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _LineTerminator_in_functionDeclaration5763 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _formalParameterList_in_functionDeclaration5766 = new BitSet(new ulong[]{0x800000000080000UL,0x8000000000000000UL});
		public static readonly BitSet _LineTerminator_in_functionDeclaration5768 = new BitSet(new ulong[]{0x800000000080000UL,0x8000000000000000UL});
		public static readonly BitSet _typeInformation_in_functionDeclaration5771 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _LineTerminator_in_functionDeclaration5774 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_functionDeclaration5777 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x18UL});
		public static readonly BitSet _LineTerminator_in_functionDeclaration5779 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x18UL});
		public static readonly BitSet _sourceElements_in_functionDeclaration5782 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_functionDeclaration5784 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_functionDeclaration5787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_functionExpression5799 = new BitSet(new ulong[]{0x40000090000UL});
		public static readonly BitSet _LineTerminator_in_functionExpression5801 = new BitSet(new ulong[]{0x40000090000UL});
		public static readonly BitSet _Identifier_in_functionExpression5804 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _LineTerminator_in_functionExpression5807 = new BitSet(new ulong[]{0x40000080000UL});
		public static readonly BitSet _formalParameterList_in_functionExpression5810 = new BitSet(new ulong[]{0x800000000080000UL,0x8000000000000000UL});
		public static readonly BitSet _LineTerminator_in_functionExpression5812 = new BitSet(new ulong[]{0x800000000080000UL,0x8000000000000000UL});
		public static readonly BitSet _typeInformation_in_functionExpression5815 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _LineTerminator_in_functionExpression5818 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_functionExpression5821 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x18UL});
		public static readonly BitSet _LineTerminator_in_functionExpression5823 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x18UL});
		public static readonly BitSet _sourceElements_in_functionExpression5826 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_functionExpression5828 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_functionExpression5831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_formalParameterList5842 = new BitSet(new ulong[]{0x80080000090000UL});
		public static readonly BitSet _LineTerminator_in_formalParameterList5845 = new BitSet(new ulong[]{0x80000000090000UL});
		public static readonly BitSet _formalParameter_in_formalParameterList5848 = new BitSet(new ulong[]{0x2080000080000UL});
		public static readonly BitSet _LineTerminator_in_formalParameterList5851 = new BitSet(new ulong[]{0x2000000080000UL});
		public static readonly BitSet _49_in_formalParameterList5854 = new BitSet(new ulong[]{0x80000000090000UL});
		public static readonly BitSet _LineTerminator_in_formalParameterList5856 = new BitSet(new ulong[]{0x80000000090000UL});
		public static readonly BitSet _formalParameter_in_formalParameterList5859 = new BitSet(new ulong[]{0x2080000080000UL});
		public static readonly BitSet _LineTerminator_in_formalParameterList5866 = new BitSet(new ulong[]{0x80000080000UL});
		public static readonly BitSet _43_in_formalParameterList5869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_formalParameter5881 = new BitSet(new ulong[]{0x800000000080002UL,0x4UL});
		public static readonly BitSet _LineTerminator_in_formalParameter5883 = new BitSet(new ulong[]{0x800000000080002UL,0x4UL});
		public static readonly BitSet _typeInformation_in_formalParameter5886 = new BitSet(new ulong[]{0x80002UL,0x4UL});
		public static readonly BitSet _LineTerminator_in_formalParameter5889 = new BitSet(new ulong[]{0x80002UL,0x4UL});
		public static readonly BitSet _defaultArgumentValue_in_formalParameter5892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_formalParameter5898 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_formalParameter5900 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _Identifier_in_formalParameter5903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_formalParameter5908 = new BitSet(new ulong[]{0x80000000080000UL});
		public static readonly BitSet _LineTerminator_in_formalParameter5910 = new BitSet(new ulong[]{0x80000000080000UL});
		public static readonly BitSet _55_in_formalParameter5913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_sourceElements5927 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _sourceElement_in_sourceElements5930 = new BitSet(new ulong[]{0x200CC40408C90012UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_sourceElements5932 = new BitSet(new ulong[]{0x200CC40408C90012UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _functionDeclaration_in_sourceElement5946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_sourceElement5951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_packageDeclaration5967 = new BitSet(new ulong[]{0x90000UL,0x8000000000000000UL});
		public static readonly BitSet _LineTerminator_in_packageDeclaration5969 = new BitSet(new ulong[]{0x90000UL,0x8000000000000000UL});
		public static readonly BitSet _qualifiedName_in_packageDeclaration5972 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _LineTerminator_in_packageDeclaration5975 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_packageDeclaration5978 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF3092AD3631000UL,0x18UL});
		public static readonly BitSet _LineTerminator_in_packageDeclaration5980 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF3092AD3631000UL,0x18UL});
		public static readonly BitSet _packageElements_in_packageDeclaration5983 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_packageDeclaration5985 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_packageDeclaration5988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_packageElements6001 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF3092AD3631000UL,0x10UL});
		public static readonly BitSet _packageElement_in_packageElements6004 = new BitSet(new ulong[]{0x200CC40408C90012UL,0xFFF3092AD3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_packageElements6006 = new BitSet(new ulong[]{0x200CC40408C90012UL,0xFFF3092AD3631000UL,0x10UL});
		public static readonly BitSet _classDeclaration_in_packageElement6020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_packageElement6025 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_packageElement6030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_importStatement6041 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_importStatement6043 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _qualifiedName_in_importStatement6046 = new BitSet(new ulong[]{0x2040000000080002UL});
		public static readonly BitSet _54_in_importStatement6048 = new BitSet(new ulong[]{0x2000000000080002UL});
		public static readonly BitSet _LineTerminator_in_importStatement6052 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _61_in_importStatement6057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_classDeclaration6069 = new BitSet(new ulong[]{0x80000UL,0x1010000000000UL});
		public static readonly BitSet _LineTerminator_in_classDeclaration6072 = new BitSet(new ulong[]{0x80000UL,0x1010000000000UL});
		public static readonly BitSet _set_in_classDeclaration6075 = new BitSet(new ulong[]{0x80000UL,0x10100000UL});
		public static readonly BitSet _LineTerminator_in_classDeclaration6083 = new BitSet(new ulong[]{0x80000UL,0x10100000UL});
		public static readonly BitSet _normalClassDeclaration_in_classDeclaration6086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_normalClassDeclaration6097 = new BitSet(new ulong[]{0x80000UL,0x100000UL});
		public static readonly BitSet _LineTerminator_in_normalClassDeclaration6100 = new BitSet(new ulong[]{0x80000UL,0x100000UL});
		public static readonly BitSet _84_in_normalClassDeclaration6103 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_normalClassDeclaration6105 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _qualifiedName_in_normalClassDeclaration6108 = new BitSet(new ulong[]{0x80000UL,0x8000000408000000UL});
		public static readonly BitSet _LineTerminator_in_normalClassDeclaration6110 = new BitSet(new ulong[]{0x80000UL,0x8000000408000000UL});
		public static readonly BitSet _inheritance_in_normalClassDeclaration6113 = new BitSet(new ulong[]{0x80000UL,0x8000000400000000UL});
		public static readonly BitSet _LineTerminator_in_normalClassDeclaration6116 = new BitSet(new ulong[]{0x80000UL,0x8000000400000000UL});
		public static readonly BitSet _interfaceImplementations_in_normalClassDeclaration6119 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _LineTerminator_in_normalClassDeclaration6122 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_normalClassDeclaration6125 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFFBD92AC3631000UL,0x18UL});
		public static readonly BitSet _LineTerminator_in_normalClassDeclaration6127 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFFBD92AC3631000UL,0x18UL});
		public static readonly BitSet _classElements_in_normalClassDeclaration6130 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_normalClassDeclaration6132 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_normalClassDeclaration6135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_interfaceDeclaration6147 = new BitSet(new ulong[]{0x80000UL,0x1010000000000UL});
		public static readonly BitSet _LineTerminator_in_interfaceDeclaration6150 = new BitSet(new ulong[]{0x80000UL,0x1010000000000UL});
		public static readonly BitSet _set_in_interfaceDeclaration6153 = new BitSet(new ulong[]{0x80000UL,0x8010000000UL});
		public static readonly BitSet _LineTerminator_in_interfaceDeclaration6161 = new BitSet(new ulong[]{0x80000UL,0x8010000000UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_interfaceDeclaration6164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_normalInterfaceDeclaration6176 = new BitSet(new ulong[]{0x80000UL,0x8000000000UL});
		public static readonly BitSet _LineTerminator_in_normalInterfaceDeclaration6179 = new BitSet(new ulong[]{0x80000UL,0x8000000000UL});
		public static readonly BitSet _103_in_normalInterfaceDeclaration6182 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_normalInterfaceDeclaration6184 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _qualifiedName_in_normalInterfaceDeclaration6187 = new BitSet(new ulong[]{0x80000UL,0x8000000008000000UL});
		public static readonly BitSet _LineTerminator_in_normalInterfaceDeclaration6189 = new BitSet(new ulong[]{0x80000UL,0x8000000008000000UL});
		public static readonly BitSet _inheritance_in_normalInterfaceDeclaration6192 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _LineTerminator_in_normalInterfaceDeclaration6195 = new BitSet(new ulong[]{0x80000UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_normalInterfaceDeclaration6198 = new BitSet(new ulong[]{0x80000UL,0x80000000UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_normalInterfaceDeclaration6200 = new BitSet(new ulong[]{0x80000UL,0x80000000UL,0x8UL});
		public static readonly BitSet _interfaceElements_in_normalInterfaceDeclaration6203 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _LineTerminator_in_normalInterfaceDeclaration6205 = new BitSet(new ulong[]{0x80000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_normalInterfaceDeclaration6208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_inheritance6228 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_inheritance6230 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _qualifiedName_in_inheritance6233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_interfaceImplementations6244 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_interfaceImplementations6246 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _qualifiedName_in_interfaceImplementations6249 = new BitSet(new ulong[]{0x2000000080002UL});
		public static readonly BitSet _LineTerminator_in_interfaceImplementations6252 = new BitSet(new ulong[]{0x2000000080000UL});
		public static readonly BitSet _49_in_interfaceImplementations6255 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_interfaceImplementations6257 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _qualifiedName_in_interfaceImplementations6260 = new BitSet(new ulong[]{0x2000000080002UL});
		public static readonly BitSet _LineTerminator_in_classElements6274 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFFBD92AC3631000UL,0x10UL});
		public static readonly BitSet _classElement_in_classElements6277 = new BitSet(new ulong[]{0x200CC40408C90012UL,0xFFFBD92AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_classElements6279 = new BitSet(new ulong[]{0x200CC40408C90012UL,0xFFFBD92AC3631000UL,0x10UL});
		public static readonly BitSet _108_in_classMember6293 = new BitSet(new ulong[]{0x90000UL,0x1D10080000000UL});
		public static readonly BitSet _LineTerminator_in_classMember6296 = new BitSet(new ulong[]{0x90000UL,0x1D10080000000UL});
		public static readonly BitSet _namespace_in_classMember6299 = new BitSet(new ulong[]{0x80000UL,0x100080000000UL});
		public static readonly BitSet _LineTerminator_in_classMember6302 = new BitSet(new ulong[]{0x80000UL,0x100080000000UL});
		public static readonly BitSet _108_in_classMember6305 = new BitSet(new ulong[]{0x80000UL,0x80000000UL});
		public static readonly BitSet _LineTerminator_in_classMember6308 = new BitSet(new ulong[]{0x80000UL,0x80000000UL});
		public static readonly BitSet _functionDeclaration_in_classMember6311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_classMember6316 = new BitSet(new ulong[]{0x90000UL,0x809C10080200000UL});
		public static readonly BitSet _LineTerminator_in_classMember6319 = new BitSet(new ulong[]{0x90000UL,0x809C10080200000UL});
		public static readonly BitSet _namespace_in_classMember6322 = new BitSet(new ulong[]{0x80000UL,0x808000080200000UL});
		public static readonly BitSet _LineTerminator_in_classMember6325 = new BitSet(new ulong[]{0x80000UL,0x808000080200000UL});
		public static readonly BitSet _115_in_classMember6328 = new BitSet(new ulong[]{0x80000UL,0x800000080200000UL});
		public static readonly BitSet _LineTerminator_in_classMember6331 = new BitSet(new ulong[]{0x80000UL,0x800000080200000UL});
		public static readonly BitSet _functionDeclaration_in_classMember6335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableStatement_in_classMember6339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classMember_in_classElement6353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_classElement6358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_interfaceElements6370 = new BitSet(new ulong[]{0x80000UL,0x80000000UL});
		public static readonly BitSet _interfaceElement_in_interfaceElements6373 = new BitSet(new ulong[]{0x80002UL,0x80000000UL});
		public static readonly BitSet _LineTerminator_in_interfaceElements6375 = new BitSet(new ulong[]{0x80002UL,0x80000000UL});
		public static readonly BitSet _functionDeclaration_in_interfaceElement6389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_qualifiedName6402 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _53_in_qualifiedName6405 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _Identifier_in_qualifiedName6407 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _66_in_defaultArgumentValue6422 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_defaultArgumentValue6424 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_defaultArgumentValue6427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_useNamespaceStatement6439 = new BitSet(new ulong[]{0x80000UL,0x40000000000UL});
		public static readonly BitSet _LineTerminator_in_useNamespaceStatement6441 = new BitSet(new ulong[]{0x80000UL,0x40000000000UL});
		public static readonly BitSet _106_in_useNamespaceStatement6444 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_useNamespaceStatement6446 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _Identifier_in_useNamespaceStatement6449 = new BitSet(new ulong[]{0x2000000000080002UL});
		public static readonly BitSet _LineTerminator_in_useNamespaceStatement6452 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _61_in_useNamespaceStatement6457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_metaDataStatement6469 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_metaDataStatement6471 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _Identifier_in_metaDataStatement6474 = new BitSet(new ulong[]{0x40000080000UL,0x2000UL});
		public static readonly BitSet _LineTerminator_in_metaDataStatement6476 = new BitSet(new ulong[]{0x40000080000UL,0x2000UL});
		public static readonly BitSet _formalParameterList_in_metaDataStatement6479 = new BitSet(new ulong[]{0x80000UL,0x2000UL});
		public static readonly BitSet _LineTerminator_in_metaDataStatement6482 = new BitSet(new ulong[]{0x80000UL,0x2000UL});
		public static readonly BitSet _77_in_metaDataStatement6485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_includeStatement6497 = new BitSet(new ulong[]{0x8080000UL});
		public static readonly BitSet _LineTerminator_in_includeStatement6499 = new BitSet(new ulong[]{0x8080000UL});
		public static readonly BitSet _StringLiteral_in_includeStatement6502 = new BitSet(new ulong[]{0x2000000000080002UL});
		public static readonly BitSet _LineTerminator_in_includeStatement6505 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _61_in_includeStatement6510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_namespace6522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_namespace6527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_namespace6532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_namespace6537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_namespace6542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_typeInformation6555 = new BitSet(new ulong[]{0x100000090000UL,0x1000000000000000UL});
		public static readonly BitSet _LineTerminator_in_typeInformation6557 = new BitSet(new ulong[]{0x100000090000UL,0x1000000000000000UL});
		public static readonly BitSet _type_in_typeInformation6562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_typeInformation6566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_typeInformation6570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_type6585 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _typeModifier_in_type6587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_typeModifier6602 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _LineTerminator_in_typeModifier6604 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _type_in_typeModifier6607 = new BitSet(new ulong[]{0x80000UL,0x20UL});
		public static readonly BitSet _LineTerminator_in_typeModifier6609 = new BitSet(new ulong[]{0x80000UL,0x20UL});
		public static readonly BitSet _69_in_typeModifier6612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred2_AS341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_synpred11_AS33522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_synpred12_AS33527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred18_AS33572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred40_AS33712 = new BitSet(new ulong[]{0x20000000080000UL,0x1000UL});
		public static readonly BitSet _memberExpressionSuffix_in_synpred40_AS33715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpression_in_synpred42_AS33746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred46_AS33776 = new BitSet(new ulong[]{0x20040000080000UL,0x1000UL});
		public static readonly BitSet _callExpressionSuffix_in_synpred46_AS33779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callExpression_in_synpred60_AS33902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_synpred61_AS33918 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_synpred61_AS33920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_synpred62_AS33925 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_synpred62_AS33927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred81_AS34036 = new BitSet(new ulong[]{0x4400000080000UL});
		public static readonly BitSet _set_in_synpred81_AS34039 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_synpred81_AS34047 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _multiplicativeExpression_in_synpred81_AS34050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred95_AS34100 = new BitSet(new ulong[]{0x4000000000080000UL,0x25000000062UL});
		public static readonly BitSet _set_in_synpred95_AS34103 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_synpred95_AS34131 = new BitSet(new ulong[]{0xCC40408C90010UL,0x9250080081011000UL,0x10UL});
		public static readonly BitSet _shiftExpression_in_synpred95_AS34134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_synpred156_AS34588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpressionNoIn_in_synpred159_AS34615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _blockStatement_in_synpred179_AS34754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_synpred182_AS34769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labelledStatement_in_synpred189_AS34804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred196_AS34852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementList_in_synpred197_AS34855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred200_AS34879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred204_AS34908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred205_AS34908 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _LineTerminator_in_synpred212_AS34977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred214_AS34983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred216_AS35000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred218_AS35006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred222_AS35070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred223_AS35070 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _LineTerminator_in_synpred230_AS35110 = new BitSet(new ulong[]{0x80000UL,0x4000000UL});
		public static readonly BitSet _90_in_synpred230_AS35113 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _LineTerminator_in_synpred230_AS35115 = new BitSet(new ulong[]{0x200CC40408C90010UL,0xFFF2082AC3631000UL,0x10UL});
		public static readonly BitSet _statement_in_synpred230_AS35118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_synpred233_AS35141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred237_AS35180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred238_AS35180 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _Identifier_in_synpred264_AS35378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred265_AS35382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred266_AS35382 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _Identifier_in_synpred267_AS35401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred268_AS35405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred269_AS35405 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _expression_in_synpred270_AS35424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred271_AS35428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred272_AS35428 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _LineTerminator_in_synpred290_AS35562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementList_in_synpred291_AS35565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred293_AS35585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementList_in_synpred294_AS35588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred297_AS35628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred298_AS35628 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _LineTerminator_in_synpred301_AS35659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred303_AS35668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred316_AS35768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred319_AS35779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred321_AS35801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred324_AS35812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred327_AS35823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred335_AS35883 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred337_AS35889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred344_AS35932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDeclaration_in_synpred346_AS35946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred347_AS35969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred350_AS35980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred352_AS36001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred353_AS36006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred359_AS36052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred360_AS36052 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _LineTerminator_in_synpred364_AS36083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred368_AS36110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred370_AS36116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred373_AS36127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred378_AS36161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred382_AS36189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred385_AS36200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred392_AS36274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred393_AS36279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_synpred395_AS36293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred396_AS36296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred398_AS36302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_synpred401_AS36293 = new BitSet(new ulong[]{0x90000UL,0x1D10080000000UL});
		public static readonly BitSet _LineTerminator_in_synpred401_AS36296 = new BitSet(new ulong[]{0x90000UL,0x1D10080000000UL});
		public static readonly BitSet _namespace_in_synpred401_AS36299 = new BitSet(new ulong[]{0x80000UL,0x100080000000UL});
		public static readonly BitSet _LineTerminator_in_synpred401_AS36302 = new BitSet(new ulong[]{0x80000UL,0x100080000000UL});
		public static readonly BitSet _108_in_synpred401_AS36305 = new BitSet(new ulong[]{0x80000UL,0x80000000UL});
		public static readonly BitSet _LineTerminator_in_synpred401_AS36308 = new BitSet(new ulong[]{0x80000UL,0x80000000UL});
		public static readonly BitSet _functionDeclaration_in_synpred401_AS36311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_synpred402_AS36316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred403_AS36319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred405_AS36325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classMember_in_synpred409_AS36353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred411_AS36375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_synpred413_AS36405 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _Identifier_in_synpred413_AS36407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred417_AS36452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred418_AS36452 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _LineTerminator_in_synpred420_AS36476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred424_AS36505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineTerminator_in_synpred425_AS36505 = new BitSet(new ulong[]{0x80002UL});
	}
	#endregion Follow sets
}
